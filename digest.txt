Directory structure:
└── NQ_Efficient_Frontier/
    ├── README.md
    ├── LICENSE
    ├── config.py
    ├── requirements.txt
    ├── database/
    │   ├── data.db
    │   └── schema.sql
    ├── docs/
    │   ├── NQ_Efficient_Frontier_Project_Outline.docx
    │   └── reports/
    ├── logs/
    ├── results/
    │   ├── fundamental_analysis_capm_20250314_113919.csv
    │   ├── fundamental_analysis_capm_20250314_113934.csv
    │   ├── fundamental_analysis_fama_french_20250314_113951.csv
    │   ├── fundamental_analysis_fama_french_20250314_114022.csv
    │   ├── fundamental_analysis_fama_french_20250314_114222.csv
    │   ├── fundamental_analysis_fama_french_20250314_132442.csv
    │   ├── integrated_optimal_portfolios_20250314_122513.csv
    │   ├── integrated_optimal_portfolios_20250314_122646.csv
    │   ├── integrated_optimal_portfolios_20250314_122830.csv
    │   ├── optimal_portfolios_20250314_115801.csv
    │   └── optimal_portfolios_20250314_115959.csv
    └── scripts/
        ├── __init__.py
        ├── backtest_technicals.py
        ├── cleanup_database.py
        ├── dash_app.py
        ├── db_setup.py
        ├── db_utils.py
        ├── fetch_price.py
        ├── fetch_tickers.py
        ├── fundamentals.py
        ├── generate_expected_returns.py
        ├── integrated_strategy.py
        ├── monte_carlo.py
        ├── optimization.py
        ├── run_analysis_fundamental.py
        ├── technical_signals.py
        └── __pycache__/

================================================
File: README.md
================================================
# Efficient Frontier Strategy for Nasdaq-100

## Overview

This project provides a comprehensive framework to perform portfolio optimization using the Efficient Frontier strategy specifically tailored for Nasdaq-100 stocks. It integrates fundamental and technical analysis, Monte Carlo simulations, and CAPM/Fama-French factor models to maximize returns while managing risk effectively.

## Features

- **Data Management:** Automated fetching and storage of Nasdaq-100 tickers and historical price data.
- **Fundamental Analysis:** Calculation of expected returns, beta values, and factor analysis using CAPM and Fama-French models.
- **Technical Indicators:** Computation of critical signals including SMA, RSI, MACD, and ATR.
- **Portfolio Optimization:** Utilization of Monte Carlo simulations to generate optimal portfolio weights that maximize the Sharpe Ratio.
- **Backtesting:** Robust testing capabilities to evaluate the historical performance of various investment strategies.

## Directory Structure

```
buff-quants-nq_efficientfrontier_strategy/
â”œâ”€â”€ README.md
â”œâ”€â”€ config.py
â”œâ”€â”€ LICENSE
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ database/
â”‚   â”œâ”€â”€ data.db
â”‚   â””â”€â”€ schema.sql
â”œâ”€â”€ docs/
â”‚   â””â”€â”€ NQ_Efficient_Frontier_Project_Outline.docx
â”œâ”€â”€ logs/
â”œâ”€â”€ results/
â”‚   â”œâ”€â”€ [various fundamental analysis CSV files]
â””â”€â”€ scripts/
    â”œâ”€â”€ backtest.py
    â”œâ”€â”€ cleanup_database.py
    â”œâ”€â”€ db_setup.py
    â”œâ”€â”€ fetch_price.py
    â”œâ”€â”€ fetch_tickers.py
    â”œâ”€â”€ fundamentals.py
    â”œâ”€â”€ monte_carlo.py
    â”œâ”€â”€ optimization.py
    â”œâ”€â”€ run_analysis.py
    â””â”€â”€ technical_signals.py
```

## Installation

Install dependencies using:

```bash
pip install -r requirements.txt
```

## Usage

1. **Set Up the Database**

```bash
python scripts/db_setup.py
```

2. **Fetch Nasdaq-100 Tickers**

```bash
python scripts/fetch_tickers.py
```

2. **Fetch Historical Prices**

```bash
python scripts/fetch_price.py
```

3. **Run Fundamental and Technical Analysis**

```bash
python scripts/run_analysis.py
```

4. **Portfolio Optimization and Backtesting**

```bash
python scripts/optimization.py
python scripts/monte_carlo.py
python scripts/backtest.py
```

## Outputs

- Fundamental and technical analysis results in CSV format stored in `results/`
- Portfolio weights and performance metrics stored in the SQLite database and CSV files.
- Logs and data persistence for analysis reproducibility.

## License

This project is licensed under the MIT License - see [LICENSE](LICENSE) for details.

## Authors

Buff Quants - 2025




================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2025 Buff Quants

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: config.py
================================================
## config.py

DB_PATH = 'database/data.db'



================================================
File: requirements.txt
================================================
pandas>=1.5.0
yfinance>=0.2.0
numpy>=1.21.0
scikit-learn>=1.0.0  # Will be needed for regression analysis
lxml>=4.9.0  # For HTML parsing
matplotlib>=3.5.0  # For visualization
statsmodels>=0.13.0  # For statistical analysis


================================================
File: database/data.db
================================================
[Non-text file]


================================================
File: database/schema.sql
================================================
-- Table: Nasdaq-100 Tickers
CREATE TABLE IF NOT EXISTS nasdaq_100_tickers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT NOT NULL,
    ticker TEXT NOT NULL,
    UNIQUE(date, ticker)
);

-- Table: Daily Price Data
CREATE TABLE IF NOT EXISTS nasdaq_100_daily_prices (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ticker TEXT NOT NULL,
    date TEXT NOT NULL,
    close REAL,
    volume INTEGER,
    UNIQUE(ticker, date)
);

-- Table: Fundamental Analysis Results (CAPM, Fama-French)
CREATE TABLE IF NOT EXISTS fundamental_results (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ticker TEXT NOT NULL,
    analysis_date TEXT NOT NULL,
    beta REAL,
    expected_return REAL,
    ff_factor1 REAL,  -- e.g., Size
    ff_factor2 REAL,  -- e.g., Value
    ff_factor3 REAL,  -- e.g., Profitability
    ff_factor4 REAL,  -- e.g., Investment
    ff_factor5 REAL,  -- e.g., (if applicable)
    UNIQUE(ticker, analysis_date)
);

-- Table: Monte Carlo & Portfolio Optimization Results
CREATE TABLE IF NOT EXISTS portfolio_optimization (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    optimization_date TEXT NOT NULL,
    portfolio_weights TEXT,  -- Store as JSON mapping tickers to weights
    expected_return REAL,
    volatility REAL,
    sharpe_ratio REAL
);

-- Table: Technical Indicator Signals
CREATE TABLE IF NOT EXISTS technical_signals (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    ticker TEXT NOT NULL,
    signal_date TEXT NOT NULL,
    sma REAL,         -- Simple Moving Average
    rsi REAL,         -- Relative Strength Index
    macd REAL,        -- MACD value
    atr REAL,         -- Average True Range
    signal TEXT,      -- e.g., "buy", "sell", or "hold"
    UNIQUE(ticker, signal_date)
);

-- Table: Backtesting Results
CREATE TABLE IF NOT EXISTS backtesting_results (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    test_date TEXT NOT NULL,
    strategy_name TEXT NOT NULL,
    total_return REAL,
    sharpe_ratio REAL,
    max_drawdown REAL
);

-- Indexes to speed up queries
CREATE INDEX IF NOT EXISTS idx_prices_ticker_date ON nasdaq_100_daily_prices (ticker, date);
CREATE INDEX IF NOT EXISTS idx_fundamentals_ticker_date ON fundamental_results (ticker, analysis_date);
CREATE INDEX IF NOT EXISTS idx_tech_signals ON technical_signals (ticker, signal_date);



================================================
File: docs/NQ_Efficient_Frontier_Project_Outline.docx
================================================
[Non-text file]




================================================
File: results/fundamental_analysis_capm_20250314_113919.csv
================================================
ticker,date,analysis_date,model,market_premium,risk_free_rate,beta,alpha,r_squared,expected_return_capm,sharpe_ratio
AAPL,2025-03-14,2025-03-14 11:39:18,capm,0.11764179884946373,0.024669657624011514,1.1734299677161553,0.13683099084184788,0.6247480609031115,0.16271406985000816,0.86735785221568
MSFT,2025-03-14,2025-03-14 11:39:18,capm,0.11764179884946373,0.024669657624011514,1.1724831806248959,0.08818026196892004,0.6720686174268087,0.16260268811346495,0.740616584192996
AMZN,2025-03-14,2025-03-14 11:39:18,capm,0.11764179884946373,0.024669657624011514,1.080896172522895,0.082747036550627,0.4113984696552667,0.15182822772910518,0.5834968931977076
GOOGL,2025-03-14,2025-03-14 11:39:18,capm,0.11764179884946373,0.024669657624011514,1.1318171743301524,0.10208809365193239,0.5517062581391106,0.15781866598092772,0.7231870623948227
META,2025-03-14,2025-03-14 11:39:19,capm,0.11764179884946373,0.024669657624011514,1.307404524600877,0.1323946954879565,0.3862027050874539,0.17847507772198665,0.6372863685289948



================================================
File: results/fundamental_analysis_capm_20250314_113934.csv
================================================
ticker,date,analysis_date,model,market_premium,risk_free_rate,beta,alpha,r_squared,expected_return_capm,sharpe_ratio
AAPL,2025-03-14,2025-03-14 11:39:34,capm,0.11764179884946373,0.024669657624011514,1.1734299677161553,0.13683099084184788,0.6247480609031115,0.16271406985000816,0.86735785221568
MSFT,2025-03-14,2025-03-14 11:39:34,capm,0.11764179884946373,0.024669657624011514,1.1724831806248959,0.08818026196892004,0.6720686174268087,0.16260268811346495,0.740616584192996
AMZN,2025-03-14,2025-03-14 11:39:34,capm,0.11764179884946373,0.024669657624011514,1.080896172522895,0.082747036550627,0.4113984696552667,0.15182822772910518,0.5834968931977076
GOOGL,2025-03-14,2025-03-14 11:39:34,capm,0.11764179884946373,0.024669657624011514,1.1318171743301524,0.10208809365193239,0.5517062581391106,0.15781866598092772,0.7231870623948227
META,2025-03-14,2025-03-14 11:39:34,capm,0.11764179884946373,0.024669657624011514,1.307404524600877,0.1323946954879565,0.3862027050874539,0.17847507772198665,0.6372863685289948



================================================
File: results/fundamental_analysis_fama_french_20250314_113951.csv
================================================
ticker,date,analysis_date,model,market_premium,risk_free_rate,beta,alpha,r_squared,expected_return_capm,market_beta,smb_beta,hml_beta,ff_alpha,ff_r_squared,expected_return_ff,smb_premium,hml_premium,sharpe_ratio
AAPL,2025-03-14,2025-03-14 11:39:50,fama_french,0.11764179884946373,0.024669657624011514,1.1734299677161553,0.13683099084184788,0.6247480609031115,0.16271406985000816,1.0777627399096994,-0.1363310343776121,-0.6007801687309459,0.08192915706733145,0.7185119790978396,0.20412304913271018,-0.054817739980149945,-0.07521900224255919,0.86735785221568
MSFT,2025-03-14,2025-03-14 11:39:51,fama_french,0.11764179884946373,0.024669657624011514,1.1724831806248959,0.08818026196892004,0.6720686174268087,0.16260268811346495,1.0879512117581893,-0.26526696216836265,-0.6275954360049671,0.0230652379649477,0.8061563460865405,0.21440663310144584,-0.054817739980149945,-0.07521900224255919,0.740616584192996
AMZN,2025-03-14,2025-03-14 11:39:51,fama_french,0.11764179884946373,0.024669657624011514,1.080896172522895,0.082747036550627,0.4113984696552667,0.15182822772910518,0.8526614807568026,0.09767341659337148,-1.1507374980186553,0.0002597756281154385,0.6168592795823734,0.20618137852016305,-0.054817739980149945,-0.07521900224255919,0.5834968931977076
GOOGL,2025-03-14,2025-03-14 11:39:51,fama_french,0.11764179884946373,0.024669657624011514,1.1318171743301524,0.10208809365193239,0.5517062581391106,0.15781866598092772,1.0264469023767238,-0.07781019069317477,-0.6133785352749832,0.04991342567783432,0.6362040761789707,0.19582581786468015,-0.054817739980149945,-0.07521900224255919,0.7231870623948227
META,2025-03-14,2025-03-14 11:39:51,fama_french,0.11764179884946373,0.024669657624011514,1.307404524600877,0.1323946954879565,0.3862027050874539,0.17847507772198665,1.1052143492345676,0.053122214109735034,-1.0417416401119675,0.05548996612506432,0.4968083101890268,0.23013578882571753,-0.054817739980149945,-0.07521900224255919,0.6372863685289948



================================================
File: results/fundamental_analysis_fama_french_20250314_114022.csv
================================================
ticker,date,analysis_date,model,market_premium,risk_free_rate,beta,alpha,r_squared,expected_return_capm,market_beta,smb_beta,hml_beta,ff_alpha,ff_r_squared,expected_return_ff,smb_premium,hml_premium,sharpe_ratio
NVDA,2025-03-14,2025-03-14 11:40:21,fama_french,0.11764179884946373,0.024669657624011514,1.7568109550551572,0.5425090448186015,0.4843941446980309,0.2313440586151446,1.410440484937096,0.24521793488553764,-1.6815641762536764,0.42844710912297923,0.6726603687254357,0.3036397588585851,-0.05481778876418643,-0.07521904436261481,1.3903679117292436
TSLA,2025-03-14,2025-03-14 11:40:22,fama_french,0.11764179884946373,0.024669657624011514,1.5779480719936012,0.5521690659498272,0.25129874989004053,0.21030230730438185,1.0937542266534777,1.2134936267530292,-1.7689604299994839,0.4925570086286725,0.3816433509961257,0.219879348108538,-0.05481778876418643,-0.07521904436261481,1.098017520358462
AVGO,2025-03-14,2025-03-14 11:40:22,fama_french,0.11764179884946373,0.024669657624011514,1.3861684660926596,0.3271942183173843,0.4988142955031676,0.18774100948355388,1.2187893621890575,0.2587584154190408,-0.7188875446618259,0.28815766666519044,0.5512531591625824,0.20793970056677535,-0.05481778876418643,-0.07521904436261481,1.170178132872972



================================================
File: results/fundamental_analysis_fama_french_20250314_114222.csv
================================================
ticker,date,analysis_date,model,market_premium,risk_free_rate,beta,alpha,r_squared,expected_return_capm,market_beta,smb_beta,hml_beta,ff_alpha,ff_r_squared,expected_return_ff,smb_premium,hml_premium,sharpe_ratio
AAL,2025-03-14,2025-03-14 11:42:19,fama_french,0.11764179884946373,0.024669657624011514,1.3701463422719609,-0.09617712114780558,0.21962501160842673,0.18585613801589804,1.3674323156670567,1.0056115245587955,0.657381962664463,0.018013719105463497,0.32030988485097345,0.08096372163318115,-0.054817873742113686,-0.07521905168114708,0.10416383975090011
AAPL,2025-03-14,2025-03-14 11:42:20,fama_french,0.11764179884946373,0.024669657624011514,1.1734299677161553,0.13683099084184788,0.6247480609031115,0.16271406985000816,1.0777614014580374,-0.13632805695619998,-0.6007817675256849,0.08192925044979465,0.7185119791974981,0.2041228966563921,-0.054817873742113686,-0.07521905168114708,0.86735785221568
ABNB,2025-03-14,2025-03-14 11:42:20,fama_french,0.101824941907154,0.029629420407851954,1.5780735699444455,-0.09359687776257368,0.27959944699088224,0.19031666999266023,1.0344075696449804,1.0264944789421775,-0.9273998708671066,-0.019504992636205087,0.3581178602213646,0.1484458051674854,-0.054817873742113686,-0.07521905168114708,0.1369286570103766
ADBE,2025-03-14,2025-03-14 11:42:20,fama_french,0.11764179884946373,0.024669657624011514,1.2577885429020959,-0.038663124664738355,0.476603504822359,0.17263816438325996,1.0796254190670784,-0.010428069570681289,-0.9561825454604438,-0.11299146668497514,0.6067823351551529,0.22417352291136822,-0.054817873742113686,-0.07521905168114708,0.2810474701287988
ADI,2025-03-14,2025-03-14 11:42:20,fama_french,0.11764179884946373,0.024669657624011514,1.264684994489672,0.0230281760492736,0.569209642958352,0.17344947535370064,1.1600244607791215,0.3655132140289858,-0.3134125846793827,0.02197725930749275,0.5903465947658,0.1646749620862518,-0.054817873742113686,-0.07521905168114708,0.4801360082148
ADP,2025-03-14,2025-03-14 11:42:20,fama_french,0.11764179884946373,0.024669657624011514,0.9796644602515251,0.02868945734018221,0.5715174990525953,0.13991914699688987,1.0615873527606292,-0.10945100379151275,0.3633445127342286,0.04976746577618015,0.6026688754013696,0.12822614506398575,-0.054817873742113686,-0.07521905168114708,0.5203348156228625
ADSK,2025-03-14,2025-03-14 11:42:20,fama_french,0.11764179884946373,0.024669657624011514,1.33660778779377,-0.012257228356087063,0.528604257872078,0.18191060213627291,1.152811546372842,0.4502351498541596,-0.6784288733360162,-0.036077537415708946,0.5842248686643206,0.1866383245602219,-0.054817873742113686,-0.07521905168114708,0.3694432368756999
AEP,2025-03-14,2025-03-14 11:42:20,fama_french,0.11764179884946373,0.024669657624011514,0.57667819396418,-0.02840156110802946,0.24600226157094562,0.0925111177192176,0.7553933171027868,-0.40475026181689994,0.6817458664395377,-0.0014515922574196002,0.3827106591192788,0.08444275747508902,-0.054817873742113686,-0.07521905168114708,0.15890551359970473
AKAM,2025-03-14,2025-03-14 11:42:20,fama_french,0.11764179884946373,0.024669657624011514,0.6842156910530489,-0.042787151565639114,0.2395461496428033,0.10516202232052112,0.6461225193453087,-0.06139179273188272,-0.2439678108791571,-0.06546296242308407,0.25740652334296266,0.12239706799477507,-0.054817873742113686,-0.07521905168114708,0.1263485085856435
ALGN,2025-03-14,2025-03-14 11:42:20,fama_french,0.11764179884946373,0.024669657624011514,1.5329812292812366,-0.1234859782670421,0.3639454612918378,0.20501232703911837,1.3463460609298203,0.917593437589129,-0.38131541514640604,-0.0948836247538136,0.4085416160042552,0.1614378928160479,-0.054817873742113686,-0.07521905168114708,0.10481659578339794
AMAT,2025-03-14,2025-03-14 11:42:20,fama_french,0.11764179884946373,0.024669657624011514,1.6329422768265767,0.09732830132410544,0.5532814558149516,0.21677192448722896,1.4371584682787677,0.4673001402519112,-0.7308951125057443,0.07054401613414706,0.598086344142424,0.2231004022171318,-0.054817873742113686,-0.07521905168114708,0.6176092238649991
AMD,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.5596656851146666,0.11250851884842843,0.4025210737722842,0.20815153442468215,1.251903584568502,0.4104118251568938,-1.3654985541387428,0.033236332337144396,0.5248021035183541,0.2521594499993145,-0.054817873742113686,-0.07521905168114708,0.5640369630122888
AMGN,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.6298027925611281,-0.016482469518870304,0.2479484305069245,0.09876079106131828,0.7222903402163152,-0.2742975776448502,0.3094979782545149,-0.009969417708193302,0.27606862657031217,0.10139745809621613,-0.054817873742113686,-0.07521905168114708,0.2133688689291454
AMZN,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.080896172522895,0.082747036550627,0.4113984696552667,0.15182822772910518,0.8526592720395101,0.09767732359588298,-1.1507406643810603,0.00025986530067087044,0.6168599266433539,0.20618118650574355,-0.054817873742113686,-0.07521905168114708,0.5834968931977076
ANSS,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.268593077759653,-0.056784437253118866,0.5661663537821979,0.17390922929963473,1.1119270105148018,0.15685458660948326,-0.7298904296048508,-0.10310776231416438,0.6428825552136967,0.2017819823516712,-0.054817873742113686,-0.07521905168114708,0.25689040149287357
APP,2025-03-14,2025-03-14 11:42:21,fama_french,0.07552653686214089,0.032290600187605344,2.14955379041138,0.5238955128564078,0.21847870782072354,0.1946389537762651,1.2002681833788533,1.175146692156667,-1.851401656167221,0.5673888243376258,0.2940264371771113,0.19778433324272,-0.054817873742113686,-0.07521905168114708,0.8992808087345441
ARM,2025-03-14,2025-03-14 11:42:21,fama_french,0.16780614686257966,0.050296461354769194,3.027778555275917,0.28353389482138525,0.21846397832312203,0.558376314268769,1.1421789967338478,1.9795962017051671,-2.4640494751102886,0.3187603695318205,0.30824305086218284,0.3187873279918257,-0.054817873742113686,-0.07521905168114708,0.968470535441918
ASML,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.4318535805296853,0.07798841950924118,0.49448036982830723,0.19311548852656915,1.2087699143548107,0.4237993068760759,-0.9054055980244358,0.03501018161101491,0.5712703810941919,0.21174349831769557,-0.054817873742113686,-0.07521905168114708,0.5669491880767797
AVGO,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.3861684660926596,0.3271942183173843,0.4988142955031676,0.18774100948355388,1.2187884992781368,0.258760445474877,-0.7188892706362655,0.28815771279838764,0.5512532943658687,0.20793960086764635,-0.054817873742113686,-0.07521905168114708,1.170178132872972
AXON,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.144728789734437,0.3774088602654742,0.2395049455019015,0.1593376116431402,0.8820636307498919,0.929064028074167,-0.7787237864036991,0.3761175533999961,0.3083309389446244,0.1360827599906471,-0.054817873742113686,-0.07521905168114708,1.0255501487104004
AZN,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.523575999930927,0.03595445505123156,0.13885994073076746,0.08626408009029246,0.5817035103023682,-0.20310400239005602,0.1739988392785098,0.03652651161321743,0.14814226918591833,0.09114800684841588,-0.054817873742113686,-0.07521905168114708,0.3252356812629216
BIDU,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.007554684868477,-0.10543907128029616,0.16337066033468772,0.1432002031911437,0.7536911934730022,0.8340932590367899,-0.7952796319898934,-0.11400694569447371,0.21834773884042236,0.12743220617775924,-0.054817873742113686,-0.07521905168114708,0.024602209632311647
BIIB,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8161682325573733,-0.15554247718770464,0.13923144706213852,0.12068515666584835,0.7642268977587225,0.11975228512462036,-0.19672687213415138,-0.16313245448067445,0.14246394076999203,0.12280772772133094,-0.054817873742113686,-0.07521905168114708,-0.12748819435243589
BKNG,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1342377313075376,0.08925916418060287,0.42125093788545787,0.15810342465796492,1.1373697708258432,0.29270367669588915,0.21224003899172478,0.12410664249054643,0.44714991910408375,0.1264619957662711,-0.054817873742113686,-0.07521905168114708,0.5969527180805738
BKR,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1378337137101193,0.06454340784395673,0.2977902110872831,0.15852646249643568,1.3180660011537293,0.31439133359887417,1.1702822534702206,0.17457397826576787,0.4856308115671828,0.07446752726591192,-0.054817873742113686,-0.07521905168114708,0.4457441957984086
BMRN,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8007946703983685,-0.09288806496415188,0.20354047703610745,0.11887658315873899,0.7304142113605849,0.3063294081185402,-0.17031583035912184,-0.0866537517890043,0.21410664474352614,0.10661556778184485,-0.054817873742113686,-0.07521905168114708,0.0034807293608283586
CA,2025-03-14,2025-03-14 11:42:21,fama_french,0.16755067888498218,0.04964135633882626,0.010671875599614584,-0.03131282609842106,0.0009403079592692487,0.05142943634051776,0.0103145402611937,0.019178757602025184,0.006413383183025532,-0.028240873039688915,0.0062955244713333025,0.049835817248122326,-0.054817873742113686,-0.07521905168114708,-0.6717246166744846
CCEP,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8782326158794667,0.03370376415840468,0.3468546404084377,0.12798652236434208,0.9826454463913252,0.0032722846433735457,0.5584757761305513,0.076938491466953,0.41288264757779625,0.09808243761485994,-0.054817873742113686,-0.07521905168114708,0.43044463709044917
CDNS,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.2607645445787221,0.18475252922577312,0.5271935205220858,0.17298826657387728,1.0638403037407886,0.13724838760831568,-0.9574762644782941,0.11965589803828806,0.6563681072124841,0.21431853648268087,-0.054817873742113686,-0.07521905168114708,0.8985767932188836
CDW,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1414412754567405,-0.054976585542496355,0.545437901972752,0.1589508625497687,1.1347377033819945,0.2524647471176275,0.13295463501798002,-0.028780297508119945,0.5650351755491069,0.1343219400776843,-0.054817873742113686,-0.07521905168114708,0.2403724671482062
CEG,2025-03-14,2025-03-14 11:42:21,fama_french,0.06493070864999811,0.040611743208927076,1.0146992731126159,0.5712816402032909,0.16445402641757556,0.1064968860787672,1.092195790252552,-0.12024291561360152,0.14332257339261278,0.572680454684485,0.1659182493819208,0.10733966276596611,-0.054817873742113686,-0.07521905168114708,1.4535648539107822
CHKP,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.654638729523168,0.036085102125353444,0.2794968241326794,0.10168253536164454,0.6658170621961923,-0.08167915444408629,0.004986556565631989,0.03130814742467419,0.28120260502042205,0.10709996804509415,-0.054817873742113686,-0.07521905168114708,0.42786695195992436
CHTR,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8011049064995905,-0.12859894992104062,0.23818502086116577,0.11891307989175479,0.8056574193138406,0.08243806439556367,0.07933109973815383,-0.11727775838755755,0.24120472475647825,0.10896235619180175,-0.054817873742113686,-0.07521905168114708,-0.09804638969320507
CMCSA,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8419655584436648,-0.09639191200650725,0.39331433719785747,0.12372000048861753,0.9169185295029727,-0.02657199669499931,0.3815810982852682,-0.06867189756900555,0.4292810628546271,0.10529205484058017,-0.054817873742113686,-0.07521905168114708,0.00927615685911299
COST,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.7249275519610704,0.16738628165050487,0.4105450849843971,0.10995143887224992,0.7149708157800814,-0.24779834491848177,-0.21859966186194518,0.13488630390506398,0.46325136367788156,0.13880674816556984,-0.054817873742113686,-0.07521905168114708,1.0461725617618334
CPRT,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.047968255212501,0.08171557219111576,0.5338332818068532,0.147954528304344,0.9867215512467679,0.2025603462713003,-0.19098045898271504,0.07980080834026732,0.5435155302778685,0.14401079740346562,-0.054817873742113686,-0.07521905168114708,0.6695401840262557
CRWD,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1891254233453923,0.3781400393651248,0.21467304739560644,0.16456051148399353,0.7496177652410734,0.9219116707873416,-1.7256818418293842,0.3034380803215325,0.39173356570149054,0.19212295405166635,-0.054817873742113686,-0.07521905168114708,0.9455487145273818
CSCO,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8994642136904273,-0.022903387785232848,0.4948762838838192,0.13048424572327183,0.9761346803902603,-0.18478784933233627,0.2850286963845471,-0.012619635925174292,0.5150376127251364,0.1281939860942856,-0.054817873742113686,-0.07521905168114708,0.3037699336716356
CSGP,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0153455882930227,-0.051685434548520426,0.36987894171666047,0.14411673908466968,0.9088534575848981,0.3429684998909784,-0.3382329070992796,-0.05607319785412521,0.39135407129679567,0.13822956785967325,-0.054817873742113686,-0.07521905168114708,0.19013716842401138
CSX,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0040385193940886,-0.0305156992472662,0.5233245657737242,0.14278655515968425,1.1105864637601766,-0.0032117995260544513,0.5655192440550864,0.012851977898793866,0.6007811336910952,0.1129592897742649,-0.054817873742113686,-0.07521905168114708,0.2956734884940663
CTAS,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0889778156624106,0.12204485233371032,0.5243074054224863,0.15277896676569722,1.1562849497684085,-0.050322819472807374,0.32497793663917335,0.14390308879843372,0.5440146228945826,0.1390111568502419,-0.054817873742113686,-0.07521905168114708,0.779199827293534
CTSH,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0738098735399892,-0.04210687127069058,0.5204833545207361,0.150994582769571,1.101568804173234,0.1331486590643737,0.23684938838591416,-0.01544532599132501,0.540838833741428,0.12914568053623268,-0.054817873742113686,-0.07521905168114708,0.2650625569979031
DASH,2025-03-14,2025-03-14 11:42:21,fama_french,0.10140651975297121,0.02960103039764109,1.8801104015895116,-0.06454347960480339,0.2586238076387477,0.22025648297419456,1.046507030080935,1.2513064817575037,-1.539679449484789,0.01429604459792095,0.3629280870914309,0.18294293356869176,-0.054817873742113686,-0.07521905168114708,0.20787782497215593
DDOG,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.3006395142117384,0.27046024642818006,0.2196939188947018,0.17767922973057307,0.8114678610638348,1.0941884142250768,-1.8751843195119613,0.19512564735179777,0.40071111457432973,0.20120070040806073,-0.054817873742113686,-0.07521905168114708,0.7148940605905242
DLTR,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.7285959378671291,-0.07605643942135153,0.1531948798699314,0.11038299438911268,0.7542218799625688,0.1434609813372833,0.2323748616560703,-0.04908802016077191,0.16645360902262585,0.08805443362425812,-0.054817873742113686,-0.07521905168114708,0.024301895358867454
DOCU,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.2439609579816637,0.05997953503332021,0.18974588978358586,0.1710114624194766,0.7280679903848766,1.1783086790416935,-1.9613497238246238,-0.016678312579294096,0.37773656432304514,0.19325937554182607,-0.054817873742113686,-0.07521905168114708,0.3384470554493169
DXCM,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0006202163962123,0.055344965185352056,0.18872948050103266,0.1423844198460016,0.7954229162778627,0.4868983254010092,-0.7679548099040001,0.026943773779939995,0.23356896377305336,0.14931874194890105,-0.054817873742113686,-0.07521905168114708,0.3519765796155686
EA,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.586431739308944,0.007457047233063913,0.23096045339922666,0.09365854233873545,0.5489445171390138,-0.08158785665922796,-0.2542322822795182,-0.017285743042124813,0.25822260344776127,0.11284406209382965,-0.054817873742113686,-0.07521905168114708,0.2934761924347583
EBAY,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8209672453189225,0.05776756955788701,0.28503403652163806,0.12124972115981854,0.7636178389525503,0.17063916395458806,-0.19154278667612257,0.05379244403681644,0.2923469930733591,0.11955662445694937,-0.054817873742113686,-0.07521905168114708,0.4702076143406586
ENPH,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.5981958125504534,0.2418165167081433,0.20631944937319824,0.21268428792612717,1.1385054019251883,1.848304980464219,-1.2142946860342334,0.26505153414305416,0.30989717346200985,0.14862342679526622,-0.054817873742113686,-0.07521905168114708,0.5722754710571955
EXC,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8558192021616027,-0.014020717164516966,0.3663441965996992,0.1253497680562153,1.0290377030277,-0.27656637445401444,0.7380997400214051,0.025370743819573986,0.47260451696583594,0.10536912219773337,-0.054817873742113686,-0.07521905168114708,0.28710808846497854
EXPE,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.3298633485464677,0.04983529515491915,0.32029583615991586,0.18111717417098935,1.2703078406834611,0.8310512402376952,0.2379200603535852,0.12067842682440184,0.3897524534335812,0.11065837381829695,-0.054817873742113686,-0.07521905168114708,0.4112432892187399
FANG,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1985748875381108,0.17283726826106616,0.1854088264281446,0.16567216344978855,1.3366986617059642,0.742550238785777,1.231986798561535,0.3146764085170662,0.34959251111266854,0.04854738879834581,-0.054817873742113686,-0.07521905168114708,0.5281717431631551
FAST,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8959261740592128,0.06625343130769888,0.48570603216869346,0.13006802437665504,0.9232583808883622,-0.01767408158821454,0.13381232074489777,0.07544625696417066,0.4903396344693556,0.12418705405788764,-0.054817873742113686,-0.07521905168114708,0.6255039165214505
FOX,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8112309652501897,-0.0032670183318405984,0.2741744756428631,0.12010432765843063,0.8698775574072032,0.30895346157671066,0.5188662548246326,0.05623137418344518,0.36748105280041266,0.07103881877001417,-0.054817873742113686,-0.07521905168114708,0.2786856878895989
FOXA,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.7907531603512584,0.009886717917305865,0.24549520274444558,0.117695281853632,0.8578500067574415,0.29200365973525066,0.5525633920661308,0.07091029319523186,0.33856691982347453,0.06801836146544721,-0.054817873742113686,-0.07521905168114708,0.302075277495031
FTNT,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1963777985595714,0.2336471988808114,0.31400132815228143,0.16541369395012084,1.030367744769191,0.17881188157507116,-0.7650037147951518,0.18600599712682417,0.36612007522575685,0.19362473940679828,-0.054817873742113686,-0.07521905168114708,0.8214671909341484
GEHC,2025-03-14,2025-03-14 11:42:21,fama_french,0.16388822170519407,0.049859158437545986,0.9792822755589501,-0.03211047987317207,0.1846812040693656,0.21035198912631814,1.0250399992636923,0.1589031980410408,0.17501515613702298,0.007713354333970229,0.20019074766400524,0.19597593157167933,-0.054817873742113686,-0.07521905168114708,0.434512176879731
GFS,2025-03-14,2025-03-14 11:42:21,fama_french,0.056702005952449154,0.037794811526154305,1.708761719808207,-0.034515639443307385,0.35462560551005784,0.1346850287340365,1.3272236902953098,0.7015293633224937,-0.6472078738495086,0.002286847872501755,0.3868503371637245,0.12327707156004412,-0.054817873742113686,-0.07521905168114708,0.12525023821117817
GILD,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.4576867681863816,0.06563324733905727,0.13872960533452128,0.07851275234305495,0.5404484510375472,-0.18047066138164314,0.3203656958867545,0.07891234511113246,0.16552394186988073,0.07404439968347712,-0.054817873742113686,-0.07521905168114708,0.455475779824071
GOOG,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1257258853955538,0.10412347314776971,0.5498116289670316,0.15710207579334973,1.0205788134970692,-0.07594243638747067,-0.6109380580805546,0.05225488685834008,0.6340637028126104,0.19484956936575581,-0.054817873742113686,-0.07521905168114708,0.7299199413557559
GOOGL,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1318171743301524,0.10208809365193239,0.5517062581391106,0.15781866598092772,1.0264465168976553,-0.07781081916959717,-0.6133775276606557,0.04991349814487493,0.6362038929566061,0.19582577190878867,-0.054817873742113686,-0.07521905168114708,0.7231870623948227
HAS,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.9550763854656217,-0.15194020687298085,0.28090098953432063,0.13702656164883106,0.9873062766637108,0.2378728123408333,0.33063516834240486,-0.11143558998453058,0.31269208905408385,0.10290839841736334,-0.054817873742113686,-0.07521905168114708,-0.10290055299311449
HOLX,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.7444902666480981,-0.0022999994585545993,0.2898498109530545,0.11225283181841068,0.7474887889225948,0.05560268725141563,0.05312324544060244,0.005306324055948071,0.2917713306648413,0.1055616821389354,-0.054817873742113686,-0.07521905168114708,0.2889069554477933
HON,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.9357895574476128,-0.030626685421852335,0.5239686819220506,0.13475762450669226,1.0487228805909259,0.006163974185731835,0.6058030843723621,0.01643711080515283,0.6276923644619958,0.10213747432065327,-0.054817873742113686,-0.07521905168114708,0.2879368087585103
HSIC,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.7600330545551357,-0.06310910095138057,0.29278286064955494,0.11408131334693028,0.8694265379099217,0.08388643493574344,0.6388693721269112,-0.008586571277302411,0.40109559896536606,0.07429693519269642,-0.054817873742113686,-0.07521905168114708,0.08772137493222822
IDXX,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0347515816833837,0.002561705933462519,0.40606643886654503,0.14639969505557257,0.888545577099076,0.2358380986047669,-0.6213931088300864,-0.030411592468179628,0.46313364211293373,0.16301221492818432,-0.054817873742113686,-0.07521905168114708,0.35856829101988386
ILMN,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0923267285954201,-0.2273394439531735,0.27112210190305974,0.15317293890732667,0.8921427465675664,0.7134928932746596,-0.5898587280506299,-0.2277010949597118,0.32103605901767784,0.13487938597111157,-0.054817873742113686,-0.07521905168114708,-0.22070538433201828
INCY,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.6137702112104801,-0.09301099964482751,0.17232805654827188,0.09687468935102769,0.5750976486316204,0.13380403410081254,-0.11664577523819461,-0.09354319883875724,0.17602122051966895,0.09376431147163758,-0.054817873742113686,-0.07521905168114708,-0.06592152798711107
INTC,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.2693943708294106,-0.2773168773459156,0.38856930631440667,0.17400349485776662,1.2222337512245578,0.11028350395038242,-0.1775822513562682,-0.28403016447517104,0.3916215059839354,0.17576749607962805,-0.054817873742113686,-0.07521905168114708,-0.2944131828022278
INTU,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.3650760368039436,0.06484578084843409,0.5998480946427251,0.1852596581599242,1.2337272093839475,0.08167506420735329,-0.645232394593909,0.020294516525714817,0.6573516076686381,0.21386406130317992,-0.054817873742113686,-0.07521905168114708,0.5991751591935636
ISRG,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.2109424104676463,0.09133745797756264,0.5287613698368927,0.1671271010945311,1.1641465096424237,0.017450862150350688,-0.2376599173768487,0.07412955375985575,0.5378055582033021,0.17854188159232817,-0.054817873742113686,-0.07521905168114708,0.6576707969565833
JBHT,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8962348835248334,0.0026767444102813722,0.37061687808755217,0.13010434151351252,0.927297994426026,0.20557817956251617,0.30284299985529495,0.038999469586185456,0.40896103850416554,0.09970973980900856,-0.054817873742113686,-0.07521905168114708,0.34401668789355405
JD,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.9632676394929474,0.008380098203371687,0.1355449844180907,0.13799019550743857,0.739216935339491,0.6352279563762929,-0.7693038341575301,-0.01075237060832386,0.17435671340021985,0.13467692658724031,-0.054817873742113686,-0.07521905168114708,0.21789875843723344
KDP,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.5042475009633182,-0.012773423808059747,0.20396920349378045,0.08399024070268296,0.5484834575094905,-0.03247718815110048,0.2139820942064271,0.001660730302620797,0.21949857368606018,0.07487903840121396,-0.054817873742113686,-0.07521905168114708,0.19529848717686993
KHC,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.6166449990579195,-0.01678980915074079,0.2013398493641262,0.09721288456471103,0.799107426269533,-0.40590354676064216,0.700940212637116,0.01156612088259588,0.30432873352640666,0.08820480402238016,-0.054817873742113686,-0.07521905168114708,0.19005018806956345
KLAC,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.6052896731217507,0.1562446436293958,0.5462670095036528,0.21351882244452192,1.4127309366942682,0.3763181289883125,-0.7744970251425521,0.12035205914732656,0.5957189124460098,0.2284938383863556,-0.054817873742113686,-0.07521905168114708,0.7443092122902689
LBTYA,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8452018239429853,-0.16062828595655562,0.22215582021338687,0.12410072058351206,0.8355630377826907,0.32781555855921934,0.16765775966512417,-0.12699701368532773,0.24626832138383836,0.0923855868520936,-0.054817873742113686,-0.07521905168114708,-0.15987011584552802
LBTYK,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8322764747429726,-0.1448461076674543,0.21796665535558324,0.12258015925286508,0.8140410520293342,0.3657319018786238,0.14718832175812274,-0.11039605086068767,0.2446988657789,0.08931490012022124,-0.054817873742113686,-0.07521905168114708,-0.12333802594752087
LCID,2025-03-14,2025-03-14 11:42:21,fama_french,0.12060235229953085,0.028077025999502042,1.7769702028328023,-0.11358989549132516,0.10607177927087019,0.24238381242731247,0.9951888698543669,2.1215564118851855,-1.1594456205065677,0.0019916251138114667,0.18490565631598932,0.11901233321311969,-0.054817873742113686,-0.07521905168114708,0.11167618354663737
LIN,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.913368981628344,0.05367013495970834,0.5593432335612301,0.1321200276360727,0.9937691839620502,-0.1265234380071918,0.34382597115607116,0.07216555700021299,0.5902827138806677,0.122651934422858,-0.054817873742113686,-0.07521905168114708,0.6180319145273657
LRCX,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.6351804343700445,0.18291337936972682,0.3778316006253325,0.217035225366751,1.4227683497584978,0.45084595049189347,-0.8304799920191279,0.14741683492376162,0.41606724018142127,0.2298001866843217,-0.054817873742113686,-0.07521905168114708,0.6608529161353347
LULU,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.169316308611839,0.024158920311179527,0.363075116876718,0.16223013159312294,0.9775272399796056,0.5557117704228749,-0.6505448136579505,0.0091518091121672,0.41457816153936866,0.15813814685095567,-0.054817873742113686,-0.07521905168114708,0.3903871322477117
MAR,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0858650215521888,0.055509517304193734,0.3408629585558285,0.1524127720671227,1.0628795378424931,0.678783279015301,0.33102833830782974,0.12390469423983953,0.43433073594209537,0.0875996246416695,-0.054817873742113686,-0.07521905168114708,0.4615634740867108
MAT,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.9664837271473188,-0.008407477108207126,0.2913323178891295,0.13836854184435637,0.9619440246444337,0.4478067559709781,0.2749898481044606,0.041075241356523226,0.3421838970133455,0.09260219326963279,-0.054817873742113686,-0.07521905168114708,0.2754608401618309
MCHP,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.557805197924349,-0.07672893089600351,0.5414504628936447,0.2079326633648768,1.3903214652873321,0.643792287003115,-0.46220514796629053,-0.07165971265060567,0.5777386545804045,0.18770488438652078,-0.054817873742113686,-0.07521905168114708,0.23573382712016575
MDB,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.5127138203436183,0.13530004378981675,0.2282144092663535,0.20262803259367929,0.9223884533734723,1.356837305265124,-2.238636209817197,0.048559437538030735,0.42775854128396196,0.22719025118975517,-0.054817873742113686,-0.07521905168114708,0.46343055017096424
MDLZ,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.6585999976754988,-0.037443137660243785,0.40620817866314984,0.10214854607280982,0.7998381359764761,-0.4235558321389328,0.46951251411759665,-0.028033047486116947,0.5043803818424646,0.10666619879325724,-0.054817873742113686,-0.07521905168114708,0.18149628341791726
MELI,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.452602434204621,0.15868144918915858,0.3293118598664423,0.19555642099695292,1.0834770386088015,0.8475493563262667,-1.4003808795139352,0.10434360566736896,0.45146938758453925,0.2110063136021867,-0.054817873742113686,-0.07521905168114708,0.6099151020459959
META,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.307404524600877,0.1323946954879565,0.3862027050874539,0.17847507772198665,1.1052133564251378,0.05311958857603563,-1.0417431819244811,0.05548975678842216,0.49680882274371196,0.23013597632618424,-0.054817873742113686,-0.07521905168114708,0.6372863685289948
MNST,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.8092535800664657,0.01647388358919414,0.41504397744857113,0.11987170450839907,0.831901774581821,-0.11142361050170564,0.046223512402679454,0.01299455044516825,0.41773483735533146,0.1251671954959497,-0.054817873742113686,-0.07521905168114708,0.41647521461114456
MRNA,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.6063159591364425,0.32266584596426384,0.029998732781288284,0.09599775772796057,0.3332655922140039,0.7582663425921197,-0.9481626766389112,0.29752769062976453,0.062349262731680954,0.09362897013182664,-0.054817873742113686,-0.07521905168114708,0.5272409767926342
MRVL,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.6312774825400045,0.21856688688786688,0.4010119731932369,0.2165760750926423,1.2896191263770178,0.7795052175685708,-1.2995020668589734,0.16770171039718956,0.5024013555768895,0.23139926601050761,-0.054817873742113686,-0.07521905168114708,0.7464537396165956
MSFT,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1724831806248959,0.08818026196892004,0.6720686174268087,0.16260268811346495,1.0879502806400183,-0.2652670956887101,-0.627596512566572,0.02306516521627021,0.8061567331903425,0.2144066783703357,-0.054817873742113686,-0.07521905168114708,0.740616584192996
MSTR,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.7223700782630627,0.8087308967423874,0.1579283628072915,0.22729237191536983,1.1325094858948554,2.1665326991448537,-1.6952084013336068,0.8150219375120267,0.2614440668635324,0.16664736314910764,-0.054817873742113686,-0.07521905168114708,1.0931349404170103
MTCH,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.1972293400940393,-0.23265762102850618,0.2674996408066088,0.16551387082803068,0.962056533792657,0.7990414100543318,-0.7191174800395452,-0.23757241390725234,0.3227959699935885,0.14813730261909153,-0.054817873742113686,-0.07521905168114708,-0.18580504836849304
MU,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.4402404183505935,0.008265498943852987,0.42506159804154275,0.19410213121447953,1.2687734954709156,0.586594712854028,-0.5216400294158625,0.005141333733176897,0.45742633325516835,0.18101184738829526,-0.054817873742113686,-0.07521905168114708,0.37682574424759946
NCLH,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.9465258105531853,-0.10608271455667215,0.2777122410183709,0.25366245548439864,1.833348538339022,1.6497263197728689,0.4991854346433763,0.03662017117996197,0.3905636615382656,0.11236533347898212,-0.054817873742113686,-0.07521905168114708,0.1558805788941547
NFLX,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0233055141487581,0.16394440593963264,0.23015896812975867,0.14505315908104677,0.7761984111681132,0.19420996433857043,-1.186784378703864,0.08477994268424839,0.36018081499744614,0.19460565318945586,-0.054817873742113686,-0.07521905168114708,0.6244465599688505
NTAP,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0570992551916518,0.06690103894484274,0.390888079482525,0.14902871556718575,1.039222378943304,0.2771892722535828,0.089943896791082,0.09134584415386153,0.40648039185007556,0.12496522653732343,-0.054817873742113686,-0.07521905168114708,0.5299098227954494
NTES,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,0.7472025125479326,0.07019705960118386,0.11887060538134941,0.1125719053049893,0.5441401089610229,0.5402786930268275,-0.7209174962004969,0.048792874987290805,0.16613788390322537,0.11329308009297896,-0.054817873742113686,-0.07521905168114708,0.3417401713803376
NVDA,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.7568109550551572,0.5425090448186015,0.4843941446980309,0.2313440586151446,1.4104392899755496,0.24521952681457382,-1.6815659580549052,0.4284471590484236,0.6726604222779217,0.30363965650886293,-0.054817873742113686,-0.07521905168114708,1.3903679117292436
NXPI,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.4774566577261519,0.008539400269103749,0.5224287099234367,0.19848031656103243,1.2663416009507729,0.8617913933217847,-0.5490200475103005,0.020694870964962787,0.5882902459855862,0.1676995570542795,-0.054817873742113686,-0.07521905168114708,0.4178994784877496
ODFL,2025-03-14,2025-03-14 11:42:21,fama_french,0.11764179884946373,0.024669657624011514,1.0254852609738316,0.1266698294448703,0.3776910591521724,0.14530958841858482,0.9661144578493962,0.3015799100933961,-0.11483180569515705,0.1368788168933796,0.3888528176744507,0.13043067043245454,-0.054817873742113686,-0.07521905168114708,0.6943002760386318
OKTA,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.1639214636662831,-0.08137333451597405,0.19880054684449,0.1615954723292138,0.6926039723795974,1.1196402684710869,-1.7630569044454962,-0.14646078559329845,0.3828643906320478,0.17738800436368632,-0.054817873742113686,-0.07521905168114708,0.09969094565589633
ON,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.7515381116190372,0.11810665435606763,0.4330256492530846,0.23072375182826782,1.4876983047402537,1.1675226588216274,-0.6256695911437595,0.1436751940104543,0.5007119510306596,0.1827463259481764,-0.054817873742113686,-0.07521905168114708,0.5705120187521687
ORLY,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.7531687063188104,0.12440686867657426,0.3387053604314968,0.11327377907247983,0.8476552563055965,-0.22741244658791332,0.35147185608174225,0.13711639185499452,0.36861409999291483,0.11041823385736524,-0.054817873742113686,-0.07521905168114708,0.7710595689272033
PANW,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.0325920534585968,0.25403682388456783,0.27534831691058803,0.14614564427054244,0.8327491154201451,0.3507447488637438,-0.8303911070638266,0.21222192889432664,0.3444851297430135,0.1658699117912139,-0.054817873742113686,-0.07521905168114708,0.8939317123231972
PAYX,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.057408780885622,0.02329137947389577,0.586453881991776,0.14906512872661454,1.144888408534546,-0.13094030171146698,0.37859278489883175,0.04418632966491148,0.6159158469052768,0.1380568681594741,-0.054817873742113686,-0.07521905168114708,0.5010522326000928
PCAR,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.8298042815686923,0.08725525899638768,0.41027688079433366,0.12228932600073938,0.897286284278242,0.12894829188301649,0.445679321757719,0.12974076527440498,0.4823035469332463,0.0896357830692383,-0.054817873742113686,-0.07521905168114708,0.6685101718749612
PDD,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.9580109104268465,0.2970842428475316,0.07561641022144816,0.13737178444403822,0.555064610388144,1.0084571275144822,-1.4730702321960742,0.2473134698289246,0.14935202955672267,0.14548992730284183,-0.054817873742113686,-0.07521905168114708,0.5510134930456027
PEP,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.6562768044900739,-0.02647509744342031,0.40405758667542047,0.10187524144740162,0.8116131172333209,-0.5240804813957897,0.4774648354939057,-0.02280427347824352,0.5250184281718878,0.11296381022807414,-0.054817873742113686,-0.07521905168114708,0.23018168045903353
PLTR,2025-03-14,2025-03-14 11:42:22,fama_french,0.11826995683666358,0.02828081458372723,1.9294733167502294,0.4875999208160535,0.1970267548490675,0.256479540473271,0.9622049436678553,1.7515501052243323,-1.7582391070580365,0.5857708506872061,0.3171490295190955,0.17831757747978777,-0.054817873742113686,-0.07521905168114708,0.9985638048866278
PTON,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.101413970965063,-0.018074870921576596,0.07332095387282234,0.15424197844627255,0.5383202648615907,1.812991188886945,-1.788798569059561,-0.04133411181437869,0.17446384348875055,0.12316603186473275,-0.054817873742113686,-0.07521905168114708,0.12840902809837157
PYPL,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.3364375575286425,-0.13233578773106017,0.40490035838416427,0.18189057594166466,1.114946234890487,0.5346615225666542,-0.8228556890391026,-0.16194877342731143,0.46721308334778133,0.18841935507809812,-0.054817873742113686,-0.07521905168114708,0.05550504829253225
QCOM,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.3598660568052483,0.036472011666243885,0.48116404357948683,0.18464674674090795,1.1690292535904068,0.3639233523121245,-0.7736037872746426,-0.00013495463981314177,0.5416513515797924,0.20043660080092252,-0.054817873742113686,-0.07521905168114708,0.46942654763089336
QRTEA,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.486747074911552,-0.1597332880944236,0.08770093250285071,0.19957325795078487,1.259069147917413,1.755626593623056,-0.040098756050783,-0.05188810739732097,0.13716292090516524,0.07956529051708527,-0.054817873742113686,-0.07521905168114708,0.014155547925457954
REGN,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.5779980056660139,0.08143382562655005,0.1597318843115435,0.09266638274196391,0.5823063640764049,-0.19370642751135408,-0.10645982455273305,0.060991662408039375,0.1732658360377347,0.11179960730680173,-0.054817873742113686,-0.07521905168114708,0.4840341649060125
RIVN,2025-03-14,2025-03-14 11:42:22,fama_french,0.05384287493553269,0.03822228713441531,2.1871719926509168,-0.4558840501395183,0.2140407978337312,0.15598591519721844,1.3224947678538126,2.037275435753366,-1.339678359252193,-0.3123440001224862,0.2957751821976162,0.09851943564853186,-0.054817873742113686,-0.07521905168114708,-0.4101292894511754
ROP,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.8818373355450373,-0.018914120741444856,0.5400287611043331,0.12841058807014782,0.9584358210959036,-0.231174054431564,0.2536549106580629,-0.013978626357878512,0.5614352750172406,0.1310145599938128,-0.054817873742113686,-0.07521905168114708,0.3311465607216247
ROST,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.086738027496066,-0.01870269100722396,0.3773167820936364,0.15251547405676671,1.0983959545218782,0.3652622548076165,0.3061400301425149,0.027964178707687946,0.4219536640602113,0.1108364706471776,-0.054817873742113686,-0.07521905168114708,0.28899593560308295
SBAC,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.8020524068393204,-0.09017268544487828,0.2924526631288311,0.1190245455361311,0.8530308304654957,-0.1289204743629881,0.18547148369506047,-0.08402920332781566,0.29893627940646506,0.11813789616299024,-0.054817873742113686,-0.07521905168114708,0.013209830647255226
SBUX,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.0538316866957818,-0.06615197860202683,0.4295965703942968,0.14864431293146776,1.0755783873593248,0.04267151306234577,0.14437037106117948,-0.05233258449263785,0.4345338321963843,0.13800406989905392,-0.054817873742113686,-0.07521905168114708,0.16847074413196372
SIRI,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.8490882779745605,-0.16197043665414684,0.09363699884903842,0.1245579300269323,0.8392256047459131,0.31277750022670264,0.1564181193899991,-0.13015535175865095,0.10268380060773685,0.09448624728378427,-0.054817873742113686,-0.07521905168114708,-0.104810525443077
SMCI,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.4203551252885418,0.6120792009347137,0.15633487352884246,0.19176278956801102,1.1811599939128665,0.7582423704042427,-0.7678051223381569,0.6008352405841162,0.1796795121515472,0.17981178268840525,-0.054817873742113686,-0.07521905168114708,1.016088803538116
SNPS,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.2335469463682012,0.14305866540560747,0.5187868510007363,0.16978633936002965,1.0198365636200353,0.2040805233460924,-1.0022592333732883,0.07873470664812611,0.659715678551813,0.20884679421172966,-0.054817873742113686,-0.07521905168114708,0.7882478133703287
SRCL,2025-03-14,2025-03-14 11:42:22,fama_french,0.11616023367432597,0.024072949858049458,0.9562028656184481,-0.07308797781489593,0.32594541707873315,0.1351456981683485,1.0323258147503538,0.21179893671293618,0.5497740213858366,-0.02575965370409111,0.3970891129888454,0.09102430982847251,-0.054817873742113686,-0.07521905168114708,0.10524102811499149
STX,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.0651489303978332,0.035294108053392,0.35015300432970486,0.14997569383859485,1.0111540754040185,0.29649611016553923,-0.08958633511112764,0.047126906104668326,0.3595187886345783,0.13410895480707266,-0.054817873742113686,-0.07521905168114708,0.41795707014850975
SWKS,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.4287904558623117,-0.14303418282399652,0.5006345031590402,0.19275513703059918,1.2485880039821415,0.5446585847739227,-0.5961983107965281,-0.15455257817243476,0.5424706468419028,0.18654424245365345,-0.054817873742113686,-0.07521905168114708,0.05811512937483481
TCOM,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.8773858725621081,0.1236350096017128,0.13662438378261033,0.12788690995732424,0.745319931069495,0.7084602351640727,-0.23030242612997193,0.15065749361362563,0.16723043906746993,0.09083728140421683,-0.054817873742113686,-0.07521905168114708,0.4476965389847002
TEAM,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.1709641194228864,0.13435088294569458,0.20070105029313778,0.16242398302109815,0.7368669293137696,0.9855020179433914,-1.6543717598730088,0.06916118305675638,0.3600988292872769,0.18177315841466302,-0.054817873742113686,-0.07521905168114708,0.48768033289146945
TMUS,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.7289531217916922,0.13857436914506108,0.3176893134484179,0.11042501414851842,0.7813307257227917,-0.18836397491056983,0.1532122527226957,0.13847630944749,0.3267283917476016,0.11538804193287457,-0.054817873742113686,-0.07521905168114708,0.8125604506227727
TRIP,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.200133892000685,-0.14187464113867085,0.19844432737094708,0.16585556753918013,1.0426331241305196,1.317193112219349,0.040876167279247866,-0.05549447194002522,0.2998715633124017,0.07204650162803503,-0.054817873742113686,-0.07521905168114708,-0.001197585608049187
TSCO,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.7806979057787946,0.2079602183801839,0.17883888338811094,0.11651236361783805,0.720376333497581,0.3695797078252311,-0.07446713475212682,0.22557588969802345,0.19319218744276334,0.09475779884150452,-0.054817873742113686,-0.07521905168114708,0.7607657940526323
TSLA,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.5779480719936012,0.5521690659498272,0.25129874989004053,0.21030230730438185,1.093749699814162,1.2135049536464997,-1.7689732154061417,0.4925569161278862,0.38164500354272357,0.21987906617898664,-0.054817873742113686,-0.07521905168114708,1.098017520358462
TTD,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.7565618011361384,0.2969614823579986,0.2997111911220419,0.23131474769992083,1.205237648063387,1.5153180455522346,-1.9249661235016018,0.24440178300924134,0.45712293516666413,0.22818359561118073,-0.054817873742113686,-0.07521905168114708,0.7352695608722205
TTWO,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.7437953998475015,0.03047521815863024,0.21212456408075042,0.11217108643802774,0.6172701883531152,0.11061751113335086,-0.6001969464003127,-0.008777458095354195,0.2695073942938354,0.13636886132919618,-0.054817873742113686,-0.07521905168114708,0.3422198482893269
TXN,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.1454728568125572,-0.0077855464592376045,0.6079588463328602,0.15942514503267494,1.0751625835179708,0.22009166555624926,-0.22755670232997405,-0.011410569844460348,0.6200035253577572,0.15620536022349815,-0.054817873742113686,-0.07521905168114708,0.40487443812189305
UAL,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.4901805088195843,0.009539701131533535,0.2655881327157046,0.19997717329195658,1.4762523950133408,1.2266034969305017,0.745278791090164,0.14446663228446846,0.410800859182583,0.0750396853989648,-0.054817873742113686,-0.07521905168114708,0.29946462124439455
ULTA,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.1203554640191726,0.03703426821734545,0.333060076473665,0.15647028976205263,1.1107190362651074,0.5305438862716838,0.3031116419232229,0.09391163703441979,0.39084846304113485,0.10345358503530974,-0.054817873742113686,-0.07521905168114708,0.4074129507855215
VOD,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.780713993957194,-0.16019623647293574,0.28640870304110755,0.11651425626008517,0.8718181920326928,0.0914308612284367,0.5464682854363013,-0.11231606276145067,0.3623421983524412,0.08111504639313055,-0.054817873742113686,-0.07521905168114708,-0.21949125368030073
VRSK,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.834007247608471,0.03943402261964301,0.45112867455531214,0.12278377048616215,0.8868731525478266,-0.27520894611581354,0.09779332586147901,0.029578629160930445,0.46793862099713646,0.13673345866986367,-0.054817873742113686,-0.07521905168114708,0.5189222009813452
VRSN,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.9401075514769353,-0.08762337366640491,0.5137637076585664,0.135265601091723,0.9306733410793243,-0.17369915933171134,-0.16631062900138982,-0.1114125426186894,0.5346541771351683,0.15618728999316042,-0.054817873742113686,-0.07521905168114708,0.08205043766533825
VRTX,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.7220006761990889,0.061608334605487716,0.23559284958616633,0.10960711594260153,0.7513498659611645,-0.23607754910452725,-0.0013553824192360057,0.046586631124406315,0.2460371040773307,0.1261030272813862,-0.054817873742113686,-0.07521905168114708,0.4615130177688288
WBA,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.7783980467896701,-0.3526635584700823,0.17299029026668333,0.11624180406925733,0.8886338444296918,0.1774099695879398,0.7058394367649259,-0.2870717283228916,0.25638305714721144,0.06639233121515833,-0.054817873742113686,-0.07521905168114708,-0.6535350214059079
WBD,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.0361158400591524,-0.22095360500009747,0.16522127938712972,0.14656018886499345,0.9910711296105894,0.9381785686647505,0.3868015218883498,-0.13187068407716993,0.25225103785135805,0.060737250109283915,-0.054817873742113686,-0.07521905168114708,-0.18205542659214297
WDAY,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.15521802757837,0.011642634885109573,0.3667792493254143,0.1605715844516604,0.9226230277290436,0.5086535015633323,-0.8993895135265388,-0.025510321481900963,0.4544670916190613,0.17297661313824655,-0.054817873742113686,-0.07521905168114708,0.3623504290443379
WDC,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.2052269198342203,3.8688233017265423,0.007932007718184031,0.1664547204951076,1.0803704764640698,0.3326048455504679,-0.4429979819553929,3.855709018229662,0.008390144844834357,0.16685558156904273,-0.054817873742113686,-0.07521905168114708,1.3883537831211323
WYNN,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.3796976707569597,-0.13952582356991455,0.2981186048378639,0.18697977348027542,1.3333201379025095,0.9129696636554325,0.3628586390325784,-0.053880491576884265,0.3805425206117976,0.10418289861409205,-0.054817873742113686,-0.07521905168114708,0.042238968548466024
XEL,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.6312385342613008,-0.020981626229630984,0.2772288561172971,0.09892969429760978,0.816040536015355,-0.4767088608546414,0.6661004594862054,0.00021601404424357804,0.40659101488455085,0.09669885547408634,-0.054817873742113686,-0.07521905168114708,0.20818245476791414
XRAY,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.870587114022615,-0.26601490597941585,0.25185501070791905,0.12708709177279512,0.912553665343593,0.4973302872780834,0.5558516910140395,-0.19176379545876454,0.3673531300996241,0.06295088639212616,-0.054817873742113686,-0.07521905168114708,-0.4417807654259915
ZM,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,0.6057016878489836,0.10282883064867283,0.050687043325365555,0.09592549374872231,0.06185783132935905,1.2536685220701465,-2.0599188160662023,0.023338534220558135,0.2849445916511891,0.11816842130187145,-0.054817873742113686,-0.07521905168114708,0.3031219374855344
ZS,2025-03-14,2025-03-14 11:42:22,fama_french,0.11764179884946373,0.024669657624011514,1.1925510823367214,0.27696592611997006,0.18828133720804785,0.16496351216997834,0.6886850689597988,0.9534848885771887,-2.04747577756945,0.17946629247711582,0.4038084717450282,0.20742898006906482,-0.054817873742113686,-0.07521905168114708,0.7112140438440664



================================================
File: results/fundamental_analysis_fama_french_20250314_132442.csv
================================================
ticker,date,analysis_date,model,market_premium,risk_free_rate,beta,alpha,r_squared,expected_return_capm,market_beta,smb_beta,hml_beta,ff_alpha,ff_r_squared,expected_return_ff,smb_premium,hml_premium,sharpe_ratio
AAPL,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.173429591375118,0.13683101499265832,0.6247478939632422,0.16271402557657158,1.0777613412571283,-0.13632974029572897,-0.6007823454646999,0.0819291385329089,0.7185122330475877,0.20412298687654973,-0.05481780355501972,-0.07521900361344092,0.8673579510135683
ABNB,2025-03-14,2025-03-14 13:24:41,fama_french,0.101824941907154,0.029629420407851954,1.5780735699444446,-0.09359687776257358,0.27959944699088224,0.19031666999266014,1.0344075621890498,1.0264970661527977,-0.9273989919209206,-0.01950471318405269,0.35811803199095893,0.1484456239383058,-0.05481780355501972,-0.07521900361344092,0.13692865701037668
ADBE,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.2577885429020959,-0.03866312466473824,0.476603504822359,0.17263816438325996,1.079625432494374,-0.01042760652258152,-0.9561839158040607,-0.11299153315815018,0.6067825920200082,0.22417355549016357,-0.05481780355501972,-0.07521900361344092,0.2810474701287985
ADI,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.2681952929822238,0.02136183708278029,0.5836201436126782,0.17386243318286299,1.1646635433746961,0.3687753064301956,-0.3052197324157177,0.021148245052787288,0.6049335196318139,0.16442564377263985,-0.05481780355501972,-0.07521900361344092,0.48129308412541083
ADP,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.979664697444618,0.028689438224574246,0.571517969281667,0.139919174900712,1.0615870964303062,-0.10944924392245435,0.363343691952813,0.04976749843488759,0.6026692331415384,0.1282260899581188,-0.05481780355501972,-0.07521900361344092,0.5203349354688677
ADSK,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.3366077877937683,-0.012257228356086974,0.528604257872078,0.18191060213627272,1.1528125701020908,0.4502338746530732,-0.6784253820244218,-0.0360773724853767,0.58422431009443,0.1866382512744925,-0.05481780355501972,-0.07521900361344092,0.36944323687569974
AEP,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.5766782018911927,-0.02840151849992262,0.246002214805904,0.09251111865176563,0.7553936776831661,-0.40475270672194724,0.6817472419793924,-0.0014515777373940364,0.3827111674629088,0.08444283481371609,-0.05481780355501972,-0.07521900361344092,0.15890567173908252
ALGN,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.5329812292812361,-0.12348597826704208,0.3639454612918377,0.20501232703911831,1.346346328339739,0.9175910915444679,-0.3813159911718048,-0.09488387481618936,0.40854143300070256,0.16143814228196318,-0.05481780355501972,-0.07521900361344092,0.10481659578339801
AMAT,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.6347963241453836,0.09654490604857509,0.5573533929965695,0.21699003794896543,1.439566882965523,0.46913049911026394,-0.7267199042518487,0.0701979337241972,0.6019856069644691,0.22296933886217554,-0.05481780355501972,-0.07521900361344092,0.6179654278309739
AMD,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.5596656851146669,0.11250851884842855,0.4025210737722843,0.20815153442468218,1.2519036698983026,0.4104118425857779,-1.365500466491146,0.03323617184661397,0.5248023812579052,0.252159566096725,-0.05481780355501972,-0.07521900361344092,0.5640369630122888
AMGN,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.6360957854161451,-0.01932646260344548,0.26844646030144315,0.0995011100609293,0.7305093603408297,-0.2672734617260786,0.32445272318502,-0.011217362526216152,0.29975741136264633,0.1008544264136033,-0.05481780355501972,-0.07521900361344092,0.211790025399275
AMZN,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.0808961725228943,0.08274703655062697,0.4113984696552666,0.1518282277291051,0.8526602470058126,0.09767562096551427,-1.1507386833541755,0.0002599148550401308,0.6168592852811372,0.2061811970683452,-0.05481780355501972,-0.07521900361344092,0.583496893197707
ANSS,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.2685930777596535,-0.05678443725311877,0.5661663537821977,0.17390922929963476,1.1119277811662185,0.15685370859520764,-0.729888199726235,-0.10310764944908586,0.6428820569760954,0.20178192933906547,-0.05481780355501972,-0.07521900361344092,0.2568904014928737
ASML,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.43183354246003,0.07799325558326307,0.4944542484257659,0.19311313121200943,1.2087475866716066,0.4237782038418754,-0.9054334289941798,0.035011520431661176,0.5712468648062827,0.21174410811314778,-0.05481780355501972,-0.07521900361344092,0.5669478497187737
AVGO,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.3861671258107333,0.32719429970722075,0.49881366648615866,0.18774085181037709,1.2187878203721274,0.2587591203970505,-0.7188878722219838,0.288157807853973,0.5512524731147772,0.2079394720567347,-0.05481780355501972,-0.07521900361344092,1.1701783444280243
BIIB,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.8161682325573728,-0.1555424771877046,0.13923144706213852,0.1206851566658483,0.7642267947338046,0.11975240243391826,-0.19672766791217192,-0.16313251446885552,0.14246396323875143,0.12280776797714142,-0.05481780355501972,-0.07521900361344092,-0.1274881943524359
BKNG,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.1358199907136077,0.0890692643070594,0.42232124199934296,0.15828956450074153,1.1394440315864744,0.29458656312491927,0.2161197411977338,0.1243346098280026,0.44880206596894534,0.12631100324671107,-0.05481780355501972,-0.07521900361344092,0.5968678769571854
CCEP,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.8782322207040594,0.033703762307558796,0.34685467359657607,0.1279864758751963,0.9826450656063568,0.003271831774327355,0.5584765722746574,0.07693851677612772,0.4128828591615633,0.09808238483307292,-0.05481780355501972,-0.07521900361344092,0.4304446995112722
CDNS,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.260764544578722,0.1847525292257732,0.5271935205220858,0.17298826657387725,1.0638402730505268,0.1372488293643085,-0.9574778440017704,0.11965580428396291,0.6563684385389039,0.21431859107568985,-0.05481780355501972,-0.07521900361344092,0.8985767932188838
CHTR,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.8011049064995897,-0.12859894992104057,0.23818502086116577,0.11891307989175469,0.805656802052829,0.08243907753961477,0.07932865671933689,-0.11727788883999989,0.24120466753702174,0.10896242139856778,-0.05481780355501972,-0.07521900361344092,-0.09804638969320502
CMCSA,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.841965303679588,-0.096391887918173,0.39331397349250385,0.12371997051771323,0.9169176298105153,-0.02657067387485856,0.3815792360312301,-0.06867193525555025,0.4292803940300217,0.10529203303865656,-0.05481780355501972,-0.07521900361344092,0.009276134850737092
COST,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.7249271713454107,0.16738630619716638,0.4105445883063654,0.10995139409593906,0.7149713791864027,-0.24780189766538524,-0.21859747679752042,0.13488629089975734,0.46325116298705127,0.1388068169412859,-0.05481780355501972,-0.07521900361344092,1.046172394452179
CPRT,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.047968255212501,0.08171557219111568,0.5338332818068532,0.147954528304344,0.986722195154324,0.20255904864632335,-0.1909781862482514,0.07980088979174572,0.5435153532058028,0.14401077837116755,-0.05481780355501972,-0.07521900361344092,0.6695401840262563
CRWD,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.1891254233453923,0.3781400393651245,0.214673047395606,0.16456051148399353,0.7496184763601845,0.921910694683054,-1.725681595352154,0.30343799277296907,0.39173339882573266,0.19212305443385258,-0.05481780355501972,-0.07521900361344092,0.9455487145273815
CSCO,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.8994636053318625,-0.022903354025747967,0.49487612644678536,0.13048417415487593,0.9761329983834066,-0.18478473841816062,0.2850255225894544,-0.012619640545027894,0.5150369866772803,0.12819385714714954,-0.05481780355501972,-0.07521900361344092,0.3037699522844444
CSGP,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.015345588293023,-0.05168543454852027,0.36987894171666047,0.1441167390846697,0.9088528772665174,0.34297001994066834,-0.3382355031824217,-0.056073321417648724,0.3913543373284235,0.13822961935285932,-0.05481780355501972,-0.07521900361344092,0.19013716842401143
CSX,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.0071631627637556,-0.03185492633294792,0.5384942212233182,0.14315414382645494,1.1147084784925108,0.0002077798382510293,0.5731186727285269,0.01231432242398068,0.6202269768268553,0.11268516267736575,-0.05481780355501972,-0.07521900361344092,0.2956813624393854
CTAS,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.095539027721745,0.11843290738078058,0.5619529283662672,0.1535508395549901,1.1674144471572108,-0.05691976333209176,0.34491004362368494,0.14140997241335848,0.5853296387484715,0.13918281977753283,-0.05481780355501972,-0.07521900361344092,0.7927534239927375
CTSH,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.0764152238128157,-0.04315136687463498,0.5308364458858572,0.15130108086229926,1.1049260328475645,0.13614693505156572,0.24285884776793118,-0.015837376938619425,0.5525231418025165,0.12892426723571376,-0.05481780355501972,-0.07521900361344092,0.264697854279806
DASH,2025-03-14,2025-03-14 13:24:41,fama_french,0.10140651975297121,0.02960103039764109,1.8801104015895111,-0.06454347960480351,0.2586238076387478,0.2202564829741945,1.0465063513711732,1.2513082006959548,-1.5396806521250406,0.014296163787268737,0.36292825379158034,0.18294287479277424,-0.05481780355501972,-0.07521900361344092,0.20787782497215582
DDOG,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.3006395142117375,0.27046024642818034,0.21969391889470147,0.17767922973057296,0.8114683271258571,1.0941890538399148,-1.8751845230077486,0.19512561719028892,0.4007110746087702,0.2012007221430014,-0.05481780355501972,-0.07521900361344092,0.714894060590524
DLTR,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.7285959378671286,-0.07605643942135142,0.15319487986993152,0.11038299438911263,0.7542223044288792,0.14345973715373805,0.23237675800784857,-0.04908796444846465,0.1664536845951835,0.0880544303597923,-0.05481780355501972,-0.07521900361344092,0.02430189535886746
DXCM,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.000620216396213,0.055344965185352084,0.18872948050103255,0.14238441984600167,0.7954226874490842,0.4868993492086446,-0.7679566091596579,0.026943674782437817,0.23356915010794943,0.14931879150455624,-0.05481780355501972,-0.07521900361344092,0.35197657961556855
ENPH,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.598195812550454,0.24181651670814389,0.20631944937319802,0.21268428792612726,1.1385057889720542,1.8483020985092609,-1.214296238080479,0.2650511210289689,0.30989703346727415,0.14862381841276381,-0.05481780355501972,-0.07521900361344092,0.5722754710571956
EXC,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.8626034571399895,-0.018533178402815285,0.4053834901010439,0.12614788001572616,1.037839221894758,-0.26757498383479483,0.7548556831789057,0.022717408916717537,0.5268394067860103,0.10465131114367143,-0.05481780355501972,-0.07521900361344092,0.28680018576389654
FANG,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.2044831341665019,0.16933347650976371,0.19002577263444442,0.16636722021119876,1.3448345539960966,0.7472268149537961,1.2469821070224723,0.312623377456235,0.3601191274116532,0.048120329343828816,-0.05481780355501972,-0.07521900361344092,0.527322635308653
FAST,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.8959259551385352,0.06625341931812023,0.4857059855379411,0.13006799862243273,0.9232576027214465,-0.017672191369188118,0.13381084361259815,0.07544625050344954,0.4903395196558026,0.1241869751952553,-0.05481780355501972,-0.07521900361344092,0.6255039017985533
FTNT,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.1963777985595716,0.23364719888081148,0.31400132815228143,0.16541369395012087,1.0303670441782016,0.17881649032305919,-0.7650057156130743,0.18600612960810595,0.36612019524881534,0.19362453062441523,-0.05481780355501972,-0.07521900361344092,0.8214671909341486
GEHC,2025-03-14,2025-03-14 13:24:41,fama_french,0.16388822170519407,0.049859158437545986,0.9792816549603457,-0.032110413675840846,0.18468111017714994,0.21035188741751648,1.0250418384651332,0.15889983955998416,0.17501862346840744,0.007713424282964298,0.2001906229155228,0.1959761758560065,-0.05481780355501972,-0.07521900361344092,0.4345122215998178
GILD,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.457687645423393,0.065633169929088,0.13873004382054732,0.078512855542795,0.5404500380414674,-0.18047361608088625,0.3203680372185752,0.07891227033715086,0.16552477438871516,0.07404457497148194,-0.05481780355501972,-0.07521900361344092,0.45547572495867283
GOOG,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.1265824754727118,0.1039787265673197,0.5511779567170099,0.1572028465909032,1.0217106613389588,-0.07498800602333976,-0.6088350294009248,0.052332488248841576,0.6348458910053272,0.19477217978726952,-0.05481780355501972,-0.07521900361344092,0.7301348977840035
GOOGL,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.1326877203047534,0.1019268466718003,0.5532289020743777,0.15792107857536095,1.0275937404927984,-0.0768492567714021,-0.6112621744009689,0.04997599949359895,0.6371613630550164,0.19574887290810356,-0.05481780355501972,-0.07521900361344092,0.7234467620235425
HON,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.9398597483070941,-0.03226255965123116,0.5449598210533075,0.13523644908106228,1.0540611560929105,0.010857951056755986,0.6156963130161391,0.015860060357310694,0.6560839451236536,0.10176403590254439,-0.05481780355501972,-0.07521900361344092,0.2881187865498516
IDXX,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.034751581683383,0.002561705933462574,0.40606643886654503,0.1463996950555725,0.8885457774670801,0.23583608790333602,-0.6213944529674769,-0.03041183283349587,0.46313388288584756,0.16301243651059744,-0.05481780355501972,-0.07521900361344092,0.35856829101988374
ILMN,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.0923267285954212,-0.22733944395317346,0.27112210190305974,0.1531729389073268,0.89214264199855,0.7134945669116006,-0.5898590403540078,-0.227701055123618,0.3210362337260513,0.13487932714030898,-0.05481780355501972,-0.07521900361344092,-0.22070538433201817
INTC,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.2693939555713654,-0.2773168337808138,0.38856924898478995,0.17400344600606318,1.222233195105153,0.11028378305217756,-0.17758310834589763,-0.28403017494382266,0.391621476580419,0.17576747902340678,-0.05481780355501972,-0.07521900361344092,-0.29441326955632696
INTU,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.3650761188150762,0.06484582913322558,0.5998480782957152,0.18525966780786135,1.2337273768351416,0.08167586041425055,-0.6452325636769956,0.02029460283231667,0.6573515369223997,0.21386402479208183,-0.05481780355501972,-0.07521900361344092,0.599175269008607
ISRG,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.2109424104676467,0.09133745797756265,0.5287613698368925,0.16712710109453116,1.1641465515425158,0.017451152985806608,-0.23765992934575306,0.07412957232794565,0.5378055464813623,0.17854186127991678,-0.05481780355501972,-0.07521900361344092,0.6576707969565838
KDP,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.5042470050612158,-0.012773313539218558,0.20396876162016353,0.08399018236386759,0.5484832445745647,-0.032477646698393176,0.21398367734371518,0.0016609336842268682,0.21949834009131908,0.07487892741186124,-0.05481780355501972,-0.07521900361344092,0.1952986855816179
KLAC,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.6071305991385116,0.15563900254170954,0.5494168543518846,0.21373539229268243,1.4151196198915759,0.3781152179404831,-0.770379367951377,0.12017720110103522,0.5985376863592656,0.22836659801865591,-0.05481780355501972,-0.07521900361344092,0.7447563642225973
LCID,2025-03-14,2025-03-14 13:24:41,fama_french,0.12060235229953085,0.028077025999502042,1.7769702028328016,-0.11358989549132505,0.10607177927087019,0.24238381242731238,0.9951925421003353,2.1215481727903294,-1.1594384552639192,0.0019911769699380516,0.18490505776429933,0.11901278195528014,-0.05481780355501972,-0.07521900361344092,0.11167618354663729
LRCX,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.6832985479689044,0.136858559466917,0.5345911918198315,0.22269592680776373,1.4859215492298081,0.4604444540106108,-0.7439647563677539,0.10863409816578243,0.5764710093177149,0.2301958756941349,-0.05481780355501972,-0.07521900361344092,0.6814160769649678
LULU,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.169316308611839,0.024158920311179458,0.363075116876718,0.16223013159312294,0.9775273286156134,0.5557128158071198,-0.6505446726570162,0.009151855260613842,0.4145781972817063,0.1581380971002344,-0.05481780355501972,-0.07521900361344092,0.3903871322477114
MCHP,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.563818392353045,-0.08093176181299823,0.5646532548530061,0.2086400663743002,1.397981489162605,0.6504294225620395,-0.44899759931528227,-0.0744256148635847,0.6021869122834704,0.18724875450026418,-0.05481780355501972,-0.07521900361344092,0.23193799606822654
MDB,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.5127138203436195,0.13530004378981708,0.2282144092663534,0.2026280325936794,0.9223873630687845,1.3568415159152205,-2.238642908537033,0.048559118588795046,0.4277596405796782,0.227190383603152,-0.05481780355501972,-0.07521900361344092,0.4634305501709644
MDLZ,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.6585994136772386,-0.037443104096360924,0.40620777767691907,0.10214847737020397,0.7998372386341482,-0.42355414134547253,0.4695127109477193,-0.028032868214598283,0.5043798145256124,0.10666597857757873,-0.05481780355501972,-0.07521900361344092,0.18149619547765275
MELI,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.4526024342046215,0.15868144918915852,0.3293118598664423,0.19555642099695297,1.0834771396023921,0.847550117177662,-1.4003821498274571,0.10434351284904672,0.45146954797833583,0.21100637150069906,-0.05481780355501972,-0.07521900361344092,0.609915102045996
META,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.3074043701339613,0.13239470967575065,0.3862026816215337,0.1784750595502208,1.1052136220904003,0.05312064149717813,-1.0417421294994216,0.055489925027099415,0.4968084508366136,0.2301358243524393,-0.05481780355501972,-0.07521900361344092,0.6372864155908222
MNST,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.8092535800664656,0.01647388358919421,0.415043977448571,0.11987170450839907,0.8319014099220424,-0.11142164794722831,0.04622293321626632,0.012994636807175173,0.41773474535644806,0.12516708298097526,-0.05481780355501972,-0.07521900361344092,0.41647521461114456
MRVL,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.6312776988626894,0.2185669230492221,0.4010119809773809,0.21657610054123208,1.2896204341132491,0.7795024540317753,-1.2995002501587931,0.1677016724458665,0.5024009610435272,0.23139942694271243,-0.05481780355501972,-0.07521900361344092,0.7464537599135221
MSFT,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.1740895268095282,0.08791008408881275,0.674936776634754,0.16279166156820007,1.0900280641736493,-0.2635806641035058,-0.6239593175490641,0.02318180210266872,0.8076443634147308,0.2142850311168891,-0.05481780355501972,-0.07521900361344092,0.7409136255642841
MSTR,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.7223700782630633,0.8087308967423864,0.1579283628072915,0.2272923719153699,1.1325106252377775,2.166529784958981,-1.695206754615393,0.8150217522277434,0.261443847228219,0.16664760364607867,-0.05481780355501972,-0.07521900361344092,1.09313494041701
MTCH,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.197229340094039,-0.23265762102850596,0.2674996408066087,0.16551387082803065,0.9620572137408888,0.7990395369721583,-0.7191161938691186,-0.2375724794845356,0.32279574618210194,0.14813741005928407,-0.05481780355501972,-0.07521900361344092,-0.18580504836849285
NFLX,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.023305514148758,0.16394440593963266,0.23015896812975878,0.14505315908104674,0.7761994079793242,0.1942074836298043,-1.1867828392669393,0.08477990296915176,0.36018053123565885,0.19460574723324425,-0.05481780355501972,-0.07521900361344092,0.6244465599688503
NVDA,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.7568818535779935,0.5424957357697995,0.48444532014942887,0.23135239924490683,1.4105318485822331,0.24529345449853746,-1.6814041708146035,0.4284509860612797,0.6726736688499064,0.30363425962381013,-0.05481780355501972,-0.07521900361344092,1.3903760232038325
NXPI,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.4774561695740915,0.008539393511829628,0.5224286296785381,0.19848025913394596,1.2663421885970507,0.8617866583585179,-0.5490182352953714,0.020694652517451357,0.5882895695972081,0.16769978352982878,-0.05481780355501972,-0.07521900361344092,0.41789943737316065
ODFL,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.0266602515345382,0.12622604731931922,0.3803955614056219,0.14544781642177748,0.9676404813457586,0.3029917338027688,-0.11201846466074884,0.1367409808672582,0.39172148568037224,0.13032120044478146,-0.05481780355501972,-0.07521900361344092,0.6951243039454135
ORLY,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.7531687063188104,0.1244068686765742,0.3387053604314968,0.11327377907247983,0.8476547372394547,-0.2274103973275472,0.35147103693057846,0.1371164700080735,0.3686138929193651,0.11041812300629993,-0.05481780355501972,-0.07521900361344092,0.7710595689272032
PANW,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.032592053458597,0.2540368238845681,0.2753483169105879,0.14614564427054247,0.8327490123871091,0.35074689408692866,-0.8303916401966867,0.21222200796790297,0.3444851685581528,0.1658698068782805,-0.05481780355501972,-0.07521900361344092,0.8939317123231971
PAYX,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.057408640134148,0.023291372931512466,0.5864537368557794,0.14906511216835794,1.1448880023698553,-0.1309396494116945,0.37859246118279966,0.04418634449308965,0.6159156413463222,0.13805681797725336,-0.05481780355501972,-0.07521900361344092,0.5010521589219152
PCAR,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.8298041260853251,0.08725526502943841,0.41027685320269003,0.12228930770939637,0.8972855418674439,0.12895096538858297,0.4456788328160626,0.12974088971943698,0.4823038170749947,0.08963561642598639,-0.05481780355501972,-0.07521900361344092,0.668510230330865
PEP,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.6562771070120574,-0.026475156566814397,0.40405789831689143,0.10187527703663196,0.811613395254579,-0.5240803724530896,0.47746550003472005,-0.022804244196545257,0.5250188682059945,0.11296377314385106,-0.05481780355501972,-0.07521900361344092,0.23018155633750406
PLTR,2025-03-14,2025-03-14 13:24:41,fama_french,0.11826995683666358,0.02828081458372723,1.9294733167502292,0.48759992081605397,0.19702675484906773,0.25647954047327093,0.9622035223899938,1.7515505868031676,-1.758242684355718,0.5857710019319566,0.31714932510140403,0.17831769048868068,-0.05481780355501972,-0.07521900361344092,0.9985638048866264
PYPL,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.336437557528642,-0.13233578773106008,0.40490035838416405,0.18189057594166463,1.1149468444231383,0.5346585561655746,-0.8228557741541586,-0.16194899514590877,0.4672129712187656,0.18841959377203013,-0.05481780355501972,-0.07521900361344092,0.05550504829253224
QCOM,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,1.3640023757983624,0.03460981238701235,0.4918784256996045,0.1851333507478731,1.1745443458636151,0.3678407958796086,-0.7636420483796845,-0.0009821299233939002,0.5518146965761688,0.2001213368082703,-0.05481780355501972,-0.07521900361344092,0.46987160522193744
REGN,2025-03-14,2025-03-14 13:24:41,fama_french,0.11764179884946373,0.024669657624011514,0.5789961659482392,0.08110037478911027,0.1610175948514012,0.09278380811310499,0.5836047291166278,-0.19263042211460757,-0.10414177121754914,0.0609048112795976,0.17432302404811018,0.11171898467806765,-0.05481780355501972,-0.07521900361344092,0.4844391500277728
RIVN,2025-03-14,2025-03-14 13:24:42,fama_french,0.05384287493553269,0.03822228713441531,2.1871719926509177,-0.45588405013951894,0.2140407978337312,0.1559859151972185,1.322492195935003,2.0372916641916534,-1.339680727878242,-0.31234248365638845,0.29577637329157425,0.09851866432255506,-0.05481780355501972,-0.07521900361344092,-0.41012928945117527
ROST,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.0867377883586964,-0.018702626012538765,0.3773166593542574,0.15251544592421637,1.098396356392854,0.36526007980130726,0.30614265695117404,0.027964281403356023,0.4219536299167418,0.11083647991928587,-0.05481780355501972,-0.07521900361344092,0.2889960497981563
SBUX,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.0580048207806274,-0.06783282060936309,0.441647873325571,0.14913524793204902,1.0811815678681185,0.046850238597848884,0.15478142996442393,-0.05294726201470391,0.44747728172883916,0.13765107003515029,-0.05481780355501972,-0.07521900361344092,0.16664234916586937
SIRI,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,0.8818472673032548,-0.23750918802042564,0.17203468926707488,0.1284117564600503,0.8845008670824006,0.3660452082116033,0.2586905332721536,-0.19444863465009116,0.19883525980866112,0.0891996922385345,-0.05481780355501972,-0.07521900361344092,-0.2947345639644547
SMCI,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.420355125288543,0.612079200934714,0.15633487352884257,0.19176278956801115,1.1811593191302436,0.7582464082027685,-0.7678072056255931,0.6008352920846709,0.17967969122634342,0.17981165497752,-0.05481780355501972,-0.07521900361344092,1.016088803538116
SNPS,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.2335469463682007,0.1430586654056075,0.5187868510007363,0.1697863393600296,1.0198365883730443,0.2040811514268125,-1.002260455687251,0.07873464816779177,0.6597159079891378,0.20884682078246755,-0.05481780355501972,-0.07521900361344092,0.7882478133703283
SWKS,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.4366334179911318,-0.15095554767262143,0.5472175005940308,0.19367779720374179,1.2589490510500798,0.553209645722028,-0.5770704787642353,-0.16045993915767043,0.5912169517855919,0.18585561739281317,-0.05481780355501972,-0.07521900361344092,0.043545245309425315
TEAM,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.1709641194228868,0.1343508829456946,0.2007010502931379,0.1624239830210982,0.736868251779347,0.9855002033999584,-1.654368667756982,0.06916125685594293,0.36009815323850547,0.18177317052295844,-0.05481780355501972,-0.07521900361344092,0.4876803328914696
TMUS,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,0.7315332779354318,0.13780921419744252,0.3239209071419398,0.11072854835858043,0.7846893316385684,-0.18547023418306047,0.1592931942709899,0.13836252335845162,0.3331902738743363,0.11516711764324049,-0.05481780355501972,-0.07521900361344092,0.8159147378555949
TSLA,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.5779480719936019,0.5521690659498266,0.25129874989004053,0.21030230730438193,1.0937542999599061,1.213490883056656,-1.7689609926384189,0.4925569048836945,0.3816429438112148,0.21987945942472892,-0.05481780355501972,-0.07521900361344092,1.0980175203584617
TTD,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.7565618011361368,0.296961482357999,0.2997111911220419,0.23131474769992064,1.2052387779917255,1.5153149240645452,-1.9249652727568574,0.24440156885470826,0.45712261966862777,0.22818384948597406,-0.05481780355501972,-0.07521900361344092,0.7352695608722211
TTWO,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,0.7437953998475024,0.030475218158630312,0.2121245640807503,0.11217108643802784,0.6172707262919879,0.11061552337861094,-0.6001964739467767,-0.008777548916978682,0.2695073611062936,0.13636897695398864,-0.05481780355501972,-0.07521900361344092,0.3422198482893266
TXN,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.1454730023971695,-0.007785575854147441,0.6079589728242331,0.1594251621595106,1.0751628109410358,0.2200912842460224,-0.22755687383608852,-0.011410649022238786,0.6200036437712235,0.15620542529053047,-0.05481780355501972,-0.07521900361344092,0.4048743896632928
VRSK,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,0.8340076701659735,0.03943399034506779,0.4511289132436085,0.12278382019658687,0.8868732364379324,-0.2752061083158081,0.09779351709996653,0.02957880832166813,0.46793851415230503,0.13673328397669962,-0.05481780355501972,-0.07521900361344092,0.5189221411227786
VRSN,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,0.9401075514769348,-0.08762337366640492,0.5137637076585664,0.13526560109172295,0.9306730926544318,-0.1736979172643086,-0.16631147675873947,-0.11141251629458021,0.5346541447858295,0.15618723626245576,-0.05481780355501972,-0.07521900361344092,0.08205043766533823
VRTX,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,0.7220006761990893,0.061608334605487744,0.23559284958616622,0.10960711594260156,0.7513503207603272,-0.23607927108701146,-0.0013541801426019268,0.04658663067584039,0.246037219333902,0.12610306811127764,-0.05481780355501972,-0.07521900361344092,0.4615130177688284
WBD,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.036115840059151,-0.2209536050000976,0.16522127938712972,0.14656018886499328,0.9910723695980503,0.9381735749176617,0.3868057689568284,-0.13187073856811163,0.25225085791947477,0.06073743471031631,-0.05481780355501972,-0.07521900361344092,-0.18205542659214297
WDAY,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.1552180275783694,0.011642634885109629,0.3667792493254143,0.1605715844516603,0.9226232931978129,0.5086530589179091,-0.8993898930473532,-0.025510403948016753,0.4544671020433436,0.17297668964981766,-0.05481780355501972,-0.07521900361344092,0.36235042904433784
XEL,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,0.6312380415520913,-0.020981598386909602,0.2772285509650336,0.09892963633441207,0.8160401880375555,-0.47670910815483536,0.666102146171669,0.00021618157390581455,0.4065912748855878,0.0966986997821171,-0.05481780355501972,-0.07521900361344092,0.20818238499363606
ZS,2025-03-14,2025-03-14 13:24:42,fama_french,0.11764179884946373,0.024669657624011514,1.1925510823367205,0.2769659261199704,0.18828133720804785,0.16496351216997826,0.6886854694109148,0.9534845445884548,-2.047477343232401,0.17946610623171047,0.4038086647943041,0.2074291323080379,-0.05481780355501972,-0.07521900361344092,0.7112140438440656



================================================
File: results/integrated_optimal_portfolios_20250314_122513.csv
================================================
portfolio_type,expected_return,volatility,sharpe_ratio,weight_PLTR,weight_ANSS,weight_QCOM,weight_CPRT,weight_MELI,weight_ADI,weight_NTAP,weight_MRNA,weight_ROP,weight_TMUS,weight_TXN,weight_CHTR,weight_BMRN,weight_NCLH,weight_AEP,weight_BKR,weight_GILD,weight_DXCM,weight_FAST,weight_LULU,weight_SIRI,weight_AZN,weight_PEP,weight_WYNN,weight_JBHT,weight_XRAY,weight_CSCO,weight_TEAM,weight_HSIC,weight_TSCO,weight_ADBE,weight_AMAT,weight_KDP,weight_NXPI,weight_INCY,weight_ORLY,weight_LIN,weight_PANW,weight_PYPL,weight_CCEP,weight_JD,weight_CHKP,weight_AMGN,weight_ALGN,weight_DDOG,weight_ISRG,weight_GOOGL,weight_TCOM,weight_INTC,weight_HAS,weight_ADP,weight_FOX,weight_COST,weight_EXC,weight_OKTA,weight_SRCL,weight_VOD,weight_KLAC,weight_BIDU,weight_CSGP,weight_UAL,weight_PDD,weight_HON,weight_AMD,weight_NTES,weight_ABNB,weight_ARM,weight_PAYX,weight_CDW,weight_AVGO,weight_NVDA,weight_APP,weight_MSTR,weight_LBTYK,weight_ASML,weight_SWKS,weight_VRSN,weight_AAPL,weight_CDNS,weight_AXON,weight_EA,weight_WBD,weight_ZS,weight_LRCX,weight_MTCH,weight_GFS,weight_MCHP,weight_WDC,weight_GOOG,weight_GEHC,weight_PTON,weight_SNPS,weight_ZM,weight_INTU,weight_NFLX,weight_MSFT,weight_IDXX,weight_DLTR,weight_AMZN,weight_CTSH,weight_RIVN,weight_FTNT,weight_ODFL,weight_LBTYA,weight_ILMN,weight_MRVL,weight_WBA,weight_CA,weight_TTWO,weight_META,weight_XEL,weight_FANG,weight_BIIB,weight_BKNG,weight_ADSK,weight_SMCI,weight_DASH,weight_AAL,weight_CTAS,weight_MAR,weight_VRTX,weight_MDB,weight_WDAY,weight_AKAM,weight_ENPH,weight_REGN,weight_STX,weight_CMCSA,weight_ON,weight_CEG,weight_HOLX,weight_DOCU,weight_LCID,weight_SBUX,weight_TTD,weight_MNST,weight_QRTEA,weight_VRSK,weight_MAT,weight_ROST,weight_TRIP,weight_FOXA,weight_EBAY,weight_SBAC,weight_MU,weight_CSX,weight_EXPE,weight_KHC,weight_MDLZ,weight_CRWD,weight_ULTA,weight_TSLA,weight_PCAR
max_sharpe,0.1435152185545217,0.1398817073041049,0.882997648048417,0.005026515199895508,0.009532504426305358,0.005561567511649879,0.006294267122824138,0.009200904068179262,0.010374154670732964,0.009459412708543453,0.008883064350186886,0.009428683277662346,0.011055085850244355,0.005731100887950893,0.010445221833699319,0.005636417374556642,0.0023784939713585983,0.01058395598089122,0.00850284572855862,0.012298339653826353,0.0012179089849412394,0.003906174166516888,0.01008808710167032,3.233886610034015e-05,0.010870010714453187,0.007409238741213223,0.002903699348686352,0.009779031197817699,0.011409876723585182,0.0087705877268526,0.007166447032845922,0.007174644868245256,0.001697637279870799,0.0006348923883857669,0.003659478232689666,0.001161208709351437,0.0009022396644174537,0.011049675063163516,0.005504584049218419,0.007538292607907743,0.0006729774911543618,0.0006727657349818252,0.004955346222367648,0.0036116132132542667,0.01145908974814676,0.0057064801754862695,0.006472370991590696,0.002295872827177496,0.0059952569547965535,0.011082595341561453,0.0016388314560730208,0.011355821545811502,0.006533920944938698,0.011382807391527824,0.009992003762086617,0.010437560548827638,0.010842140952137428,0.003799388983991144,0.009615850358183471,0.011953627737310466,0.006139881489717473,0.011290695101524053,0.005413237311960269,0.004680246990700835,0.00976427137530291,0.0003063478475920062,0.001443541655031464,0.0032338565125621696,0.012392198325977313,0.00011078499520885557,0.011170006101930897,0.002223117992881052,0.008100697007015115,0.009159214995524478,0.0032245314354948738,0.007203399971647557,0.006572996265442236,0.009074308313453064,0.003943339148028613,0.00969098331423761,0.012334595418108914,0.009996408444095392,0.01172463986672125,0.0027945813368422667,0.0011967069775825525,0.0104660500053582,0.0071079113171056375,0.011145284025984803,0.00685673952099709,0.006173497972627859,0.001334727838577164,0.009967674175471954,0.009498026423937688,0.003864599702871712,0.005959720580679291,0.00827982019076158,0.009875102616953967,0.009972904658037967,0.005860194543671435,0.012120264451051478,0.00029704096753424444,0.003364051111659741,0.003887518989030796,0.008061404847937286,0.0012409383795799682,0.009192089936472657,0.0003623602722480453,0.0035716029183923822,0.00019779532689171602,0.009262668449426031,0.012090866744888767,0.007230570608492616,0.011407705830793698,0.008776184574188294,0.000569285553029183,0.011775247410242093,0.011945581204276266,0.010866361357477738,0.004926152601274179,0.007869237355606672,0.010771839965476818,0.0026278353198162215,0.012226190669541217,0.008843797997093904,0.0038019701364429112,0.003786806574293119,0.004065179271269182,0.0015907448824404359,0.0037366979661858533,0.009173169736170623,0.0067210654509196575,0.00778056941113168,0.0018817571638088265,0.006791680223207676,0.000527283352864404,0.0026913008980650843,0.005555884314607401,0.00036390525263987704,0.011260692619050765,0.0024779102193522055,0.011032253221422608,0.010329843645836737,0.008099830878411048,0.003212884373417387,0.010602239242004947,0.0016057575989040609,0.0026403349386040645,0.004821809139939536,0.005947145962922145,0.0024275656317588935,0.0020737901400085653,0.009391144778773614,0.0007670710223984436,0.00524281827442201,0.003996566644402593,0.008825981957878133
min_volatility,0.1435152185545217,0.1398817073041049,0.882997648048417,0.005026515199895508,0.009532504426305358,0.005561567511649879,0.006294267122824138,0.009200904068179262,0.010374154670732964,0.009459412708543453,0.008883064350186886,0.009428683277662346,0.011055085850244355,0.005731100887950893,0.010445221833699319,0.005636417374556642,0.0023784939713585983,0.01058395598089122,0.00850284572855862,0.012298339653826353,0.0012179089849412394,0.003906174166516888,0.01008808710167032,3.233886610034015e-05,0.010870010714453187,0.007409238741213223,0.002903699348686352,0.009779031197817699,0.011409876723585182,0.0087705877268526,0.007166447032845922,0.007174644868245256,0.001697637279870799,0.0006348923883857669,0.003659478232689666,0.001161208709351437,0.0009022396644174537,0.011049675063163516,0.005504584049218419,0.007538292607907743,0.0006729774911543618,0.0006727657349818252,0.004955346222367648,0.0036116132132542667,0.01145908974814676,0.0057064801754862695,0.006472370991590696,0.002295872827177496,0.0059952569547965535,0.011082595341561453,0.0016388314560730208,0.011355821545811502,0.006533920944938698,0.011382807391527824,0.009992003762086617,0.010437560548827638,0.010842140952137428,0.003799388983991144,0.009615850358183471,0.011953627737310466,0.006139881489717473,0.011290695101524053,0.005413237311960269,0.004680246990700835,0.00976427137530291,0.0003063478475920062,0.001443541655031464,0.0032338565125621696,0.012392198325977313,0.00011078499520885557,0.011170006101930897,0.002223117992881052,0.008100697007015115,0.009159214995524478,0.0032245314354948738,0.007203399971647557,0.006572996265442236,0.009074308313453064,0.003943339148028613,0.00969098331423761,0.012334595418108914,0.009996408444095392,0.01172463986672125,0.0027945813368422667,0.0011967069775825525,0.0104660500053582,0.0071079113171056375,0.011145284025984803,0.00685673952099709,0.006173497972627859,0.001334727838577164,0.009967674175471954,0.009498026423937688,0.003864599702871712,0.005959720580679291,0.00827982019076158,0.009875102616953967,0.009972904658037967,0.005860194543671435,0.012120264451051478,0.00029704096753424444,0.003364051111659741,0.003887518989030796,0.008061404847937286,0.0012409383795799682,0.009192089936472657,0.0003623602722480453,0.0035716029183923822,0.00019779532689171602,0.009262668449426031,0.012090866744888767,0.007230570608492616,0.011407705830793698,0.008776184574188294,0.000569285553029183,0.011775247410242093,0.011945581204276266,0.010866361357477738,0.004926152601274179,0.007869237355606672,0.010771839965476818,0.0026278353198162215,0.012226190669541217,0.008843797997093904,0.0038019701364429112,0.003786806574293119,0.004065179271269182,0.0015907448824404359,0.0037366979661858533,0.009173169736170623,0.0067210654509196575,0.00778056941113168,0.0018817571638088265,0.006791680223207676,0.000527283352864404,0.0026913008980650843,0.005555884314607401,0.00036390525263987704,0.011260692619050765,0.0024779102193522055,0.011032253221422608,0.010329843645836737,0.008099830878411048,0.003212884373417387,0.010602239242004947,0.0016057575989040609,0.0026403349386040645,0.004821809139939536,0.005947145962922145,0.0024275656317588935,0.0020737901400085653,0.009391144778773614,0.0007670710223984436,0.00524281827442201,0.003996566644402593,0.008825981957878133
max_return,0.15089982122887255,0.15403539413489814,0.8498035270662251,0.006046246317221159,0.011167895551426152,0.0034017176223630034,0.010001519517212573,0.0037324429155362075,0.0065122974825643715,0.0023978081825999347,0.002678972033641641,0.002782890173707205,0.00022761834675284949,0.011834561431832775,0.0052571387597201815,0.011701890263036278,0.008207667038959428,0.007355005779420743,0.0080879252882236,0.0026352400496443473,0.004406443406946538,0.007202528334706826,0.0011603838987075598,0.009381093964444583,0.004953282249297147,0.011046172754385162,0.008083093602409224,2.0064414090023494e-05,0.008456172400758499,0.00465362352852433,0.0011157728349824466,0.0038023342703343657,0.0033220358271168512,0.011765630536654536,0.008205767070792397,0.0027094989056849275,0.009178387415397789,0.005297941496372616,0.008528344967634403,0.010090083747975768,0.008905097209576688,0.0054533926732003015,0.007773883924928583,0.00578595409017104,0.002874591008572245,0.00804695322746656,0.0038745486404816133,0.0014290294192709314,0.008413291952524856,0.008015857942949704,0.0020541672550316785,0.010929873462793017,0.0029429011189909355,0.008957460027057489,0.000973967464505158,0.009020789554389246,0.010452866863862102,0.006467420378612595,0.011620933859198084,0.009839936336716974,0.007957599758223435,0.0034466343645679497,0.00893377906856228,1.4383799414043532e-05,0.00012226821493846224,0.01082098666908811,0.007792106478594258,0.006917529753121275,0.010857846444647113,0.001607956575938373,0.008325118441943039,0.006975362032334327,0.008942053167226198,0.00572332152544156,0.010064957445195378,0.003969383330037926,0.001232084526347732,0.010078382136176478,0.0042373081227594835,0.008654368317594625,0.00940507119864895,0.008812718868322973,0.01229903071805744,0.001725561651285635,0.002975764798678794,0.004862224747112442,0.008190372702309517,0.003121060678167201,0.00943980166552864,0.0027466338285977113,0.009447969261816834,0.008146520236840798,0.00819905079648697,0.007789144606847183,0.010689996039641974,0.010763342926560551,0.007091500691734837,0.009777132110965505,0.010948981110502857,0.005936671399590296,0.0036788889826925883,0.008055869458033996,0.0018695017447120735,0.008745347255236686,0.009173108710585043,0.009542642690233989,0.0040923545260793765,0.0007303445242852188,0.0069201820297640085,0.00132293453262671,0.0069649537475048075,0.004986386713743427,0.007383850889658215,0.001707137197232628,0.0001464739280193241,0.0018035523597711917,0.010581369967452148,0.008660125729695715,0.004817825261282359,0.008517362416900097,0.005658468828392554,0.01211138625208116,0.010083421677637277,0.00942028250931933,0.009754829859268349,0.011865730400451564,0.011316657513719183,0.004168238294522899,0.00018268258065329618,0.011763456125188528,0.011253894480772212,0.00971109605082801,0.0016145937456260662,0.005905468856966121,0.006413525644257677,0.0013204120089997647,0.010739560146888823,0.0011489538349427932,0.010160126484064402,0.000839990309638877,0.009994207420958802,0.007322447518512512,0.0006660832941933688,0.004647901568602864,0.010332380729116674,0.0026057935598789743,0.0028478278680135883,0.0077753889235526565,0.005459224819267103,0.006306690546564333,0.0043774665660149216,0.01181036879117203,0.002232062650719446,0.008356239607816477,0.009055825368528687,0.01079471349613175



================================================
File: results/integrated_optimal_portfolios_20250314_122646.csv
================================================
portfolio_type,expected_return,volatility,sharpe_ratio,weight_AZN,weight_ARM,weight_TTWO,weight_SBUX,weight_LBTYA,weight_BKR,weight_GFS,weight_COST,weight_ANSS,weight_CSX,weight_NTES,weight_TMUS,weight_DOCU,weight_MTCH,weight_CCEP,weight_META,weight_CDW,weight_FOXA,weight_AKAM,weight_MU,weight_FOX,weight_PAYX,weight_TRIP,weight_KLAC,weight_VOD,weight_WDC,weight_CSGP,weight_IDXX,weight_CPRT,weight_CHTR,weight_PTON,weight_ISRG,weight_LRCX,weight_CA,weight_UAL,weight_MAR,weight_PEP,weight_AAPL,weight_EXPE,weight_AMGN,weight_AMD,weight_GEHC,weight_LCID,weight_HON,weight_AVGO,weight_ORLY,weight_KDP,weight_TSCO,weight_JD,weight_MDLZ,weight_DLTR,weight_ILMN,weight_FAST,weight_BMRN,weight_AXON,weight_WDAY,weight_CMCSA,weight_FTNT,weight_NFLX,weight_BKNG,weight_NVDA,weight_CTAS,weight_VRSK,weight_ASML,weight_KHC,weight_SBAC,weight_DASH,weight_MSTR,weight_ENPH,weight_VRTX,weight_INTU,weight_INCY,weight_QCOM,weight_SMCI,weight_PANW,weight_ULTA,weight_EBAY,weight_PLTR,weight_CRWD,weight_HAS,weight_MDB,weight_AMAT,weight_GOOG,weight_AEP,weight_MCHP,weight_TEAM,weight_SWKS,weight_ODFL,weight_XRAY,weight_MNST,weight_EXC,weight_GOOGL,weight_WYNN,weight_WBD,weight_GILD,weight_TXN,weight_LIN,weight_EA,weight_MAT,weight_NXPI,weight_BIDU,weight_LULU,weight_MRNA,weight_REGN,weight_MELI,weight_QRTEA,weight_CDNS,weight_MSFT,weight_HSIC,weight_XEL,weight_SIRI,weight_APP,weight_SNPS,weight_ZS,weight_JBHT,weight_CEG,weight_CSCO,weight_STX,weight_WBA,weight_TTD,weight_DDOG,weight_RIVN,weight_ZM,weight_ADP,weight_ADSK,weight_ADI,weight_FANG,weight_NTAP,weight_ON,weight_TSLA,weight_VRSN,weight_MRVL,weight_OKTA,weight_ALGN,weight_CHKP,weight_ABNB,weight_ROP,weight_PCAR,weight_PDD,weight_NCLH,weight_LBTYK,weight_DXCM,weight_ADBE,weight_PYPL,weight_AAL,weight_CTSH,weight_HOLX,weight_SRCL,weight_BIIB,weight_TCOM,weight_INTC,weight_AMZN,weight_ROST
max_sharpe,0.14523838335335998,0.1405957140137249,0.8907695674217656,0.010952343958175853,0.0001271270166608156,0.0018037773780955545,0.0064700690531567205,0.0002894891466141239,0.010406631376749836,0.005026202218122008,0.012586756244639024,0.012498566479888791,0.00715019930970676,0.001059167855145806,0.010782769283364297,0.004415357488396131,0.0020028422721241864,0.004289409099760798,0.01042880945447586,0.0060487145802654695,0.007070167470493492,0.009130456031689878,5.879620030063814e-06,0.011900429300427798,0.004350776627448155,0.0037038474537304145,0.008498118286955155,0.01314872874542385,0.007780969563401349,0.012931163964328998,0.0021759072191059334,0.01281105707053512,0.012518560196559322,0.00443856696447473,0.0026236270598973105,0.012388000113576098,0.008813663553704075,0.002599514890326554,0.00862255644146846,0.012260572351678562,0.0010257514517999346,0.009434626573805492,0.0016814239132253146,0.00873475714450289,0.0051232498215023825,0.000494740512173468,0.00875376556909525,0.012154199001724245,0.005207229419008892,0.0020891572433440198,0.005190458717830512,0.0050897134671989055,0.0035503077799583734,0.013006172205230562,0.001507007327162858,0.012296855005250247,0.003977292738995078,0.0014119941052018823,0.002386684711814342,0.00014657246307913743,0.006516340544797777,0.003000540545896992,0.011735483078025286,0.0030544935153346874,0.010638813537464343,0.012499832558315415,0.0038340542999640848,0.004034413062841617,0.007708241948806083,0.0014495746577908243,0.0041169752806138864,0.0008439408931895466,0.003970476951286957,0.0028960403390203187,0.010787345918053274,0.0059420113368756815,0.004546728966029176,0.012139084055295568,0.01080566043479549,0.010563560745831181,0.004559908121979508,0.004698762837612215,0.00402426672317433,0.009626242290155039,0.00034852343173088254,0.009850407442050839,0.008050308401868489,0.01127375672811231,0.011167592593236058,0.0019583917574271404,0.010236287137331162,0.0014357054134912315,0.011067228476120485,0.006437294028169446,0.0044259515844728235,0.005856673508344621,0.004225806947078595,0.008072283962843704,0.006979400377696368,0.011019857476524722,0.006320923491516251,0.006262112492978123,0.006731471139244322,0.0002682627207416703,0.008751102985412963,0.00604001767693333,0.008642538544536588,0.011811266799337593,0.0044760191922528,0.008885755244141624,0.01279757891949144,0.00690130940198772,0.008893702793753299,0.008240832852211041,0.0058772538584250635,0.0019903589981366907,0.007423889508025329,0.011442255897198049,0.003459537888441127,0.004579431948577871,0.007202968783952064,0.009536775661086218,0.010633271532110753,0.002993140211861199,0.006651843434088229,0.0006208117743277453,0.011994084000881953,0.011282221112629116,0.008847148093979147,0.00966131315919025,0.0025297125541413434,0.00321628482186408,0.011917264834942435,0.008598634218642215,0.0003434635674783841,0.0026453924353202506,0.006517632480034143,0.005441794674012515,0.010960886404751834,0.003915492901646426,0.00506431994528478,0.01166411601897208,0.0016180947900551424,0.004950124921236191,0.011940878974286473,0.003987856330983332,2.620898128773851e-05,0.0002684502727943985,0.0063093118213684825,0.011964555035790175,0.0035174723150341557,0.008915551529583137,0.002511061353217331,0.004000577656116194,0.008988554630972074,0.00519609019058589
min_volatility,0.1407298222329338,0.13937945603334298,0.8661952461921809,0.006892528202720184,0.0031524958406714265,0.006441851668761922,0.006024645132967303,0.009474577000801619,0.005016376456465968,0.006101525507196186,0.00808795986950402,0.004535207319827491,0.0029188326822108825,0.0021659152659080964,0.0028410123640056307,0.006791024682470181,0.01272690199696262,0.01009173322703209,0.012489926306391475,0.003064751569862289,0.012051492836683613,0.0024819953566967983,0.008895384106224109,0.008861424574197403,0.005507912683565063,0.006598419594754083,0.013469487539064125,0.009833849884711768,0.0071743245828119005,0.003784356029791677,0.012567039162267825,0.00618637140123219,0.006689963378136208,0.004021822573666989,0.009114506092973977,0.002108554062034823,0.007665449928720673,0.007949949910213189,0.0018651380907453747,0.013601670704141313,0.013275255718256804,0.00020048225154370815,0.004021253629528702,0.00560033506886253,0.0017160681381248536,0.006785848495450095,0.010384569261811399,0.006215674850501158,0.0007458410872941381,0.011040382979711803,0.012575414429216175,0.004627238075706814,0.007986541574340322,0.006387204567058138,0.002382607276476612,0.003944502638669839,0.009049460668692843,0.011809827712155767,0.012033933132743965,0.00977023143389424,0.0045183738825431965,0.0028254720260520905,0.009008800066028532,0.0020715213083528296,0.01377939573577814,0.0032462814726283563,0.007601658698104432,0.010435757486557347,0.006602749571570948,0.005088417658172015,0.0002106323851185924,0.0014415636973195934,0.009618529917384109,0.006067835797532964,0.0066790483955354975,0.002338765663018027,0.00787427377107919,0.002332690197368794,0.007498190881291112,0.009477580051688656,0.005204721820938186,0.006882508950664528,0.0023654742394090293,0.0011285835495779305,0.009690435132814005,0.007970438296462908,0.0008878926892625566,0.0032830624653188995,0.010598827024174811,0.006850688233716514,0.007495744940889159,0.008365472619138871,0.011699984625456048,0.013219165109486035,0.011314039644726005,0.011118855020266811,0.009089056097656142,0.00930252277247006,0.003413088867573343,0.0010037930979245005,0.010995982188011713,0.012449535142594061,0.001215039439652169,0.004894671642566181,0.009660495143789551,0.0021244503773295413,0.008714271258442782,0.013227429886866524,0.00545755614623988,0.0026678188229517963,0.003817403296719623,0.006866848033099435,0.008016189778458836,0.0040478775961629715,0.012162599724216249,0.005377358000279364,0.00247439998593771,0.002288650841381729,0.001930908805127055,0.0006983939517771811,0.012354307252670567,0.006821070478083642,0.007993118261160004,0.006675948888932993,0.0053474477969021,0.006578980423368289,0.011459808060634258,0.004483914107971043,0.0029280001979657203,0.009459714793044588,0.007363118101075835,0.002298871149347757,0.0023586875806335355,0.0067953774735584425,0.002236965857488817,0.010764018801889659,0.001985687860295804,0.0031854968677171385,0.0030316970723358165,0.01294676892662539,0.0019504871852197726,0.002525272992113847,0.0044488370977035984,0.008802149508194973,0.0032201866123440785,0.0007439275613299627,0.004517319438781011,0.012190276912133393,0.006617790499373135,0.01268881953213893,0.010985673351252856,0.004314787301162045,0.012805448654185902,0.0005014152695360418,0.0016575313871014046,0.006472252246640172
max_return,0.15255052025588156,0.16313696329314115,0.8125106510515416,0.005127603534208439,0.011299971005926359,0.002360049336394457,0.004632204850169612,0.0010959617790228875,0.002390207040710442,0.013217145029742538,0.008856748566683425,0.012869229069942485,0.012738989286743265,0.00021492715406699049,0.010605030820168518,0.0119097997008108,0.007476897611827309,0.004206204941996269,0.009369067506578614,0.003458256902545428,0.003774224988530575,0.010597024579495018,0.010898320437571336,0.0004239709081721361,0.011929152731500461,0.006754576806185045,0.000988931966752525,0.008842980874721568,0.005807026092288626,0.011575848507467129,0.00754926333551485,0.001799155914948848,0.010087623764181283,0.006250222917072088,0.012515815243033792,0.012820105217347779,0.0059698102637226426,0.0038233456304501657,0.002377902124654002,0.002951195916643438,0.012583378671314144,0.0005939147621927918,0.008423091184792357,0.010012890315657417,0.010925688351937704,8.915702518344149e-05,0.00767400352821491,0.0015688862731030229,0.012489094409054779,0.0018935045342014835,0.0014487404534699448,0.0012414138440883637,2.6351493315595295e-05,0.0008301300878864526,0.009563458502953908,0.00882761378313709,0.000872302955141356,0.002481825623192171,0.0053869236854019245,7.55189540212058e-05,0.009070837370907662,0.010778582895434353,0.0010190790578592436,0.00899584444674088,0.008569417130736758,0.0033727502116924148,0.00982787552897289,0.005966069200592118,0.001102400322997233,0.006655379196712447,0.005612659597635925,0.009156966461650415,0.001418865295944262,0.00522032822527286,6.576809777657108e-05,0.013111507154163798,0.005464502370167125,0.012588949538770721,0.00559607547379293,0.0014710294806546025,0.00018522778617531446,0.007884266362570705,0.00310533286460483,0.008183255240136123,0.005164899917909054,0.009046582137520314,0.012122296211165446,0.012570445353363604,0.0010544089618706397,0.0012268898895770083,0.0024839177583206445,0.0062542575849181305,0.01189511555931215,0.0007346565478662526,0.006291708732711815,0.003218807369716542,0.0001382656001726433,0.011891781989819146,0.00017468883120725162,0.0015761721555459828,0.009628057827652928,0.011223958190293383,0.0017481216705612112,0.0014822648957824134,0.011153733754009151,0.007450744273004948,0.0008098802834338093,0.002939680446930078,0.009224634308384584,0.008463929098042434,0.011997544420774574,0.0019073219484037854,0.013062160955811263,0.006731556731165555,0.011553413706321609,0.007947095659326098,0.010541604365393397,0.012961889450089246,0.009088484404766794,0.0031860817023781833,0.012632522822879994,0.013293508794930041,0.012815347097893177,0.009255075127091455,0.0027702627092737082,0.004691539504338549,0.008328368715192514,0.004665832071133924,0.005906942942551332,0.008592645197755858,0.0042278481890142315,0.003451318953606908,0.005313209991455191,0.00989698919053171,0.01298037638852351,0.010470299828652179,0.0021929648460661116,0.0031099335717513455,0.005376912624646265,0.00979972475758577,0.006884188722993444,0.004484595893754609,0.00868159156454752,0.002397567102696289,0.00898111270150767,0.010768819037889628,0.012687306526037142,0.009565513272386566,0.00781964572648637,0.005002015574918834,0.002582749594176472,3.3939448101298e-06,0.0066008663108966855,0.005626157801487041,0.011228026107437832,0.006972123991564626



================================================
File: results/integrated_optimal_portfolios_20250314_122830.csv
================================================
portfolio_type,expected_return,volatility,sharpe_ratio,weight_WDAY,weight_CMCSA,weight_PCAR,weight_ON,weight_PYPL,weight_ISRG,weight_AMD,weight_VRSN,weight_TRIP,weight_NTAP,weight_LIN,weight_MTCH,weight_NXPI,weight_ODFL,weight_EXPE,weight_AXON,weight_ADP,weight_RIVN,weight_AVGO,weight_PLTR,weight_MDLZ,weight_STX,weight_CPRT,weight_WBA,weight_AKAM,weight_SIRI,weight_ORLY,weight_CTSH,weight_GOOG,weight_MELI,weight_SWKS,weight_XRAY,weight_WYNN,weight_PEP,weight_CEG,weight_TTD,weight_VRTX,weight_INTC,weight_MCHP,weight_KHC,weight_TMUS,weight_HSIC,weight_ADSK,weight_TEAM,weight_APP,weight_AMZN,weight_MRNA,weight_MSFT,weight_AEP,weight_CRWD,weight_QCOM,weight_CHTR,weight_CTAS,weight_EBAY,weight_HAS,weight_ROST,weight_XEL,weight_AMAT,weight_AMGN,weight_ALGN,weight_MNST,weight_ENPH,weight_WDC,weight_SNPS,weight_MU,weight_CDW,weight_CCEP,weight_CDNS,weight_BIIB,weight_FOXA,weight_JD,weight_SBAC,weight_BIDU,weight_GOOGL,weight_EA,weight_ASML,weight_AAL,weight_DASH,weight_TSCO,weight_LRCX,weight_ANSS,weight_TXN,weight_REGN,weight_ADBE,weight_FTNT,weight_GILD,weight_WBD,weight_OKTA,weight_CSX,weight_IDXX,weight_SRCL,weight_SMCI,weight_GEHC,weight_PDD,weight_AZN,weight_LBTYA,weight_META,weight_ARM,weight_UAL,weight_DLTR,weight_CHKP,weight_NTES,weight_LBTYK,weight_MAT,weight_TSLA,weight_BKR,weight_DOCU,weight_HOLX,weight_QRTEA,weight_BKNG,weight_EXC,weight_MRVL,weight_FANG,weight_MDB,weight_ZM,weight_AAPL,weight_TCOM,weight_LULU,weight_PTON,weight_BMRN,weight_FOX,weight_MAR,weight_SBUX,weight_ILMN,weight_ULTA,weight_ROP,weight_ABNB,weight_DDOG,weight_GFS,weight_NFLX,weight_DXCM,weight_JBHT,weight_NCLH,weight_PAYX,weight_COST,weight_VOD,weight_PANW,weight_KDP,weight_NVDA,weight_CSCO,weight_VRSK,weight_CA,weight_TTWO,weight_INCY,weight_KLAC,weight_FAST,weight_ADI,weight_HON,weight_INTU,weight_CSGP,weight_MSTR,weight_LCID,weight_ZS
max_sharpe,0.14317072815532894,0.13938602078521636,0.8836662920819441,0.008777309376620612,0.00546238880566453,0.00827065187815811,0.0006549740827269834,0.011837073054091199,0.013114762534969267,0.0026933638884154127,0.006755517796705343,0.0008459287257101992,0.008379403422081303,0.0025933823307233038,0.0015296507394973635,0.0036303473684406733,0.0011240434518901324,0.010220782534547104,0.010500271504127202,0.0005177005386522987,0.0030800295874385576,0.013237147163444107,0.0007760380511110992,0.012075502488415513,0.012275452189856956,0.011933007526241855,0.006480621855161595,0.012515445719654872,0.00325335644605014,0.006060538004966258,0.0011752158527637835,0.008028729467231589,0.011903205685337715,0.0013023009764772755,0.0023175260591416164,0.006215394721630436,0.005469294233517901,0.00046950211960008895,0.006180206440550122,0.009799062008773266,0.005837116473197303,0.00041080570627750445,0.010127350011730749,0.0052750680431490355,0.012266115484033167,0.00799502364793071,0.008682241068155136,0.001185028993497854,0.005873704682521255,0.0003990105255849313,0.008241355708523468,0.00801083724043214,0.0006481745340743549,0.0035661543932315144,0.00717767555275786,0.012738570884629012,0.0069258044845678015,0.012852886559784659,0.007610462649113016,0.009484220991860848,0.009277140923215644,0.001866836847388214,0.0021105274421375215,0.011870568749611564,0.0020763702387837243,0.0001698811509183597,0.007336067635552734,0.013299181598938834,0.0038929820723083625,0.008850421853259755,0.009849133322236187,0.0036419425479454694,0.009020594143854647,0.006179576269687225,0.011224741097725005,0.010764682189641012,0.006072340247225401,0.003453702492893362,0.00554088467524988,0.0060141736339005564,0.005831461533442267,0.0022629469427897096,0.008831662254333066,0.013068077517792324,0.006360746422051841,0.012186079372566324,0.009591833083306415,0.009688250224964405,0.006236056393837485,0.008002885450966757,0.0044717050207443996,0.0014498284723608223,0.003433969758438024,0.0034468596060438124,0.0010051020995107038,0.008247469431630343,0.012689768354322195,0.009941900003847206,0.012161995434989916,0.00713419854764103,0.0007509657174685285,0.003142851332629513,9.338393307104439e-05,0.006431033043399319,0.0011273541149617679,0.009279164770797392,0.008352579959291607,0.0021935266807425486,0.007764625802877718,0.011129333388760689,0.007469085123844784,0.010229656210040395,0.0028181328117026666,0.006779318649853492,0.0009634584163763608,0.0055568062649512615,0.007576435108091358,0.011782343353604258,0.008564535224525976,0.011260022622038634,0.005644112466986032,0.002793360765615628,0.0024849436394449756,0.011172815789404414,0.0030680404980010165,0.009571638082244373,0.01078417259791922,0.008274705823396605,0.005011305676370816,0.00972443368188598,0.005918711423774644,0.007888635815359443,0.0048407134446327455,0.0059581508476635224,0.010125924069146551,0.010593013068349285,0.0023156469441380514,0.01146310287766343,0.00013024148478343162,0.0007506760128503644,0.008295632329905062,0.011679047014223877,0.0008828827203122539,0.007632153160870861,0.013182178878070397,0.00934651426869827,0.011728378200234412,0.003968924002582094,0.002534942925308617,0.011573675916728351,0.0075682587289903035,0.005403346864243368,0.0032934791905209183,0.0009380251634353803,0.004281455331827623,0.0005948664418977209
min_volatility,0.1407927282299125,0.13865310729572836,0.8711865935487326,0.0078020228908419155,0.00971006698267358,0.002440879336339925,0.001271413943487509,0.004857800370811871,0.00703724410692195,0.009761094868594273,0.007467321154232676,0.00773042809711056,0.0008161583701953089,0.013147419461904522,0.005808873054971736,0.0003561670984070956,0.003044638569861696,0.005029187874214396,0.0036123059222642495,0.004769104503552174,0.011921013091179895,0.007162696450929209,0.0061200375432506875,0.013716717406239911,0.005293881806570702,0.012190899022461434,0.009546685289139344,0.0018786373552287495,0.005388274283727475,0.011753937882834697,0.007635935164429465,0.009852041091234411,0.012683960885673327,0.010984106905396456,0.0073726161180771455,0.008578228278481731,0.003133468385028067,0.0010777908465217912,0.011899462728258741,0.0048210120530224445,0.0040342873116772544,0.0034659980703204826,0.013272082781671763,0.000603243616447868,0.011647190299329181,0.0029516488005369426,0.0063023830511144885,0.00436381893231947,0.01152672392477262,0.004199707350633158,0.00909274276908301,0.011569181366209344,0.006712103874543184,0.001985830730009293,0.006737074873320662,0.00845959103652345,0.010416096188583886,0.002546360576743014,0.005663257231250482,0.009232180493170804,0.004977148239746021,0.009927045293395774,0.010905269392455763,0.009490786712773442,0.0058550716470737955,0.004931690945842248,0.004289399792815956,0.0017825474413732806,0.008994491108347092,0.011249296137918837,0.0009362386536579312,0.01337428440113131,0.0015732178577275524,0.008065265195704515,0.0023174465356480267,0.009540601171401264,0.00034309324690193725,0.013139097352167312,1.5113932740934437e-05,0.002723310204529326,0.010128763723823011,0.0018900313252656368,0.00983461390301675,0.009775597643535078,0.006607199840655987,0.001097977261838847,0.0034687443838291618,0.009562284334193165,0.013272090264784679,0.0044098014183689875,0.0053229755459331994,0.00843767686599624,0.006587650182204292,0.006379087508041581,0.006129573423420695,0.003359283154071113,0.010646704898889983,0.0019416619840214155,0.011891876876367039,0.006155048347265562,0.007449267310976082,0.009027651048096452,0.01317822180182615,0.005989916934478512,0.00033753037887975564,0.0010519914466625717,0.012558493973385763,0.004752462353407776,0.002940817105535072,0.001428263579395232,0.013771263800206157,0.007448405255101885,0.004198220693265509,0.00981595984296897,0.000856652056054403,0.01233325540164806,0.0035268812727689016,0.00282081608563565,0.010861912958856362,0.001544597674441403,0.01355458137665852,0.0005074212714316381,0.009395555712334573,0.0028930035374874798,0.007371422035508596,0.0038205315265211854,0.007512032132040763,0.00882508632301146,0.01111302671581239,0.002652411867690907,0.007824758703843098,0.007758021186144894,0.0035082139348486313,0.013074708900265564,0.001301305806116725,0.0024353825683045118,0.006090555909362794,0.0013001416129214943,0.0039887489512707075,0.011109465634301999,0.006411801565714259,0.0037249257792922753,0.012500030695229527,0.0032016097761288225,0.012602898006264046,0.0030672008094444958,0.010598526605826136,0.0016859044147189192,0.012124696231581954,0.0006180351186995065,0.0017158266686726476,0.0016490342890293568,0.007824012636504006,0.0008036586803356635,0.0063652210825856734,0.009393570339297858
max_return,0.150829319184348,0.1679422200201536,0.7790138725607418,0.006343722822895394,0.0067453384582087,0.004596722331147026,0.01027199658892419,0.01398660070137697,0.013348141101545337,0.007650270933440587,0.00997727207538177,0.0012793925470704253,0.013613505790786394,0.010646670487397245,0.006548514931162168,0.009770585577568299,0.00684228683949963,0.00026777484863063205,0.0073566271102287785,0.0008457380076419878,0.005493856710540314,0.002776851354187608,0.006274558976526603,0.0023343185976795215,0.0009948909269049363,0.00237583026385452,0.012145606779268167,0.001196174916640622,0.003195608522615525,0.0041960259101096655,0.004563260809268444,0.0050454650798063385,0.003468747547408267,0.0037430437201979093,0.013668923231056344,0.0019151488945731551,0.0009775506383578928,0.0083888397183632,0.007340535680968676,0.0016342418197054325,0.013456821692474585,0.011238445878391052,0.0121456290012303,0.0006913737473572174,0.012875307252795894,0.002473234880285361,0.012667160854213322,0.0034936420456029575,0.010250496784713894,0.0005452093347253912,0.009667788306821823,0.001425131330811048,0.010522229278307677,0.0034007960621187687,0.006713479541357512,0.010687658812829896,0.009298709067993837,0.004024673457671048,0.00669066939368638,0.010181354099189634,0.014352184044246949,0.009925843580697013,0.011568989371183239,0.0015678420618546536,0.006851100595638325,0.01165494901162161,0.013084678445166142,0.0019018553450881467,0.0020199770889498102,0.006753487326148237,0.005082837413673359,0.004131973472270119,0.000583268716414673,0.001154502380183061,0.0015023974582821008,0.0050790062436611395,0.005846010980088463,0.0028450495456876944,0.011860942335018616,0.0021102917537636104,0.011894155529508784,0.001791333869659786,0.014320061003220528,0.01053257235291119,0.0034010999396478342,0.008127017601525139,0.012110548882348896,0.0018074533735072983,0.004579345960733151,0.011261329902714069,0.00510272999067059,0.009820027356493559,0.013842069179876768,0.0064356457652188235,0.011837459650185305,0.0009857959031175664,0.0008091469057478078,0.002619963218547341,0.006875808630385367,0.011168605316387331,0.007527659940724961,0.012075062624294626,0.013536024496124182,0.0025560223701275213,0.009883215993633449,0.009409632601807355,0.009614605995783163,0.004610291178904374,0.0008791108505505762,0.005727217484662432,0.0010966034052986484,0.007114637658841597,0.005265760353053817,0.0002496718390239268,0.014069680378242692,0.0014310729026937841,0.0029390995893981446,0.003580365932175384,0.008110117314533151,0.005184787343719567,0.005185927997193667,2.756978941792869e-05,0.010736437882188608,0.013782649280132916,0.00032018713227323895,0.010056804163647341,0.001807609089158111,0.008418645984809767,0.0014152239342993642,0.00446258839684985,0.008779498531964178,0.0025943068634451468,0.005502064913414113,0.01357215866300627,0.005666720766950271,0.009158227904113898,0.00411471497531658,0.0014846490530225362,0.0038476848327166726,0.010951463249078891,0.005305842267016241,0.01038223430047215,0.005362970806605514,0.008290319953161774,0.0004544951983677731,0.00799355329124977,0.008005230070964037,0.006034143292612769,0.008891752679332855,0.0010089801822315027,0.014086423631201208,0.0063717317156134455,0.012518831212213324,0.011284245671492105,0.002118951348274791,0.001674711147037658



================================================
File: results/optimal_portfolios_20250314_115801.csv
================================================
portfolio_type,expected_return,volatility,sharpe_ratio,weight_SMCI,weight_TXN,weight_WBA,weight_ADSK,weight_PLTR,weight_AMZN,weight_KLAC,weight_DXCM,weight_TTD,weight_ZM,weight_VRSN,weight_DASH,weight_NVDA,weight_LULU,weight_HSIC,weight_AMD,weight_APP,weight_CCEP,weight_ARM,weight_BIDU,weight_CTAS,weight_DOCU,weight_EA,weight_DDOG,weight_PANW,weight_AAL,weight_TSLA,weight_JBHT,weight_MNST,weight_EBAY,weight_MRVL,weight_ON,weight_AXON,weight_CEG,weight_PDD,weight_UAL,weight_LBTYA,weight_KDP,weight_CRWD,weight_EXPE,weight_CPRT,weight_GFS,weight_NCLH,weight_PYPL,weight_FAST,weight_RIVN,weight_MDLZ,weight_STX,weight_EXC,weight_MAT,weight_JD,weight_DLTR,weight_SBUX,weight_CMCSA,weight_QCOM,weight_CSCO,weight_NTAP,weight_ROP,weight_FANG,weight_SWKS,weight_ANSS,weight_COST,weight_ORLY,weight_MDB,weight_LRCX,weight_TEAM,weight_LBTYK,weight_PAYX,weight_BKNG,weight_WYNN,weight_ROST,weight_NTES,weight_META,weight_MCHP,weight_FOXA,weight_OKTA,weight_WDAY,weight_AEP,weight_BIIB,weight_FOX,weight_MSFT,weight_GILD,weight_GEHC,weight_CDNS,weight_MSTR,weight_BMRN,weight_AMGN,weight_INCY,weight_MELI,weight_PCAR,weight_QRTEA,weight_AMAT,weight_ODFL,weight_VRTX,weight_MRNA,weight_GOOG,weight_ULTA,weight_ILMN,weight_CA,weight_TCOM,weight_WDC,weight_HAS,weight_MTCH,weight_ABNB,weight_INTC,weight_ADP,weight_KHC,weight_IDXX,weight_AVGO,weight_AAPL,weight_SNPS,weight_WBD,weight_NFLX,weight_CHKP,weight_GOOGL,weight_REGN,weight_TMUS,weight_INTU,weight_MU,weight_ISRG,weight_TTWO,weight_CSGP,weight_ADI,weight_HON,weight_CTSH,weight_PTON,weight_CSX,weight_ZS,weight_LCID,weight_ASML,weight_VRSK,weight_VOD,weight_HOLX,weight_ADBE,weight_AKAM,weight_ENPH,weight_AZN,weight_LIN,weight_TSCO,weight_XEL,weight_CDW,weight_ALGN,weight_MAR,weight_SRCL,weight_SBAC,weight_XRAY,weight_PEP,weight_FTNT,weight_CHTR,weight_SIRI,weight_TRIP,weight_BKR,weight_NXPI
max_sharpe,0.14221394340003046,3.5447187204231074,0.03447775494734958,0.010414684113459551,0.0018519809621372239,0.010399773075263163,0.01162186447106415,0.01207118039280435,0.0076190408886481886,0.0015619096239006698,0.009848641361283923,0.004654906772067605,0.003414027748187681,0.003876312664337552,0.005094241875825298,0.010387309216718136,0.0041273245763354975,0.0044433039535697735,0.004317622551004219,0.0019268529573125022,0.009814259945869598,0.012497970386199125,0.002745804275815968,0.012505108634323333,0.005699133886440046,0.011431553955246592,0.006376049404084453,0.0110376482980116,0.006926505225795326,0.0037747666254407883,0.004894289920531157,0.005963582304567292,0.011096727177937745,0.00213707013716142,0.0014506255461379665,0.0006691624775852368,0.002194396472137734,0.003978255712532085,0.0020622589148212938,0.0044109894727463505,0.01015573523768026,0.005960394257144703,0.0012815181998265452,0.004342937279218873,0.012889127022809735,0.004936122992378435,0.0025746412725586574,0.01153171887806874,0.00551553410334995,0.00654830152470943,0.005415120121931687,0.006566737574472965,0.010094744147591003,0.00785404794445115,0.003121917224447427,0.008937427737140735,0.008973236439457032,0.0064474816791462945,0.01076316183444905,0.002296462641131053,0.0048770235710089765,0.0010315627366320555,0.008777688521268019,0.0024061488830419225,0.012295770702545485,0.003696533186484276,0.012779343080111229,0.011405413705925004,0.0030599410052437404,0.0020095930114594623,0.0009833006344855241,0.0020411238927525387,0.012013303253277778,0.011892407979414111,0.012341392171576076,0.01001730675083854,3.731761714598562e-05,0.0070533741131690985,0.010368750938967606,0.010853728149868968,0.006539889408505404,0.007134745175974574,0.0024561282431358996,0.012114531568644981,0.011828076318940981,0.007415319858191284,0.005395444466025421,0.004735568299386158,0.002735616690607544,0.0066127967375855055,0.005108509977705902,0.00019361889688629532,0.011864330594196306,0.00015577313809508517,0.0004752681834914054,0.002345763313608101,0.010571248859332378,0.0013739751069572952,0.0013900884091914917,0.0013157343127041022,0.005099742890430377,0.010963430619558493,0.003228464984195316,0.0009096537116472999,0.007677376785209105,0.0025861125624932154,0.011347574249142959,0.007596347561849486,5.8163807419520985e-05,0.011626177471836929,0.004789485190921902,0.007771094930248854,0.010590706710902726,0.006717378299956578,0.004139303365348205,0.012539725994077051,0.004452520813129365,0.012715862993196162,0.008197928767697288,0.011164252892034276,0.0013397549495441133,0.002651813743422383,0.005662142447400862,0.010704137755007946,0.0012383498656037717,0.010020121019169544,0.006117504749619277,0.01292492187173394,0.0077548665702073605,0.004471919801917971,0.004856965902838394,0.004669017493986771,0.0034389376456400267,0.010992575842088943,0.001756215769229504,0.0003794259447303594,0.011105951954661804,0.010041868121565618,0.0013872203217764802,0.01182827625543347,0.005202341299089382,0.011953662988949619,0.008502757831340866,0.012054222749654942,0.007539918384199092,0.006490956081286402,0.012939737813741125,0.008411446459528899,0.006155250864314424,0.009572099892274215,0.002790687452644028,0.01000376824160969,0.007908739863402693,0.007328459871238951,0.003605779913029565,0.004819922113171686
min_volatility,0.13879274419852097,3.5427408300436882,0.03353131089666981,0.0036457423622348003,0.0017482788191940128,0.004003544240760288,0.007021163178287044,0.0015610305814810748,0.011986578517650844,0.009619079621097754,0.012262185214110299,0.0021618194956838613,0.0032687101230859813,0.010207345303440248,0.0004736293863573904,0.004342278237573417,0.010066006875304425,0.010139341150614989,0.006413991512615835,0.012683585328896753,0.005986484209075159,0.008069854249201357,0.011981234116525328,0.0006520982860728434,0.009592604677577103,0.009377186301963948,0.006969425130811483,0.0020640816710912756,0.009463875463174573,0.0007741405787015825,0.005335914796679041,0.009434282355730796,0.004340086980920124,0.007102494471495463,0.011858913888481832,0.0014793876658908897,0.010289862772784701,0.001582834394360985,0.003318135049642989,0.011941488788579774,0.004129121712241343,1.8932930577684288e-05,0.0008707694807606798,0.0005570513366365084,0.010010035328405394,0.0004308259870584508,0.0016557487088036495,0.010635045057964598,0.0045325447680369686,0.008696664707768632,0.0020812048839840627,0.01154135396419677,0.003688709896926407,0.007779215211342246,0.01206338162385004,0.012547617885537075,0.004480324880818474,0.000914652201052903,0.0004112828537336981,0.008719535396259068,0.008412995788034065,0.0012634554304036285,0.008840113374489058,0.0023477281011733725,0.0013889191092472733,0.01267772002959218,0.00016741314989009273,0.010285148362869827,0.010809528249807776,0.007924949424329718,0.0056341095092389566,0.008512907583235961,0.0034820481301647715,0.0014543784852391213,0.00628245238004015,0.006844436683533501,0.012720322312217723,0.005614172404420254,0.0052590184650613304,0.006533187221264144,0.0046432803775286,0.011845480156168176,4.5078986294574344e-05,0.010918952473648992,0.0013523854666444507,0.0102965534467878,0.003086993624806299,0.0020952600642391603,0.008024334873375122,0.009722676378272344,0.006823639482194306,0.011650409967780839,0.009541472382293957,0.001831056797291041,0.00034203319273800334,0.00509853979007857,0.009588096020785948,0.009092148932240252,0.004835776440054311,0.008128188704023112,0.005263765929288047,0.01016427914991237,0.008690645089470175,0.0014632110023798002,0.012472049003974028,0.0018414175828765282,0.006887476325834645,0.012593035661667548,0.011983782818921625,0.012162461660248338,0.00657882510011971,0.0032564550586356112,0.003127392693241399,0.010129343530743214,0.001980051394616107,5.700288529778254e-05,0.012125889965860484,0.00645171429379276,0.010896386032305042,0.012265022173267479,0.00014557161027778303,0.010073095578456622,0.002896677312596543,0.010157016060608322,0.009223412845595875,0.004287266715956465,0.0037869742835470567,0.00655882217253665,0.0020830793421606794,0.011017097929727781,0.00267735828318019,0.010846548973148363,0.008845459333586528,0.0018395034812178784,0.0015514187253548668,0.009661209732858132,0.003273676150412577,0.010971279406790668,0.004121728051454238,0.007932555297294756,0.008625326548840847,0.0062706331870067055,0.01075100529534899,0.008247502713946354,0.005623456108141831,0.009631248705089922,0.00785031976057607,0.011526747501102065,0.0027275787409532974,0.003610445338288816,0.007930411107686972,0.011576107591344094,0.006447194997838878,0.008897732428146272,0.007522194762591271,0.00602206020927934
max_return,0.1516317194714123,3.99787403222885,0.03292542946832831,0.008255469713760481,0.0036766413232957613,0.0026283090287554252,0.00939868364834764,0.008535042496156654,0.0048640451650200246,0.008760529412360258,0.003913040795589216,0.010298801431924846,0.006201724944016812,0.004041353632393905,0.010600130594874305,0.011919572327287178,0.011203873158027587,0.003039287250007344,0.010228027339367195,0.007736883384486982,0.009231630847622288,0.01075240143423233,0.006895858717283097,0.0028985696529527914,0.007719562708597877,0.010233592706288397,0.010134323112451719,0.004936075672104967,0.0051003828143067025,0.008656142221984759,0.004353726806061987,4.2817861930951024e-05,0.000941129631506118,0.0037566860612830975,0.011015082165808458,0.011999156979687337,0.0066939375349598425,0.009987110700037,0.005829225869809658,0.006530543552428039,0.0059392344961734025,0.010871646555216755,0.009361018675411366,0.010482115460987788,0.006136558804433038,0.005029378614311309,0.001314565682140613,0.011266460524945473,0.006156263577365285,0.012045783728842258,0.002028153002189084,0.0024803963013131096,0.0049693745255170625,0.01069968286885303,0.005401564676469391,0.0018478731008075117,0.009200302792670463,0.0014191430316580962,0.004090531561534717,0.010216920667099887,0.0013102081077783973,0.007671080555878438,0.00858920934860627,0.004999988610205746,0.00704407594486876,0.002968627776089963,0.007001338224334274,0.010111652752916178,0.011433713108800573,0.010987194010236494,0.010093630254640376,0.01089669428817501,0.008859690615490027,0.0010270652149953314,0.0004909705075727064,0.005221691757703101,0.0031072027096849214,0.002654009882543181,0.00468840375703911,0.012190082296257027,0.0032425639721067536,0.0021807662418074775,0.0005505640642374987,0.007898104409430812,0.008948155147498837,0.004362543989743497,0.010730464651546286,0.002768939718297222,0.0010665525973380208,0.0029708302355785686,0.0041067086770973284,0.008858008680666671,0.001008982668012452,0.005829775416709331,0.011331932564200247,0.010591064443377894,0.011268666862109769,0.0059215820152857465,0.005150693048090052,0.009086813347483118,0.008198000423898542,0.002771588892219098,0.0004846610301838531,0.010592258453129855,0.004743399537455339,0.011641665024759922,0.010826533246644654,0.012045906999854156,0.004745839736074351,0.008127408058802485,0.009022804333325214,0.004737591872653817,0.009787793382278894,0.009772838247048067,1.4081774210180282e-05,0.009927857125690567,0.009450275053269402,0.001176841671739421,0.0001240408356191149,0.001656776367645974,0.009025361695837024,0.009172996089953379,0.011566771442504073,0.007128207461316082,0.012146971628901486,0.008227523375881918,0.0005401863562254641,0.004784244866012926,0.008845951126282099,0.002028870070395355,0.0012827907799302751,0.005858524232147364,0.008450966994097009,0.008353145858804829,0.0002496675562021286,0.0018452384547797628,0.00823253543753786,0.010499681651721316,0.0015753049475433056,0.004251558195402091,0.011964775586741696,0.0019708298571057574,0.005295836852437768,0.0070377071421625775,0.002036433651844244,0.003962817019300054,0.010931062603357529,0.0035234419684106737,0.002162565872966065,0.0061548176682398,0.007835140023251197,0.001977405340077148,0.0057018620266378025,0.011751825279984614,0.00899896595296551,0.011593269047156884



================================================
File: results/optimal_portfolios_20250314_115959.csv
================================================
portfolio_type,expected_return,volatility,sharpe_ratio,weight_ARM,weight_PLTR,weight_LCID,weight_ENPH,weight_DXCM,weight_HOLX,weight_QRTEA,weight_VRSK,weight_CDW,weight_EXPE,weight_GEHC,weight_WBA,weight_FANG,weight_KLAC,weight_LIN,weight_MCHP,weight_AMZN,weight_INTU,weight_CCEP,weight_NVDA,weight_OKTA,weight_WYNN,weight_ISRG,weight_ON,weight_NTES,weight_ANSS,weight_TEAM,weight_ILMN,weight_AMGN,weight_ADI,weight_ORLY,weight_SBUX,weight_AKAM,weight_RIVN,weight_ZS,weight_CTSH,weight_DLTR,weight_JD,weight_XRAY,weight_CEG,weight_CPRT,weight_MELI,weight_ZM,weight_CDNS,weight_NXPI,weight_MSFT,weight_MDLZ,weight_TRIP,weight_GILD,weight_CSCO,weight_IDXX,weight_SIRI,weight_HSIC,weight_CRWD,weight_AAPL,weight_CTAS,weight_AVGO,weight_CSX,weight_FAST,weight_MDB,weight_CSGP,weight_FOX,weight_SWKS,weight_ALGN,weight_QCOM,weight_SBAC,weight_FOXA,weight_TCOM,weight_TTD,weight_PAYX,weight_PEP,weight_MAT,weight_BIIB,weight_AXON,weight_DOCU,weight_ADP,weight_HAS,weight_LRCX,weight_BKR,weight_KDP,weight_MRVL,weight_NCLH,weight_UAL,weight_BMRN,weight_AZN,weight_ROST,weight_MSTR,weight_DASH,weight_MNST,weight_TSCO,weight_APP,weight_MTCH,weight_CHKP,weight_BIDU,weight_HON,weight_KHC,weight_EXC,weight_TTWO,weight_EA,weight_AEP,weight_META,weight_DDOG,weight_WBD,weight_JBHT,weight_CMCSA,weight_GFS,weight_COST,weight_INTC,weight_REGN,weight_AMD,weight_STX,weight_SRCL,weight_NFLX,weight_XEL,weight_AAL,weight_MU,weight_VRTX,weight_WDC,weight_PANW,weight_MAR,weight_INCY,weight_TSLA,weight_ROP,weight_CHTR,weight_PDD,weight_VOD,weight_WDAY,weight_MRNA,weight_PTON,weight_ASML,weight_SNPS,weight_LULU,weight_ABNB,weight_ADSK,weight_SMCI,weight_NTAP,weight_PCAR,weight_FTNT,weight_ULTA,weight_GOOG,weight_EBAY,weight_CA,weight_TXN,weight_ADBE,weight_TMUS,weight_VRSN,weight_BKNG,weight_PYPL,weight_GOOGL,weight_LBTYA,weight_LBTYK,weight_ODFL,weight_AMAT
max_sharpe,0.14298374051862134,0.22621734482620984,0.5436530103962757,0.01249011330535698,0.0016626293124328683,0.002031009337237302,0.0013035927372571587,0.00713817010567381,0.009320198365517418,0.006741622438029309,0.004589836127828014,0.0040732569839532825,0.0042764849777029825,0.004382501374718805,0.004645902133949569,0.006365573695200839,0.0008190764897859788,0.00833173296706863,0.004063405922222451,0.005877290543601837,0.004314226692737122,0.007201867406499242,0.009967860160464083,0.008444548633174202,0.007091231094516462,0.010908779807618296,0.0021452289212216414,0.002627914977889691,0.005487283429536072,0.0045241418143221294,0.00016930226668399992,0.00038399607630642396,0.004804229782722689,0.005541644435375203,0.004513832589470633,0.008777121711670053,0.0031329651004642937,0.0032609323048289735,0.009667412337818043,0.008976215851114196,0.00291502996761597,0.005106707349663238,0.0005712231793529708,0.008037179079731551,0.0007423939693432393,0.004717040420373021,0.008655704215606387,0.01059133585366293,0.010733957084245665,0.010622251378981297,0.008119925414892098,0.012574047578544405,0.005609841928167725,0.013093600894643393,0.0014199426025877922,0.007582313602535551,0.004310812694348337,0.011266395796305692,0.011122726295305148,0.009048672313622698,0.008736912117810101,0.008644842636976159,0.007877164757714277,0.004279200573604352,0.002778157525962511,0.010575286399158076,0.002750817339260393,0.00307545897749878,0.012544288731107276,0.008533501973950487,0.009369903230213118,0.0006819812703691272,0.002798688682620485,0.012558544739964936,0.008000102206049388,0.004331837959877592,0.01067489424626834,0.003972712541932381,0.0005026374388078787,0.006301110906097369,0.011840629344546542,0.009775014591967456,0.010061116949330574,0.0032916066484916817,0.002944615384080167,4.78970230541098e-05,0.0010798175324612986,0.007883017707533687,0.005294221965828018,0.00030076490466893674,0.0006031560230844002,0.007339602042225641,0.002652571504763743,0.010720010760573835,0.011538409074973008,0.001555958397002062,0.000642074526122551,0.013082921456346654,0.011401785432192528,0.0071433409311066525,0.007040946807545745,0.012186936859039274,0.008136587767870926,0.011377485171127001,0.004828270031841928,0.0044484381192043945,0.001735590668158921,0.003962108447688005,0.0014246968204901847,0.005989767253512488,0.010903453255451603,0.01281399418097902,0.010407634187950906,0.01191685849150654,0.007480479045472849,0.0055613283621385595,0.0017038672378591403,0.007078358713681979,0.004574953181311843,0.0062040505074381835,0.012214083544471283,0.013049310584346952,0.0090633057584694,0.008767275745053581,0.005987859802677684,0.010715352659178995,0.012661686568488177,0.00447444854368224,0.011112347260940292,0.00374631379736043,0.0030539457400867898,0.005629863762390657,0.004238483076613566,0.005170140052690995,0.011902662093978441,0.009055832612271688,0.010916510234535286,0.004978146448194546,0.012694296168650957,0.004163805243772988,0.006642858165683378,0.0004939915637992711,0.00051717113569836,0.0035972756070463264,0.012536142155158473,0.011294498078479449,0.01220389156085107,0.012820035495018435,0.010377450851369189,0.0015333439308726235,0.0012995736646281403,0.011233697561923712,0.0005487196104236481,0.0060069011712913884,0.006311975087971264,0.0041301892645643655
min_volatility,0.13621776487617293,0.2229780659456285,0.5212071617147839,0.00983539993362235,0.011808969852695906,0.0002965540220222902,0.007455803029657854,0.005613215354989796,0.007159928491849563,0.004833088300069545,0.00997484918082722,0.00026265310738090273,0.0030475920771866043,0.01129532341136354,0.011955137039589623,0.0027097941433761753,0.007100923946354405,0.007280929446426911,0.0028014135806683944,0.009050292478465215,0.0016064129488171583,0.012969278616838394,0.007995592169477667,0.0023479337470761396,0.004760334334052564,0.006798997983866151,0.0027677050034291073,0.008018792832329862,0.0013825339040273918,0.008517003447735205,0.012347115020110764,0.005075344137466745,0.00565569364826766,0.004178842663140077,0.009061775594985791,0.0004041941257985923,0.004407825023815664,0.0023497963705978323,0.010502369111105973,0.008058673803389937,0.007074524382026947,0.002463325207781263,0.008925910282266575,0.011202641611500351,0.002783931242663635,0.011846520710703117,0.007708922417572815,0.011625108027597315,0.005931852459838847,0.007294756014895236,0.006565977892306179,0.012992964994358347,0.008126653860552236,0.006812397162604243,0.012609188992089735,0.013569796325974891,0.011053418834705116,0.004761577547551906,0.011160128266461546,0.0011773385515685833,0.0038340774063009217,0.007853641349802957,0.00025494160174631945,9.354848662559864e-05,0.00012772589637965862,0.008824289004722648,0.0071708230617493745,0.01074187818433221,0.0020157621148576433,0.012872869767786864,0.003406723889560611,0.0031165172224799464,0.003554998888530434,0.01232658690046516,0.00965298713064802,0.011034794683692966,0.004709296460068371,0.004895401055362815,0.0029526593634754527,0.007308042111474267,0.00663624446451735,0.009432274988554876,0.005620634874545877,0.002381703747685015,0.010585376448649056,0.008508969604269995,0.011439034891367302,0.007901348620746948,0.001994089334491569,0.0076970080862069894,0.0006715234549594564,0.01188324687954577,0.004550208514388589,0.008284344651835819,0.010044046070213154,0.0021854621071325016,0.002586651510255948,0.00960894541029524,0.01303772849865838,0.007148100432578729,0.0014376500473836508,0.01199451646408439,0.010107693280641226,0.0007936277523924586,0.002249809632918501,0.004137084679904918,0.00833056710066776,0.002162963998025622,0.0007709482573642263,0.005441477358481283,0.00014401740924221263,0.004551037516143013,0.0010896834729393747,0.00019843355813306806,0.007134320270355377,0.0020063764249588726,0.009251496340471772,0.00481936175904586,0.005061512630379851,0.008928617322403095,0.01088435155469813,0.0012811575971608227,0.005188879218197562,0.009688783083568277,0.0030185372409330764,0.011637936346688279,0.01352733983089664,0.006198458363771336,0.010382818550206502,0.0074531163941314255,0.009480199818887198,0.0049084774611201035,0.004716287305693896,0.0033493328576292185,0.00610297205306678,0.00832730752378973,0.003266840124308643,0.009372290003307221,0.0006072678149782473,0.00981193292506636,0.00696397453027777,0.0007304097999681658,0.012682450478004655,0.009761900623754927,0.011198165013404626,0.0023052695052859754,0.006627512159965624,0.006969880526843542,0.00813862523953289,0.007185383610997649,0.011005580244043295,0.010017950757778268,0.00037099425735280116,0.005048560802914713,0.012176557391021688,0.0026817798759626284
max_return,0.15080804665515757,0.24401841780005945,0.5360580887068014,0.013269176650346257,0.007190993363110177,0.0021809698156233705,0.0033177488129635274,0.008510113266140358,0.0013270448670065287,0.0036114032337180428,0.0026474083933326806,0.012033254256608276,0.001081990667780475,0.013644213842371388,0.00856244189088865,0.0039831120456906895,0.012005378087884823,0.0030773777296139956,0.00605710993312602,0.011592439885045982,0.0075024397632039224,0.0033316634433390216,0.01183803504858598,0.0019086834873838926,0.0015793259598739697,0.0032522439015777766,0.010743414159271587,0.01006556882690643,0.005956267559647206,0.003096828526170819,0.0052639388489683775,0.0006964446687414035,0.0007998506924857475,0.010187430348614359,0.010864991944475483,0.007414086272496232,0.010961323728607164,0.004706587840259549,0.0028638581062628305,0.0051433479904373115,0.010690716910680426,0.002166428808875123,0.007547636830295524,0.002621150458837425,0.010395175791463838,0.0022235268499486522,0.010899931562118013,0.009724834076411467,0.005431018418407064,0.006722636464785057,0.009929326202744237,0.0013736228701059661,0.00620621247024965,0.009597824784691077,0.0017810317609726796,0.012484333963348934,0.0020992714861849883,0.00936750199197309,0.008266769861186024,0.009567872976002362,0.0005259072104590984,0.005003262906609251,0.013150180332210186,0.00776705811085316,0.009230262820007657,0.0043902206536061555,0.004067973645324131,0.010675929128191054,0.0075223218641468255,0.006476323413343831,0.0019372779929347004,0.007809975481557096,0.01197926063186203,0.0010766135202495933,0.008527887642374303,0.008451331995827644,0.0007617728912141405,0.007389399804434797,0.0034911940088840554,0.003999862537544261,0.008802956951715209,0.004909200080743658,0.002563369075618485,0.0003852783784953697,0.009452634446455407,0.01198152123887104,0.010723078510814844,0.0020534359565363494,0.005780745339731287,0.0007041365901054289,0.0009381644889478292,0.0030732851510159947,0.008350810406170714,0.007553468803937864,0.005498754968186022,0.01317871527301756,0.001861094712306983,0.006335505164586191,0.002329051002532081,0.0013696561774228083,0.0074837102779070335,0.008021669500621272,0.011759037620368718,0.013566282669101195,0.011148168907649702,0.0022573815645751086,0.0015002256434808526,0.006553819990771207,0.010501604076128728,0.009380724438803532,0.012992853941827377,0.005898154203126565,0.01344789520209381,0.00596107720409869,0.002276491185846695,0.013626487458297096,0.008522507108017571,0.009726592581175723,0.002350379295485979,0.0093922548033388,0.008271923442547714,0.0005217492363714503,0.010589438383954854,0.00017805411171106612,0.001906656410814685,0.008613938853573044,0.004566376925679124,0.003832802322317745,0.004951012041709818,0.009836610244125837,0.0010481007706423181,0.013194357877802204,0.005320543202701632,0.013398224925094543,0.013414482443810072,0.0009064173553470696,0.011096266965788871,0.006568517013444993,0.0077631209205146975,0.008713951135647765,0.011091506640556095,0.006126029437633836,0.0026838601895098867,0.0038522447631104233,0.0009030349828819003,0.011154305694383148,0.010153641010202274,0.010851350888588369,0.0019469113503876396,0.0009443041602481577,0.00042463084729740884,0.003257926335824558,0.0048127240575914785,0.011984165627004838,0.005362594220635294,0.009946695831142572



================================================
File: scripts/__init__.py
================================================



================================================
File: scripts/backtest_technicals.py
================================================
# backtest_technicals.py

'''
This script contains functions to backtest a technical trading strategy using vectorbt.
The backtest_trading_strategy function loads price data from the database, applies the technical strategy,
and builds a portfolio using vectorbt's Portfolio.from_signals. It then extracts performance metrics.
The update_backtesting_results function inserts the backtesting results into the SQL table backtesting_results.
The optimize_sma_windows function optimizes the SMA window parameters for a given DataFrame of price data.
The deep_dive_analysis function prints detailed portfolio statistics and displays an interactive Plotly performance plot.
'''

import os
import sqlite3
import pandas as pd
import numpy as np
import logging
import yfinance as yf
from datetime import datetime
from math import floor
import vectorbt as vbt
import plotly.io as pio

# Set Plotly default renderer to 'browser' for deep dive analysis
pio.renderers.default = 'browser'

# Opt in to future behavior for downcasting
pd.set_option('future.no_silent_downcasting', True)

# Import technical indicator functions from technical_signals.py
from technical_signals import apply_trading_strategy, update_technical_signals

# Set up logging
logging.basicConfig(filename='logs/project.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')


##############################################
# BACKTESTING & ENHANCED ANALYSIS FUNCTIONS
##############################################

def backtest_trading_strategy(db_path, starting_date='2000-01-01', investment_value=100000):
    """
    For each ticker, load price data from SQL, apply the technical strategy (using original calculations),
    and build a portfolio using vectorbt's Portfolio.from_signals.
    Then extract performance metrics.
    """
    conn = sqlite3.connect(db_path)
    price_df = pd.read_sql_query(
        "SELECT ticker, date, close, volume FROM nasdaq_100_daily_prices", 
        conn, parse_dates=['date']
    )
    conn.close()
    
    results = []
    tickers = price_df['ticker'].unique()
    
    for ticker in tickers:
        df = price_df[(price_df['ticker'] == ticker) & (price_df['date'] >= starting_date)].copy()
        if df.empty:
            continue
        df = df.sort_values('date').reset_index(drop=True)
        df = apply_trading_strategy(df)
        df = df.dropna(subset=['close', 'overall_signal'])
        if df.empty:
            continue
        
        # Define entries and exits: entry when overall_signal turns 1, exit when it turns -1.
        entries = (df['overall_signal'] == 1) & (df['overall_signal'].shift(1) != 1)
        exits = (df['overall_signal'] == -1) & (df['overall_signal'].shift(1) != -1)
        
        # Build the portfolio using vectorbt
        portfolio = vbt.Portfolio.from_signals(
            df['close'],
            entries,
            exits,
            init_cash=investment_value,
            freq='1D'
        )
        
        # Retrieve performance metrics
        total_return = portfolio.total_return()    # e.g., 1.1 means 110%
        profit = total_return * investment_value
        profit_pct = total_return * 100
        sharpe_ratio = portfolio.sharpe_ratio()
        max_drawdown = portfolio.max_drawdown()
        
        # Benchmark: SPY buy-and-hold strategy
        spy_df = price_df[(price_df['ticker'] == 'SPY') & (price_df['date'] >= starting_date)].copy()
        spy_df = spy_df.sort_values('date').reset_index(drop=True)
        if not spy_df.empty:
            spy_return = (spy_df['close'].iloc[-1] / spy_df['close'].iloc[0]) - 1
            spy_profit_pct = spy_return * 100
        else:
            spy_profit_pct = None
        
        benchmark_comparison = profit_pct - spy_profit_pct if spy_profit_pct is not None else None
        
        results.append({
            'Ticker': ticker,
            'Profit Gained': profit,
            'Profit Percentage': profit_pct,
            'Benchmark Profit Comparison': benchmark_comparison,
            'Sharpe Ratio': sharpe_ratio,
            'Max Drawdown': max_drawdown
        })
    
    return pd.DataFrame(results)


def update_backtesting_results(db_path, results_df, test_date, strategy_name):
    """
    Inserts backtesting results into the SQL table backtesting_results.
    """
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        insert_query = """
            INSERT INTO backtesting_results (test_date, strategy_name, total_return, sharpe_ratio, max_drawdown)
            VALUES (?, ?, ?, ?, ?)
        """
        for idx, row in results_df.iterrows():
            sname = f"{strategy_name} - {row['Ticker']}"
            cursor.execute(insert_query, (test_date, sname, row['Profit Gained'], row['Sharpe Ratio'], row['Max Drawdown']))
        conn.commit()
        conn.close()
        print("Backtesting results updated in SQL table backtesting_results.")
    except Exception as e:
        logging.error(f"Error updating backtesting results: {e}")


def optimize_sma_windows(df, sma_short_range, sma_long_range, investment_value=100000):
    """
    Example optimization: loop over SMA window combinations (using original indicator calculations).
    """
    results = []
    for sma_short in sma_short_range:
        for sma_long in sma_long_range:
            if sma_short >= sma_long:
                continue
            
            df_opt = df.copy()
            # Compute SMAs using original methods
            df_opt['SMA_short'] = df_opt['close'].rolling(window=sma_short).mean()
            df_opt['SMA_long'] = df_opt['close'].rolling(window=sma_long).mean()
            signal = df_opt['SMA_short'] > df_opt['SMA_long']
            entries = signal & (~signal.shift(1).fillna(False))
            exits = (~signal) & (signal.shift(1).fillna(False))
            
            portfolio = vbt.Portfolio.from_signals(
                df_opt['close'],
                entries,
                exits,
                init_cash=investment_value,
                freq='1D'
            )
            total_return = portfolio.total_return()
            results.append({
                'sma_short': sma_short,
                'sma_long': sma_long,
                'total_return': total_return,
                'sharpe': portfolio.sharpe_ratio(),
                'max_drawdown': portfolio.max_drawdown()
            })
    return pd.DataFrame(results)


def deep_dive_analysis(portfolio):
    """
    Prints detailed portfolio statistics and displays an interactive Plotly performance plot.
    """
    stats = portfolio.stats()
    print("\nDeep Dive Portfolio Statistics:")
    print(stats)
    fig = portfolio.plot()
    fig.update_layout(title="Deep Dive Analysis - Portfolio Performance")
    fig.show()


##############################################
# MAIN EXECUTION
##############################################

if __name__ == "__main__":
    db_path = os.path.join("database", "data.db")
    
    # Step 1: Update technical signals using original indicator calculations
    update_technical_signals(db_path)
    
    # Step 2: Run backtesting via vectorbt
    returns_df = backtest_trading_strategy(db_path, starting_date='2000-01-01', investment_value=100000)
    print("Backtesting Results:")
    print(returns_df)
    
    # Step 3: Update backtesting results in SQL
    test_date = datetime.now().strftime('%Y-%m-%d')
    strategy_name = "Vectorbt Technical Strategy"
    update_backtesting_results(db_path, returns_df, test_date, strategy_name)
    
    # Step 4: Merge Sector Information using yfinance
    tickers = returns_df['Ticker'].unique()
    sector_list = []
    for t in tickers:
        try:
            tickerdata = yf.Ticker(t)
            sector = tickerdata.info.get('sector', 'Unknown')
        except Exception as e:
            sector = 'Unknown'
        sector_list.append(sector)
    sector_df = pd.DataFrame({'Ticker': tickers, 'Sector': sector_list})
    returns_df = returns_df.merge(sector_df, on='Ticker', how='left')
    print("\nResults with Sector Information:")
    print(returns_df)
    
    # Step 5: Display top 25 stocks and sector counts
    ranked_df = returns_df.sort_values(by='Profit Gained', ascending=False).head(25)
    print("\nTop 25 Stocks:")
    print(ranked_df)
    print("\nTop 25 Performing Sectors:")
    print(ranked_df['Sector'].value_counts())
    print("\nTotal Initial Sector Counts:")
    print(returns_df['Sector'].value_counts())
    
    # --- Additional: Parameter Optimization and Deep Dive Analysis ---
    print("\nStarting SMA Parameter Optimization on AAPL:")
    conn = sqlite3.connect(db_path)
    aapl_df = pd.read_sql_query(
        "SELECT date, close, volume FROM nasdaq_100_daily_prices WHERE ticker = 'AAPL' AND date >= '2000-01-01' ORDER BY date", 
        conn, parse_dates=['date']
    )
    conn.close()
    aapl_df = aapl_df.sort_values('date').reset_index(drop=True)
    
    # Define SMA parameter ranges
    sma_short_range = np.arange(3, 15)
    sma_long_range = np.arange(15, 50, 5)
    opt_results = optimize_sma_windows(aapl_df, sma_short_range, sma_long_range, investment_value=100000)
    print("\nOptimization Results for AAPL (SMA windows):")
    print(opt_results.sort_values(by='total_return', ascending=False).head(5))
    
    # Deep dive analysis using best parameters from optimization
    best = opt_results.sort_values(by='total_return', ascending=False).iloc[0]
    best_sma_short = int(best['sma_short'])
    best_sma_long = int(best['sma_long'])
    print(f"\nBest SMA parameters: Short = {best_sma_short}, Long = {best_sma_long}")
    
    # Rebuild signals for AAPL using best SMA parameters (using original indicator calculations)
    aapl_df['SMA_short'] = aapl_df['close'].rolling(window=best_sma_short).mean()
    aapl_df['SMA_long'] = aapl_df['close'].rolling(window=best_sma_long).mean()
    signal = aapl_df['SMA_short'] > aapl_df['SMA_long']
    entries = signal & (~signal.shift(1).fillna(False))
    exits = (~signal) & (signal.shift(1).fillna(False))
    
    best_portfolio = vbt.Portfolio.from_signals(
        aapl_df['close'],
        entries,
        exits,
        init_cash=100000,
        freq='1D'
    )
    deep_dive_analysis(best_portfolio)



================================================
File: scripts/cleanup_database.py
================================================
#!/usr/bin/env python
"""
Script to clean up duplicate entries in the fundamental analysis tables.
"""

import os
import sqlite3
import logging
from datetime import datetime

# Configure logging
log_dir = 'logs'
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f'cleanup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)

def cleanup_table(conn, table_name):
    """
    Remove duplicate entries from the specified table, keeping only the most recent entry for each ticker.
    """
    cursor = conn.cursor()
    
    # Get list of tickers with duplicates
    cursor.execute(f"""
    SELECT ticker, COUNT(*) as count
    FROM {table_name}
    GROUP BY ticker
    HAVING count > 1
    """)
    
    duplicates = cursor.fetchall()
    logging.info(f"Found {len(duplicates)} tickers with duplicate entries in {table_name}")
    
    # For each ticker with duplicates, keep only the most recent entry
    for ticker, count in duplicates:
        logging.info(f"Cleaning up {count} duplicate entries for {ticker}")
        
        # Create a temporary table with the most recent entry for each ticker
        cursor.execute(f"""
        CREATE TEMPORARY TABLE temp_{table_name} AS
        SELECT *
        FROM {table_name}
        WHERE ticker = ?
        ORDER BY analysis_date DESC
        LIMIT 1
        """, (ticker,))
        
        # Delete all entries for this ticker
        cursor.execute(f"""
        DELETE FROM {table_name}
        WHERE ticker = ?
        """, (ticker,))
        
        # Insert the most recent entry back
        cursor.execute(f"""
        INSERT INTO {table_name}
        SELECT * FROM temp_{table_name}
        """)
        
        # Drop the temporary table
        cursor.execute(f"""
        DROP TABLE temp_{table_name}
        """)
    
    conn.commit()
    logging.info(f"Cleanup completed for {table_name}")

def main():
    """Main function to clean up the database."""
    # Connect to the database
    db_path = os.path.join('database', 'data.db')
    conn = sqlite3.connect(db_path)
    
    # Clean up CAPM table
    cleanup_table(conn, 'fundamental_analysis_capm')
    
    # Clean up Fama-French table
    cleanup_table(conn, 'fundamental_analysis_ff')
    
    # Close connection
    conn.close()
    
    logging.info("Database cleanup completed successfully")

if __name__ == "__main__":
    main()



================================================
File: scripts/dash_app.py
================================================
import os
import sqlite3
import pandas as pd
import dash
from dash import dcc, html, dash_table, Input, Output
import plotly.graph_objects as go
import logging
from datetime import datetime

# Import your technical signal function
from technical_signals import apply_trading_strategy
# Import your backtest function (just for loading backtest_results_df)
from backtest_technicals import backtest_trading_strategy

# ---------------------------------------------------------------------
# Logging Setup
# ---------------------------------------------------------------------
logging.basicConfig(
    filename='logs/dash_app.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# ---------------------------------------------------------------------
# Constants and Database Path
# ---------------------------------------------------------------------
DB_PATH = os.path.join("database", "data.db")
START_DATE = '2000-01-01'
INIT_VALUE = 100000

# ---------------------------------------------------------------------
# Run Backtest to Get Results (for the table)
# ---------------------------------------------------------------------
backtest_results_df = backtest_trading_strategy(
    db_path=DB_PATH,
    starting_date=START_DATE,
    investment_value=INIT_VALUE
)
if backtest_results_df is None:
    backtest_results_df = pd.DataFrame()

# ---------------------------------------------------------------------
# Fetch all tickers from the database for dropdown
# ---------------------------------------------------------------------
try:
    conn = sqlite3.connect(DB_PATH)
    ticker_query = "SELECT DISTINCT ticker FROM nasdaq_100_daily_prices"
    df_tickers = pd.read_sql_query(ticker_query, conn)
    conn.close()
    tickers = sorted(df_tickers['ticker'].unique().tolist())
except Exception as e:
    logging.error(f"Error loading ticker list: {e}")
    tickers = []

# ---------------------------------------------------------------------
# Define Dash App
# ---------------------------------------------------------------------
app = dash.Dash(__name__)
server = app.server

app.layout = html.Div([
    html.H1("Technical Strategy Dashboard"),
    
    dcc.Tabs(id='tabs', value='tab-technical', children=[
        dcc.Tab(label='Technical Strategy', value='tab-technical', children=[
            html.Br(),

            # Sorting Options for the Backtest Table
            html.Div([
                html.Label("Sort By:"),
                dcc.Dropdown(
                    id='sort-dropdown',
                    options=[{'label': col, 'value': col} for col in backtest_results_df.columns],
                    value='Profit Percentage',
                    clearable=False
                ),
                dcc.RadioItems(
                    id='sort-order',
                    options=[
                        {'label': 'Ascending', 'value': 'asc'},
                        {'label': 'Descending', 'value': 'desc'}
                    ],
                    value='desc',
                    inline=True
                ),
            ], style={'width': '50%', 'margin-bottom': '20px'}),

            # Backtest Results Table
            dash_table.DataTable(
                id='backtest-table',
                columns=[{"name": col, "id": col} for col in backtest_results_df.columns],
                data=backtest_results_df.to_dict('records'),
                page_size=10,
                style_table={'overflowX': 'auto'},
                style_cell={'textAlign': 'center'}
            ),
            html.Br(),

            # Ticker Selection
            html.Div([
                html.Label("Select Ticker:"),
                dcc.Dropdown(
                    id='ticker-dropdown',
                    options=[{'label': t, 'value': t} for t in tickers],
                    value=tickers[0] if tickers else None,
                    clearable=False
                )
            ], style={'width': '25%', 'display': 'inline-block'}),
            
            # Main Graph: Ticker + Benchmarks + Signals
            dcc.Graph(id='strategy-graph'),
        ])
    ]),
    
    html.Div(id='additional-output')
])

# ---------------------------------------------------------------------
# Callbacks
# ---------------------------------------------------------------------

# Sort the backtest table
@app.callback(
    Output('backtest-table', 'data'),
    [Input('sort-dropdown', 'value'),
     Input('sort-order', 'value')]
)
def sort_backtest_table(sort_col, sort_order):
    if backtest_results_df.empty or sort_col not in backtest_results_df.columns:
        return backtest_results_df.to_dict('records')
    sorted_df = backtest_results_df.sort_values(by=sort_col, ascending=(sort_order=='asc'))
    return sorted_df.to_dict('records')


@app.callback(
    Output('strategy-graph', 'figure'),
    Input('ticker-dropdown', 'value')
)
def update_graph(selected_ticker):
    """
    1. Load the chosen ticker's data from the database (including volume).
    2. Apply your custom technical strategy to get 'overall_signal'.
    3. Convert 'overall_signal' to boolean buy/sell signals.
    4. Plot the % change of the ticker vs. SPY and ^NDX plus buy/sell markers.
    """
    fig = go.Figure()

    if not selected_ticker:
        return fig

    # --------------------------------------------------
    # 1) Load Ticker Data from DB
    # --------------------------------------------------
    try:
        conn = sqlite3.connect(DB_PATH)
        query = f"""
            SELECT date, close, volume
            FROM nasdaq_100_daily_prices
            WHERE ticker = '{selected_ticker}'
            ORDER BY date
        """
        df_ticker = pd.read_sql_query(query, conn, parse_dates=['date'])
        conn.close()
    except Exception as e:
        logging.error(f"Error loading data for {selected_ticker}: {e}")
        return fig
    
    if df_ticker.empty:
        return fig

    # --------------------------------------------------
    # 2) Apply Trading Strategy
    # --------------------------------------------------
    df_ticker = df_ticker.sort_values(by='date').reset_index(drop=True)
    df_ticker = apply_trading_strategy(df_ticker)  # from technical_signals.py

    # --------------------------------------------------
    # 3) Convert overall_signal to buy/sell booleans
    #    overall_signal == 1 => Buy
    #    overall_signal == -1 => Sell
    # --------------------------------------------------
    df_ticker['buy_signal'] = (
        (df_ticker['overall_signal'] == 1) &
        (df_ticker['overall_signal'].shift(1) != 1)
    )
    df_ticker['sell_signal'] = (
        (df_ticker['overall_signal'] == -1) &
        (df_ticker['overall_signal'].shift(1) != -1)
    )

    # --------------------------------------------------
    # 4) Compute % change for the Ticker
    # --------------------------------------------------
    df_ticker['pct_change'] = (df_ticker['close'] / df_ticker['close'].iloc[0] - 1) * 100

    # --------------------------------------------------
    # 5) Load Benchmarks (SPY and ^NDX) for the same dates
    # --------------------------------------------------
    try:
        conn = sqlite3.connect(DB_PATH)
        bench_df = pd.read_sql_query(
            """
            SELECT ticker, date, close
            FROM nasdaq_100_daily_prices
            WHERE ticker IN ('SPY', '^NDX')
            ORDER BY date
            """,
            conn, parse_dates=['date']
        )
        conn.close()
    except Exception as e:
        logging.error(f"Error loading benchmark data: {e}")
        bench_df = pd.DataFrame()

    # If we have benchmark data, compute % change from each series start
    if not bench_df.empty:
        # SPY
        spy_df = bench_df[bench_df['ticker'] == 'SPY'].copy()
        spy_df = spy_df.sort_values(by='date').reset_index(drop=True)
        if not spy_df.empty:
            spy_df['pct_change'] = (spy_df['close'] / spy_df['close'].iloc[0] - 1) * 100

        # ^NDX
        ndx_df = bench_df[bench_df['ticker'] == '^NDX'].copy()
        ndx_df = ndx_df.sort_values(by='date').reset_index(drop=True)
        if not ndx_df.empty:
            ndx_df['pct_change'] = (ndx_df['close'] / ndx_df['close'].iloc[0] - 1) * 100
    else:
        spy_df = pd.DataFrame()
        ndx_df = pd.DataFrame()

    # --------------------------------------------------
    # 6) Build the Plotly Figure
    # --------------------------------------------------
    # Plot Ticker's % change
    fig.add_trace(go.Scatter(
        x=df_ticker['date'],
        y=df_ticker['pct_change'],
        mode='lines',
        name=f"{selected_ticker} % Change"
    ))

    # Plot SPY
    if not spy_df.empty:
        fig.add_trace(go.Scatter(
            x=spy_df['date'],
            y=spy_df['pct_change'],
            mode='lines',
            name="SPY Benchmark",
            line=dict(color='orange', dash='dash')
        ))

    # Plot ^NDX
    if not ndx_df.empty:
        fig.add_trace(go.Scatter(
            x=ndx_df['date'],
            y=ndx_df['pct_change'],
            mode='lines',
            name="NASDAQ Benchmark",
            line=dict(color='purple', dash='dot')
        ))

    # Overlay Buy Signals
    buys = df_ticker[df_ticker['buy_signal'] == True]
    if not buys.empty:
        fig.add_trace(go.Scatter(
            x=buys['date'],
            y=buys['pct_change'],
            mode='markers',
            name='Buy Signal',
            marker=dict(symbol='triangle-up', color='green', size=10)
        ))

    # Overlay Sell Signals
    sells = df_ticker[df_ticker['sell_signal'] == True]
    if not sells.empty:
        fig.add_trace(go.Scatter(
            x=sells['date'],
            y=sells['pct_change'],
            mode='markers',
            name='Sell Signal',
            marker=dict(symbol='triangle-down', color='red', size=10)
        ))

    fig.update_layout(
        title=f"Performance Comparison for {selected_ticker} with Trading Signals",
        yaxis_title="Percentage Change (%)",
        xaxis=dict(
            rangeselector=dict(
                buttons=[
                    dict(count=1, label="1m", step="month", stepmode="backward"),
                    dict(count=6, label="6m", step="month", stepmode="backward"),
                    dict(count=1, label="YTD", step="year", stepmode="todate"),
                    dict(count=1, label="1y", step="year", stepmode="backward"),
                    dict(step="all")
                ]
            ),
            rangeslider=dict(visible=True),
            type="date"
        )
    )

    return fig

# ---------------------------------------------------------------------
# Run the Dash App
# ---------------------------------------------------------------------
if __name__ == '__main__':
    app.run_server(debug=True)



================================================
File: scripts/db_setup.py
================================================
import sqlite3
import os
import logging

logging.basicConfig(filename='logs/project.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

def create_connection(db_file: str):
    try:
        conn = sqlite3.connect(db_file)
        logging.info("Connected to database.")
        return conn
    except sqlite3.Error as e:
        logging.error(f"Database connection failed: {e}")
        raise

def setup_database(conn, schema_file: str):
    try:
        with open(schema_file, 'r') as f:
            schema_sql = f.read()
        conn.executescript(schema_sql)
        conn.commit()
        logging.info("Database schema created/updated successfully.")
    except Exception as e:
        logging.error(f"Error setting up database: {e}")
        raise

if __name__ == "__main__":
    db_path = os.path.join("database", "data.db")
    schema_path = os.path.join("database", "schema.sql")
    conn = create_connection(db_path)
    setup_database(conn, schema_path)
    conn.close()



================================================
File: scripts/db_utils.py
================================================
## db_utils.py

import sqlite3
import logging
from typing import List, Tuple

logging.basicConfig(filename='logs/nq_tickers.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def create_connection(db_file: str):
    """Create and return a database connection."""
    try:
        conn = sqlite3.connect(db_file)
        logging.info("Connected to database.")
        return conn
    except sqlite3.Error as e:
        logging.error(f"Database connection failed: {e}")
        raise

def execute_query(conn, query: str, params: Tuple = ()):
    """Execute a single query with optional parameters."""
    try:
        cursor = conn.cursor()
        cursor.execute(query, params)
        conn.commit()
        logging.info(f"Executed query: {query}")
    except sqlite3.Error as e:
        logging.error(f"Error executing query: {e}")
        raise

def create_table(conn, table_name: str, columns: List[Tuple[str, str]]):
    """Create a table dynamically with specified columns."""
    columns_str = ", ".join([f"{name} {type}" for name, type in columns])
    query = f"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {columns_str})"
    execute_query(conn, query)
    logging.info(f"Created table {table_name}")

def insert_data(conn, table_name: str, columns: List[str], data: List[Tuple]):
    """Insert multiple rows of data into a table."""
    placeholders = ", ".join(["?" for _ in columns])
    columns_str = ", ".join(columns)
    query = f"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})"
    try:
        cursor = conn.cursor()
        cursor.executemany(query, data)
        conn.commit()
        logging.info(f"Inserted {len(data)} records into {table_name}")
    except sqlite3.Error as e:
        logging.error(f"Error inserting data into {table_name}: {e}")
        raise



================================================
File: scripts/fetch_price.py
================================================
## fetch_price.py

import sqlite3
import datetime
import logging
import pandas as pd
import yfinance as yf
from time import sleep
from typing import List, Optional

# Set up logging
logging.basicConfig(
    filename='logs/nq_tickers_price.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def get_active_tickers(conn) -> List[str]:
    """Get list of unique tickers from the database."""
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT ticker FROM nasdaq_100_tickers")
    return [row[0] for row in cursor.fetchall()]

def fetch_price_data(ticker: str, start_date: str, end_date: str, retries: int = 3) -> Optional[pd.DataFrame]:
    """Fetch price data with retry mechanism."""
    for attempt in range(retries):
        try:
            stock = yf.Ticker(ticker)
            df = stock.history(start=start_date, end=end_date, interval='1d')
            if df.empty:
                logging.warning(f"No data available for {ticker} between {start_date} and {end_date}")
                return None
            return df[['Close', 'Volume']]  # Only keep required columns
        except Exception as e:
            if attempt == retries - 1:
                logging.error(f"Failed to fetch data for {ticker} after {retries} attempts: {e}")
                return None
            logging.warning(f"Attempt {attempt + 1} failed for {ticker}: {e}")
            sleep(1)  # Wait before retry

def store_price_data(conn, ticker: str, df: pd.DataFrame):
    """Store price data in the database."""
    try:
        cursor = conn.cursor()
        # Prepare data for insertion
        data = [(ticker, date.strftime('%Y-%m-%d'), row['Close'], row['Volume'])
                for date, row in df.iterrows()]
        # Use INSERT OR REPLACE to handle duplicates
        cursor.executemany("""
            INSERT OR REPLACE INTO nasdaq_100_daily_prices (ticker, date, close, volume)
            VALUES (?, ?, ?, ?)
        """, data)
        conn.commit()
        logging.info(f"Successfully stored {len(data)} price points for {ticker}")
    except Exception as e:
        logging.error(f"Error storing price data for {ticker}: {e}")
        conn.rollback()

def main():
    try:
        # Connect to database
        conn = sqlite3.connect('database/data.db')
        
        # Get unique tickers from your existing table of NASDAQ-100 companies
        tickers = get_active_tickers(conn)
        logging.info(f"Found {len(tickers)} unique tickers to process")
        
        # Define date range for price data
        start_date = '2016-01-01'
        end_date = '2024-12-31'
        
        # Process each active ticker
        for ticker in tickers:
            df = fetch_price_data(ticker, start_date, end_date)
            if df is not None:
                store_price_data(conn, ticker, df)
            sleep(0.5)  # Prevent rate limiting
        
        # --- Now also fetch baseline index data ---
        baseline_tickers = ['SPY', '^NDX']  # SPY ETF and Nasdaq-100 index (Yahoo ticker)
        for ticker in baseline_tickers:
            df = fetch_price_data(ticker, start_date, end_date)
            if df is not None:
                store_price_data(conn, ticker, df)
            sleep(0.5)
        
        conn.close()
        logging.info("Price data fetch completed successfully")
    except Exception as e:
        logging.error(f"Main process failed: {e}")
        raise

if __name__ == "__main__":
    main()



================================================
File: scripts/fetch_tickers.py
================================================
## fetch_tickers.py

import pandas as pd
import sqlite3
import logging
from datetime import datetime

# Set up logging with more detailed format
logging.basicConfig(
    filename='logs/nq_tickers.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def setup_database():
    """Create database connection and required tables."""
    try:
        conn = sqlite3.connect('database/data.db')
        cursor = conn.cursor()
        
        # Create table for NASDAQ-100 tickers with better constraints
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS nasdaq_100_tickers (
            id INTEGER PRIMARY KEY,
            date TEXT,
            ticker TEXT,
            UNIQUE(date, ticker)
        )
        ''')
        conn.commit()
        return conn
    except Exception as e:
        logging.error(f"Database setup failed: {e}")
        raise

def get_nasdaq100_tickers():
    """Get current Nasdaq-100 tickers (hardcoded list as of March 2025)."""
    # Current Nasdaq-100 components as of March 2025
    tickers = [
        'AAPL', 'MSFT', 'AMZN', 'NVDA', 'GOOGL', 'GOOG', 'META', 'TSLA', 'AVGO', 'ADBE', 
        'COST', 'PEP', 'CSCO', 'NFLX', 'CMCSA', 'AMD', 'TMUS', 'INTC', 'INTU', 'QCOM', 
        'TXN', 'AMAT', 'AMGN', 'HON', 'SBUX', 'ISRG', 'ADI', 'MDLZ', 'GILD', 'REGN', 
        'ADP', 'VRTX', 'PANW', 'KLAC', 'LRCX', 'SNPS', 'ASML', 'CDNS', 'MRVL', 'BKNG', 
        'ABNB', 'ADSK', 'ORLY', 'FTNT', 'CTAS', 'MELI', 'MNST', 'PAYX', 'KDP', 'PCAR', 
        'CRWD', 'DXCM', 'CHTR', 'LULU', 'NXPI', 'MCHP', 'WDAY', 'CPRT', 'ODFL', 'ROST', 
        'FAST', 'EXC', 'BIIB', 'CSGP', 'ANSS', 'CTSH', 'DDOG', 'IDXX', 'VRSK', 'TEAM', 
        'DLTR', 'ILMN', 'ZS', 'ALGN', 'MTCH', 'FANG', 'ENPH', 'GEHC', 'DASH', 'SGEN', 
        'SIRI', 'CCEP', 'SPLK', 'TTWO', 'VRSN', 'SWKS', 'AEP', 'WBD', 'XEL', 'CSX', 
        'FISV', 'ATVI', 'MDB', 'PYPL', 'LCID', 'RIVN', 'TTD', 'SMCI', 'PLTR', 'MSTR'
    ]
    return tickers

def fetch_and_store_tickers(conn):
    """Fetch and store current NASDAQ-100 tickers with error handling."""
    cursor = conn.cursor()
    current_date = datetime.now().strftime('%Y-%m-%d')
    
    try:
        # Get current tickers
        tickers = get_nasdaq100_tickers()
        if not tickers:
            logging.error("No tickers retrieved")
            return
            
        # Store tickers with timestamp
        for ticker in tickers:
            cursor.execute("""
                INSERT OR REPLACE INTO nasdaq_100_tickers (date, ticker)
                VALUES (?, ?)
            """, (current_date, ticker))
        
        conn.commit()
        logging.info(f"Successfully stored {len(tickers)} tickers for {current_date}")
        
    except Exception as e:
        logging.error(f"Error in fetch_and_store_tickers: {e}")
        conn.rollback()
        raise

if __name__ == "__main__":
    try:
        conn = setup_database()
        fetch_and_store_tickers(conn)
        conn.close()
        logging.info("Ticker fetch process completed successfully")
    except Exception as e:
        logging.error(f"Main process failed: {e}")
        raise



================================================
File: scripts/fundamentals.py
================================================
#!/usr/bin/env python3
"""
Fundamental analysis module for quantitative investment strategy.
Implements CAPM and Fama-French models for expected returns estimation.
"""

import os
import sys
import sqlite3
import logging
import pandas as pd
import numpy as np
import yfinance as yf
from datetime import datetime
import statsmodels.api as sm
from typing import Dict, Tuple, Optional, List, Union

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/fundamentals.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

# Cache for downloaded data
_CACHE = {
    'market_data': {},
    'risk_free_data': {},
    'ff_factors': {}
}

def get_price_data(conn, ticker: str, start_date: str, end_date: str) -> pd.DataFrame:
    """Get price data for a ticker from the database."""
    try:
        query = f"""
        SELECT date, close, volume
        FROM nasdaq_100_daily_prices
        WHERE ticker = '{ticker}'
        AND date BETWEEN '{start_date}' AND '{end_date}'
        ORDER BY date
        """
        logging.info(f"Executing SQL: {query}")
        df = pd.read_sql_query(query, conn)
        
        logging.info(f"Retrieved {len(df)} rows of price data for {ticker}")
        
        if df.empty:
            return pd.DataFrame()
        
        # Convert date to datetime and handle duplicates
        df['date'] = pd.to_datetime(df['date'])
        df = df.sort_values('date').drop_duplicates('date', keep='last')
        df.set_index('date', inplace=True)
        
        # Rename columns to match yfinance format
        df.rename(columns={'close': 'Close', 'volume': 'Volume'}, inplace=True)
        
        return df
    except Exception as e:
        logging.error(f"Error getting price data for {ticker}: {e}")
        return pd.DataFrame()

def get_market_data(start_date: str, end_date: str) -> pd.DataFrame:
    """Get market data (S&P 500 as a proxy) with caching."""
    cache_key = f"{start_date}_{end_date}"
    if cache_key in _CACHE['market_data']:
        return _CACHE['market_data'][cache_key]
    
    try:
        logging.info(f"Downloading market data from {start_date} to {end_date}")
        market_data = yf.download('^GSPC', start=start_date, end=end_date)
        
        if not market_data.empty:
            _CACHE['market_data'][cache_key] = market_data
            
        return market_data
    except Exception as e:
        logging.error(f"Error getting market data: {e}")
        return pd.DataFrame()

def get_risk_free_rate(start_date: str, end_date: str) -> pd.DataFrame:
    """Get risk-free rate data (13-week Treasury bill) with caching."""
    cache_key = f"{start_date}_{end_date}"
    if cache_key in _CACHE['risk_free_data']:
        return _CACHE['risk_free_data'][cache_key]
    
    try:
        adjusted_end_date = (pd.to_datetime(end_date) + pd.Timedelta(days=1)).strftime('%Y-%m-%d')
        logging.info(f"Downloading risk-free rate data")
        rf_data = yf.download('^IRX', start=start_date, end=adjusted_end_date)
        
        if rf_data.empty:
            return pd.DataFrame()
            
        # Convert annual rate to daily rate
        if isinstance(rf_data.columns, pd.MultiIndex):
            close_values = rf_data.loc[:, ('Close', slice(None))].iloc[:, 0]
            rf_daily = close_values / 100 / 252
            rf_data = pd.DataFrame({'daily_rate': rf_daily})
        else:
            rf_data['daily_rate'] = rf_data['Close'] / 100 / 252
        
        if not rf_data.empty:
            _CACHE['risk_free_data'][cache_key] = rf_data
            
        return rf_data
    except Exception as e:
        logging.error(f"Error getting risk-free rate: {e}")
        return pd.DataFrame()

def get_fama_french_factors(start_date: str, end_date: str) -> pd.DataFrame:
    """Get Fama-French factors using ETFs as proxies with caching."""
    cache_key = f"{start_date}_{end_date}"
    if cache_key in _CACHE['ff_factors']:
        return _CACHE['ff_factors'][cache_key]
    
    try:
        # Use yfinance to get French data (using ETFs as proxies)
        logging.info(f"Downloading Fama-French factor proxies")
        
        # Get ETF data for proxies
        iwm = yf.download('IWM', start=start_date, end=end_date)['Close']  # Small cap
        spy = yf.download('SPY', start=start_date, end=end_date)['Close']  # Large cap
        iwd = yf.download('IWD', start=start_date, end=end_date)['Close']  # Value
        iwf = yf.download('IWF', start=start_date, end=end_date)['Close']  # Growth
        
        # Calculate returns and factors
        iwm_ret = iwm.pct_change().dropna()
        spy_ret = spy.pct_change().dropna()
        iwd_ret = iwd.pct_change().dropna()
        iwf_ret = iwf.pct_change().dropna()
        
        # Extract Series values if they're DataFrames
        if isinstance(iwm_ret, pd.DataFrame): iwm_ret = iwm_ret.iloc[:, 0]
        if isinstance(spy_ret, pd.DataFrame): spy_ret = spy_ret.iloc[:, 0]
        if isinstance(iwd_ret, pd.DataFrame): iwd_ret = iwd_ret.iloc[:, 0]
        if isinstance(iwf_ret, pd.DataFrame): iwf_ret = iwf_ret.iloc[:, 0]
            
        # Size factor (SMB) and Value factor (HML)
        smb_proxy = iwm_ret - spy_ret
        hml_proxy = iwd_ret - iwf_ret
        
        # Get risk-free rate
        rf_data = get_risk_free_rate(start_date, end_date)
        
        # Combine factors
        factors = pd.DataFrame({
            'SMB': smb_proxy,
            'HML': hml_proxy
        })
        
        # Add risk-free rate if available
        if 'daily_rate' in rf_data.columns:
            rf_series = rf_data['daily_rate']
            factors = factors.join(rf_series, how='left', rsuffix='_rf')
            factors.rename(columns={'daily_rate': 'RF'}, inplace=True)
        
        # Drop NaN values
        factors = factors.dropna()
        
        if not factors.empty:
            _CACHE['ff_factors'][cache_key] = factors
            
        return factors
    except Exception as e:
        logging.error(f"Error getting Fama-French factors: {e}")
        return pd.DataFrame()

def calculate_returns(prices: pd.DataFrame) -> pd.Series:
    """Calculate daily returns from price data."""
    try:
        if isinstance(prices.columns, pd.MultiIndex):
            close_values = prices.loc[:, ('Close', slice(None))].iloc[:, 0]
            returns = close_values.pct_change().dropna()
            return returns
        elif 'Close' in prices.columns:
            returns = prices['Close'].pct_change().dropna()
            return returns
        elif 'close' in prices.columns:
            returns = prices['close'].pct_change().dropna()
            return returns
        else:
            logging.warning("No close/Close column found in price data")
            return pd.Series()
    except Exception as e:
        logging.error(f"Error calculating returns: {e}")
        return pd.Series()

def validate_data(stock_returns, market_returns, risk_free_rate):
    """Validate and align data for analysis."""
    # Convert to Series if DataFrame
    if isinstance(stock_returns, pd.DataFrame):
        if 'Close' in stock_returns.columns:
            stock_returns = stock_returns['Close']
        else:
            stock_returns = stock_returns.iloc[:, 0]
    
    if isinstance(market_returns, pd.DataFrame):
        if isinstance(market_returns.columns, pd.MultiIndex):
            market_returns = market_returns[('Close', market_returns.columns.get_level_values(1)[0])]
        elif 'Close' in market_returns.columns:
            market_returns = market_returns['Close']
        else:
            market_returns = market_returns.iloc[:, 0]
    
    if isinstance(risk_free_rate, pd.DataFrame):
        risk_free_rate = risk_free_rate.iloc[:, 0]
    
    # Drop NaN values
    stock_returns = stock_returns.dropna()
    market_returns = market_returns.dropna()
    risk_free_rate = risk_free_rate.dropna()
    
    # Align data on dates
    data = pd.DataFrame({
        'stock': stock_returns,
        'market': market_returns,
        'rf': risk_free_rate
    })
    data = data.dropna()
    
    return data['stock'], data['market'], data['rf']

def calculate_beta_capm(stock_excess_returns, market_excess_returns):
    """Calculate beta using regression for CAPM."""
    try:
        # Create a DataFrame for alignment
        data = pd.DataFrame({
            'stock': stock_excess_returns,
            'market': market_excess_returns
        }).dropna()
        
        if len(data) < 30:
            return np.nan, np.nan, np.nan
            
        X = data['market'].values.reshape(-1, 1)
        y = data['stock'].values
        
        model = sm.OLS(y, sm.add_constant(X)).fit()
        beta = model.params[1]
        alpha = model.params[0]
        r_squared = model.rsquared
        
        return beta, alpha, r_squared
    except Exception as e:
        logging.error(f"Error calculating beta: {e}")
        return np.nan, np.nan, np.nan

def calculate_fama_french_factors(stock_excess_returns, factors_data):
    """Calculate Fama-French factor loadings."""
    try:
        # Create a DataFrame with stock excess returns
        data = pd.DataFrame({'excess_return': stock_excess_returns})
        
        # Join with factors data
        data = data.join(factors_data).dropna()
        
        # Prepare X and y for regression
        X_cols = ['SMB', 'HML']
        if 'MKT-RF' in data.columns:
            X_cols = ['MKT-RF'] + X_cols
        
        X = data[X_cols]
        y = data['excess_return']
        
        # Add constant for intercept
        X = sm.add_constant(X)
        
        # Run regression
        model = sm.OLS(y, X).fit()
        
        # Extract coefficients
        coefficients = {col: model.params[col] for col in X_cols}
        
        # Return factor loadings
        result = {
            'alpha': model.params['const'],
            'r_squared': model.rsquared
        }
        
        # Add factor betas
        if 'MKT-RF' in coefficients:
            result['market_beta'] = coefficients['MKT-RF']
        result['smb_beta'] = coefficients['SMB']
        result['hml_beta'] = coefficients['HML']
        
        return result
    except Exception as e:
        logging.error(f"Error in Fama-French regression: {e}")
        return {
            'alpha': np.nan,
            'market_beta': np.nan,
            'smb_beta': np.nan,
            'hml_beta': np.nan,
            'r_squared': np.nan
        }

def calculate_expected_returns_capm(beta, risk_free_rate, market_premium):
    """Calculate expected returns using CAPM."""
    try:
        return risk_free_rate + beta * market_premium
    except Exception as e:
        logging.error(f"Error calculating CAPM expected returns: {e}")
        return np.nan

def calculate_expected_returns_ff(factor_loadings, factor_premiums, risk_free_rate):
    """Calculate expected returns using Fama-French model."""
    try:
        # Extract betas and premiums
        market_beta = factor_loadings.get('market_beta', 0.0)
        smb_beta = factor_loadings.get('smb_beta', 0.0)
        hml_beta = factor_loadings.get('hml_beta', 0.0)
        
        market_premium = factor_premiums.get('MKT-RF', 0.0)
        smb_premium = factor_premiums.get('SMB', 0.0)
        hml_premium = factor_premiums.get('HML', 0.0)
        
        # Calculate expected return
        return risk_free_rate + market_beta * market_premium + smb_beta * smb_premium + hml_beta * hml_premium
    except Exception as e:
        logging.error(f"Error calculating FF expected returns: {e}")
        return np.nan

def calculate_sharpe_ratio(excess_returns):
    """Calculate Sharpe ratio."""
    try:
        return excess_returns.mean() / excess_returns.std() * np.sqrt(252)  # Annualized
    except Exception as e:
        logging.error(f"Error calculating Sharpe ratio: {e}")
        return np.nan

def run_fundamental_analysis(conn, ticker: str, start_date: str, end_date: str, model: str = 'capm') -> Optional[Dict]:
    """Run fundamental analysis for a ticker."""
    try:
        logging.info(f"Running {model.upper()} analysis for {ticker} from {start_date} to {end_date}")
        
        # Get data
        stock_data = get_price_data(conn, ticker, start_date, end_date)
        if stock_data.empty:
            logging.warning(f"No price data available for {ticker}")
            return None
            
        market_data = get_market_data(start_date, end_date)
        if market_data.empty:
            logging.warning(f"No market data available for analysis period")
            return None
            
        risk_free_data = get_risk_free_rate(start_date, end_date)
        if risk_free_data.empty or 'daily_rate' not in risk_free_data.columns:
            logging.warning(f"No risk-free rate data available for analysis period")
            return None
        
        # Calculate returns
        stock_returns = calculate_returns(stock_data)
        market_returns = calculate_returns(market_data)
        risk_free_rate = risk_free_data['daily_rate']
        
        # Validate and align data
        stock_returns, market_returns, risk_free_rate = validate_data(
            stock_returns, market_returns, risk_free_rate
        )
        
        if len(stock_returns) < 30:  # Require at least 30 days of data
            logging.warning(f"Insufficient data for {ticker}: only {len(stock_returns)} days")
            return None
            
        # Calculate excess returns
        stock_excess_returns = stock_returns - risk_free_rate
        market_excess_returns = market_returns - risk_free_rate
        
        # Calculate average rates and market premium
        avg_rf_rate = risk_free_rate.mean()
        market_premium = market_excess_returns.mean()
        
        # Initialize results dictionary
        result = {
            'ticker': ticker,
            'date': end_date,
            'analysis_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'model': model,
            'market_premium': market_premium * 252,  # Annualized market premium
            'risk_free_rate': avg_rf_rate * 252  # Annualized risk-free rate
        }
        
        # Run CAPM analysis
        beta, alpha, r_squared = calculate_beta_capm(stock_excess_returns, market_excess_returns)
        expected_return_capm = calculate_expected_returns_capm(beta, avg_rf_rate, market_premium)
        
        result.update({
            'beta': beta,
            'alpha': alpha * 252,  # Annualize
            'r_squared': r_squared,
            'expected_return_capm': expected_return_capm * 252  # Annualize
        })
        
        # Run Fama-French analysis if requested
        if model.lower() == 'fama_french':
            ff_factors = get_fama_french_factors(start_date, end_date)
            
            if not ff_factors.empty:
                # Add market excess returns to factors
                ff_factors['MKT-RF'] = market_excess_returns
                
                # Calculate factor loadings
                ff_loadings = calculate_fama_french_factors(stock_excess_returns, ff_factors)
                
                # Calculate factor premiums
                factor_premiums = {
                    'MKT-RF': market_premium * 252,  # Annualized
                    'SMB': ff_factors['SMB'].mean() * 252,  # Annualized
                    'HML': ff_factors['HML'].mean() * 252   # Annualized
                }
                
                # Calculate expected return
                expected_return_ff = calculate_expected_returns_ff(
                    ff_loadings, 
                    {k: v/252 for k, v in factor_premiums.items()},  # De-annualize for calculation
                    avg_rf_rate
                )
                
                # Add Fama-French results
                result.update({
                    'market_beta': ff_loadings.get('market_beta', beta),  # Use CAPM beta if FF market beta not available
                    'smb_beta': ff_loadings['smb_beta'],
                    'hml_beta': ff_loadings['hml_beta'],
                    'ff_alpha': ff_loadings['alpha'] * 252,  # Annualize
                    'ff_r_squared': ff_loadings['r_squared'],
                    'expected_return_ff': expected_return_ff * 252,  # Annualize
                    'smb_premium': factor_premiums['SMB'],
                    'hml_premium': factor_premiums['HML']
                })
        
        # Calculate Sharpe ratio
        result['sharpe_ratio'] = calculate_sharpe_ratio(stock_excess_returns)
        
        return result
    except Exception as e:
        logging.error(f"Error in fundamental analysis for {ticker}: {e}")
        return None

def store_fundamental_results(conn, result: Dict) -> bool:
    """Store fundamental analysis results in the database."""
    try:
        cursor = conn.cursor()
        
        # Check if entry already exists for this ticker and date
        if result['model'].lower() == 'capm':
            table_name = 'fundamental_analysis_capm'
        else:  # Fama-French model
            table_name = 'fundamental_analysis_ff'
            
        cursor.execute(f"""
        SELECT id FROM {table_name}
        WHERE ticker = ? AND date = ?
        """, (result['ticker'], result['date']))
        
        existing_entry = cursor.fetchone()
        
        if existing_entry:
            # Update existing entry
            if result['model'].lower() == 'capm':
                cursor.execute("""
                UPDATE fundamental_analysis_capm
                SET beta = ?, alpha = ?, expected_return = ?, 
                    sharpe_ratio = ?, r_squared = ?, analysis_date = ?,
                    market_premium = ?, risk_free_rate = ?
                WHERE ticker = ? AND date = ?
                """, (
                    result['beta'], result['alpha'], result['expected_return_capm'],
                    result['sharpe_ratio'], result['r_squared'], result['analysis_date'],
                    result['market_premium'], result['risk_free_rate'],
                    result['ticker'], result['date']
                ))
            else:  # Fama-French model
                cursor.execute("""
                UPDATE fundamental_analysis_ff
                SET beta = ?, alpha = ?, smb_beta = ?, hml_beta = ?, ff_alpha = ?,
                    expected_return_capm = ?, expected_return_ff = ?, sharpe_ratio = ?, 
                    r_squared = ?, ff_r_squared = ?, smb_premium = ?, hml_premium = ?,
                    market_premium = ?, analysis_date = ?
                WHERE ticker = ? AND date = ?
                """, (
                    result['beta'], result['alpha'], result.get('smb_beta', np.nan),
                    result.get('hml_beta', np.nan), result.get('ff_alpha', np.nan),
                    result['expected_return_capm'], result.get('expected_return_ff', np.nan),
                    result['sharpe_ratio'], result['r_squared'],
                    result.get('ff_r_squared', np.nan), result.get('smb_premium', np.nan),
                    result.get('hml_premium', np.nan), result['market_premium'], result['analysis_date'],
                    result['ticker'], result['date']
                ))
        else:
            # Insert new entry
            if result['model'].lower() == 'capm':
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS fundamental_analysis_capm (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    ticker TEXT,
                    date TEXT,
                    beta REAL,
                    alpha REAL,
                    expected_return REAL,
                    sharpe_ratio REAL,
                    r_squared REAL,
                    analysis_date TEXT,
                    market_premium REAL,
                    risk_free_rate REAL
                )
                """)
                
                cursor.execute("""
                INSERT INTO fundamental_analysis_capm (
                    ticker, date, beta, alpha, expected_return, 
                    sharpe_ratio, r_squared, analysis_date, market_premium, risk_free_rate
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    result['ticker'], result['date'], result['beta'],
                    result['alpha'], result['expected_return_capm'],
                    result['sharpe_ratio'], result['r_squared'],
                    result['analysis_date'], result['market_premium'], result['risk_free_rate']
                ))
            else:  # Fama-French model
                cursor.execute("""
                CREATE TABLE IF NOT EXISTS fundamental_analysis_ff (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    ticker TEXT,
                    date TEXT,
                    beta REAL,
                    alpha REAL,
                    smb_beta REAL,
                    hml_beta REAL,
                    ff_alpha REAL,
                    expected_return_capm REAL,
                    expected_return_ff REAL,
                    sharpe_ratio REAL,
                    r_squared REAL,
                    ff_r_squared REAL,
                    smb_premium REAL,
                    hml_premium REAL,
                    market_premium REAL,
                    analysis_date TEXT
                )
                """)
                
                cursor.execute("""
                INSERT INTO fundamental_analysis_ff (
                    ticker, date, beta, alpha, smb_beta, hml_beta, ff_alpha,
                    expected_return_capm, expected_return_ff, sharpe_ratio, 
                    r_squared, ff_r_squared, smb_premium, hml_premium, market_premium, analysis_date
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    result['ticker'], result['date'], result['beta'],
                    result['alpha'], result.get('smb_beta', np.nan),
                    result.get('hml_beta', np.nan), result.get('ff_alpha', np.nan),
                    result['expected_return_capm'], result.get('expected_return_ff', np.nan),
                    result['sharpe_ratio'], result['r_squared'],
                    result.get('ff_r_squared', np.nan), result.get('smb_premium', np.nan),
                    result.get('hml_premium', np.nan), result['market_premium'], result['analysis_date']
                ))
        
        conn.commit()
        logging.info(f"Stored fundamental analysis results for {result['ticker']}")
        return True
    except Exception as e:
        logging.error(f"Error storing fundamental analysis results: {e}")
        return False

def main():
    """Run the fundamental analysis."""
    # Connect to the database
    db_path = os.path.join('database', 'data.db')
    conn = sqlite3.connect(db_path)
    
    # Get all tickers or use a specific one for testing
    process_all_tickers = False  # Set to False for testing with one ticker
    
    if process_all_tickers:
        # Get all tickers from the database
        tickers_df = pd.read_sql_query("SELECT DISTINCT ticker FROM nasdaq_100_daily_prices ORDER BY ticker", conn)
        tickers = tickers_df['ticker'].tolist()
    else:
        # Just test with AAPL
        tickers = ['AAPL']
    
    # Set date range
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = '2020-01-01'  # Use a fixed start date for consistent analysis
    
    # Choose model
    model = 'fama_french'  # 'capm' or 'fama_french'
    
    success_count = 0
    error_count = 0
    
    for i, ticker in enumerate(tickers):
        logging.info(f"Processing {ticker} ({i+1}/{len(tickers)})")
        try:
            # Run fundamental analysis
            result = run_fundamental_analysis(conn, ticker, start_date, end_date, model)
            
            if result:
                # Store results
                store_fundamental_results(conn, result)
                success_count += 1
                logging.info(f"Successfully analyzed {ticker}")
            else:
                error_count += 1
                logging.warning(f"No results for {ticker}")
        except Exception as e:
            error_count += 1
            logging.error(f"Error analyzing {ticker}: {e}")
    
    # Close connection
    conn.close()
    
    if process_all_tickers:
        logging.info(f"Analysis completed. Success: {success_count}, Errors: {error_count}")
    else:
        logging.info("Test analysis completed successfully")

if __name__ == "__main__":
    main()



================================================
File: scripts/generate_expected_returns.py
================================================
#!/usr/bin/env python3
"""
Generate Expected Returns

This script calculates expected returns for stocks using the CAPM and Fama-French models
and stores them in the database for use in portfolio optimization.
"""

import os
import sqlite3
import pandas as pd
import numpy as np
import yfinance as yf
from datetime import datetime
import logging
import time
from typing import List, Dict, Tuple

# Set up logging
log_dir = 'logs'
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f'expected_returns_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)

def get_nasdaq100_tickers(db_path: str) -> List[str]:
    """
    Get the list of Nasdaq-100 tickers from the database.
    """
    conn = sqlite3.connect(db_path)
    query = "SELECT DISTINCT ticker FROM nasdaq_100_tickers"
    tickers_df = pd.read_sql_query(query, conn)
    conn.close()
    
    return tickers_df['ticker'].tolist()

def get_stock_data_yf(tickers: List[str], start_date: str, end_date: str) -> pd.DataFrame:
    """
    Get historical price data for the given tickers using yfinance.
    
    Args:
        tickers: List of stock tickers
        start_date: Start date for data retrieval
        end_date: End date for data retrieval
        
    Returns:
        DataFrame with stock price data
    """
    all_data = []
    batch_size = 20  # Process in batches to avoid rate limiting
    
    for i in range(0, len(tickers), batch_size):
        batch_tickers = tickers[i:i+batch_size]
        logging.info(f"Fetching data for tickers {i+1}-{i+len(batch_tickers)} of {len(tickers)}")
        
        # Join tickers with space for yfinance
        ticker_str = " ".join(batch_tickers)
        
        try:
            # Download data for the batch
            data = yf.download(
                ticker_str,
                start=start_date,
                end=end_date,
                group_by='ticker',
                auto_adjust=True
            )
            
            # If only one ticker, yfinance returns a different format
            if len(batch_tickers) == 1:
                ticker = batch_tickers[0]
                data_reset = data.reset_index()
                data_reset['ticker'] = ticker
                all_data.append(data_reset)
            else:
                # Process each ticker in the batch
                for ticker in batch_tickers:
                    if ticker in data.columns.levels[0]:
                        ticker_data = data[ticker].reset_index()
                        ticker_data['ticker'] = ticker
                        all_data.append(ticker_data)
            
            # Sleep to avoid hitting rate limits
            time.sleep(1)
            
        except Exception as e:
            logging.error(f"Error fetching data for batch {i//batch_size + 1}: {e}")
    
    if not all_data:
        logging.error("No data retrieved from yfinance")
        return pd.DataFrame()
    
    # Combine all data
    combined_data = pd.concat(all_data, ignore_index=True)
    
    # Rename columns to match our expected format
    combined_data = combined_data.rename(columns={
        'Date': 'date',
        'Close': 'close',
        'Volume': 'volume',
        'Open': 'open',
        'High': 'high',
        'Low': 'low'
    })
    
    logging.info(f"Retrieved data for {len(combined_data['ticker'].unique())} stocks from {start_date} to {end_date}")
    return combined_data

def get_market_factors_data(start_date: str, end_date: str) -> pd.DataFrame:
    """
    Get market factors data (Fama-French factors) using yfinance.
    
    For simplicity, we'll use:
    - SPY for market return
    - IWD-IWF for value factor (Value - Growth)
    - IWM-SPY for size factor (Small - Large)
    
    Args:
        start_date: Start date for data retrieval
        end_date: End date for data retrieval
        
    Returns:
        DataFrame with market factors data
    """
    # Download data for market factors
    tickers = ['SPY', 'IWD', 'IWF', 'IWM']
    
    try:
        data = yf.download(
            " ".join(tickers),
            start=start_date,
            end=end_date,
            group_by='ticker',
            auto_adjust=True
        )
        
        # Extract close prices
        spy_data = data['SPY']['Close']
        iwd_data = data['IWD']['Close']
        iwf_data = data['IWF']['Close']
        iwm_data = data['IWM']['Close']
        
        # Calculate returns
        spy_returns = spy_data.pct_change().dropna()
        iwd_returns = iwd_data.pct_change().dropna()
        iwf_returns = iwf_data.pct_change().dropna()
        iwm_returns = iwm_data.pct_change().dropna()
        
        # Calculate factors
        market_returns = spy_returns
        value_factor = iwd_returns - iwf_returns  # Value minus Growth
        size_factor = iwm_returns - spy_returns   # Small minus Large
        
        # Combine into a DataFrame
        factors_df = pd.DataFrame({
            'market': market_returns,
            'value': value_factor,
            'size': size_factor
        })
        
        logging.info(f"Retrieved market factors data from {start_date} to {end_date}")
        return factors_df
        
    except Exception as e:
        logging.error(f"Error fetching market factors data: {e}")
        return pd.DataFrame()

def calculate_capm_expected_returns(stock_returns: pd.DataFrame, market_returns: pd.Series, risk_free_rate: float) -> Dict[str, float]:
    """
    Calculate expected returns using the CAPM model.
    
    Args:
        stock_returns: DataFrame with stock returns
        market_returns: Series with market returns
        risk_free_rate: Risk-free rate (annual)
        
    Returns:
        Dictionary mapping tickers to expected returns
    """
    expected_returns = {}
    
    # Calculate daily risk-free rate
    daily_rf = (1 + risk_free_rate) ** (1/252) - 1
    
    for ticker in stock_returns.columns:
        # Get stock returns
        stock_ret = stock_returns[ticker].dropna()
        
        # Align market returns with stock returns
        aligned_market = market_returns.loc[stock_ret.index]
        
        # Calculate excess returns
        excess_stock = stock_ret - daily_rf
        excess_market = aligned_market - daily_rf
        
        # Calculate beta using covariance / variance
        if len(excess_stock) > 30:  # Ensure enough data points
            try:
                beta = np.cov(excess_stock, excess_market)[0, 1] / np.var(excess_market)
                
                # Calculate expected return (annualized)
                er = daily_rf * 252 + beta * (market_returns.mean() * 252 - risk_free_rate)
                expected_returns[ticker] = er
            except Exception as e:
                logging.error(f"Error calculating CAPM for {ticker}: {e}")
    
    logging.info(f"Calculated CAPM expected returns for {len(expected_returns)} stocks")
    return expected_returns

def calculate_fama_french_expected_returns(
    stock_returns: pd.DataFrame, 
    factors_df: pd.DataFrame, 
    risk_free_rate: float
) -> Dict[str, float]:
    """
    Calculate expected returns using the Fama-French three-factor model.
    
    Args:
        stock_returns: DataFrame with stock returns
        factors_df: DataFrame with market, size, and value factors
        risk_free_rate: Risk-free rate (annual)
        
    Returns:
        Dictionary mapping tickers to expected returns
    """
    expected_returns = {}
    
    # Calculate daily risk-free rate
    daily_rf = (1 + risk_free_rate) ** (1/252) - 1
    
    # Calculate factor means (annualized)
    market_premium = factors_df['market'].mean() * 252
    size_premium = factors_df['size'].mean() * 252
    value_premium = factors_df['value'].mean() * 252
    
    for ticker in stock_returns.columns:
        # Get stock returns
        stock_ret = stock_returns[ticker].dropna()
        
        # Align factors with stock returns
        aligned_factors = factors_df.loc[stock_ret.index]
        
        # Calculate excess returns
        excess_stock = stock_ret - daily_rf
        
        if len(excess_stock) > 60:  # Ensure enough data points
            try:
                # Prepare data for regression
                X = aligned_factors
                y = excess_stock
                
                # Add constant for intercept
                X = pd.concat([pd.Series(1, index=X.index), X], axis=1)
                X.columns = ['const', 'market', 'size', 'value']
                
                # Run regression (manually to avoid statsmodels dependency)
                # X'X
                XX = X.T @ X
                # (X'X)^-1
                XX_inv = np.linalg.inv(XX)
                # (X'X)^-1 X'y
                betas = XX_inv @ (X.T @ y)
                
                # Extract betas
                beta_market = betas[1]
                beta_size = betas[2]
                beta_value = betas[3]
                
                # Calculate expected return (annualized)
                er = (daily_rf * 252 + 
                      beta_market * market_premium + 
                      beta_size * size_premium + 
                      beta_value * value_premium)
                
                expected_returns[ticker] = er
                
            except Exception as e:
                logging.error(f"Error calculating Fama-French for {ticker}: {e}")
    
    logging.info(f"Calculated Fama-French expected returns for {len(expected_returns)} stocks")
    return expected_returns

def create_tables(conn: sqlite3.Connection) -> None:
    """
    Create tables for storing expected returns.
    
    Args:
        conn: SQLite connection
    """
    # Create CAPM table
    conn.execute("""
    CREATE TABLE IF NOT EXISTS fundamental_analysis_capm (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ticker TEXT NOT NULL,
        expected_return REAL NOT NULL,
        calculation_date TEXT NOT NULL,
        UNIQUE(ticker)
    )
    """)
    
    # Create Fama-French table
    conn.execute("""
    CREATE TABLE IF NOT EXISTS fundamental_analysis_ff (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ticker TEXT NOT NULL,
        expected_return_ff REAL NOT NULL,
        calculation_date TEXT NOT NULL,
        UNIQUE(ticker)
    )
    """)
    
    conn.commit()
    logging.info("Created tables for storing expected returns")

def store_expected_returns(
    conn: sqlite3.Connection, 
    capm_returns: Dict[str, float], 
    ff_returns: Dict[str, float]
) -> None:
    """
    Store expected returns in the database.
    
    Args:
        conn: SQLite connection
        capm_returns: Dictionary with CAPM expected returns
        ff_returns: Dictionary with Fama-French expected returns
    """
    cursor = conn.cursor()
    calculation_date = datetime.now().strftime('%Y-%m-%d')
    
    # Store CAPM expected returns
    capm_data = [(ticker, er, calculation_date) for ticker, er in capm_returns.items()]
    cursor.executemany("""
    INSERT OR REPLACE INTO fundamental_analysis_capm (ticker, expected_return, calculation_date)
    VALUES (?, ?, ?)
    """, capm_data)
    
    # Store Fama-French expected returns
    ff_data = [(ticker, er, calculation_date) for ticker, er in ff_returns.items()]
    cursor.executemany("""
    INSERT OR REPLACE INTO fundamental_analysis_ff (ticker, expected_return_ff, calculation_date)
    VALUES (?, ?, ?)
    """, ff_data)
    
    conn.commit()
    logging.info(f"Stored {len(capm_data)} CAPM expected returns and {len(ff_data)} Fama-French expected returns")

def main():
    """Main function to generate expected returns."""
    # Connect to the database
    db_path = os.path.join('database', 'data.db')
    conn = sqlite3.connect(db_path)
    
    # Create tables if they don't exist
    create_tables(conn)
    
    # Set date range for historical data
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = '2020-01-01'  # Use 5 years of data for factor analysis
    
    # Get Nasdaq-100 tickers
    tickers = get_nasdaq100_tickers(db_path)
    logging.info(f"Retrieved {len(tickers)} Nasdaq-100 tickers from database")
    
    # Get stock price data
    stock_data = get_stock_data_yf(tickers, start_date, end_date)
    
    if stock_data.empty:
        logging.error("Failed to retrieve stock data. Exiting.")
        return
    
    # Convert to returns dataframe
    pivot_df = stock_data.pivot(index='date', columns='ticker', values='close')
    logging.info(f"Pivot dataframe shape: {pivot_df.shape}")
    
    # Fill missing values with previous values before calculating returns
    pivot_df = pivot_df.fillna(method='ffill')
    
    # Calculate returns and drop first row (which will be NaN)
    stock_returns = pivot_df.pct_change().iloc[1:]
    logging.info(f"Stock returns shape after calculation: {stock_returns.shape}")
    
    # Log first few rows of stock returns for debugging
    logging.info(f"Stock returns first few rows:\n{stock_returns.head()}")
    
    # Get market factors data
    factors_df = get_market_factors_data(start_date, end_date)
    
    if factors_df.empty:
        logging.error("Failed to retrieve market factors data. Exiting.")
        return
    
    # Align stock returns with factor returns
    common_dates = stock_returns.index.intersection(factors_df.index)
    aligned_stock_returns = stock_returns.loc[common_dates]
    aligned_factors = factors_df.loc[common_dates]
    
    # Set risk-free rate (annual)
    risk_free_rate = 0.02  # 2% annual risk-free rate
    
    # Calculate expected returns using CAPM
    capm_returns = calculate_capm_expected_returns(
        aligned_stock_returns, 
        aligned_factors['market'], 
        risk_free_rate
    )
    
    # Calculate expected returns using Fama-French
    ff_returns = calculate_fama_french_expected_returns(
        aligned_stock_returns, 
        aligned_factors, 
        risk_free_rate
    )
    
    # Store expected returns in the database
    if capm_returns or ff_returns:
        store_expected_returns(conn, capm_returns, ff_returns)
    else:
        logging.warning("No expected returns were calculated. Nothing to store in the database.")
    
    # Print summary
    print("\nExpected Returns Summary:")
    print("==================================================")
    print(f"CAPM Model: {len(capm_returns)} stocks")
    print(f"Fama-French Model: {len(ff_returns)} stocks")
    
    # Print top 10 stocks by expected return
    print("\nTop 10 Stocks by Expected Return (CAPM):")
    sorted_capm = sorted(capm_returns.items(), key=lambda x: x[1], reverse=True)
    for ticker, er in sorted_capm[:10]:
        print(f"{ticker}: {er:.4f} ({er*100:.2f}%)")
    
    print("\nTop 10 Stocks by Expected Return (Fama-French):")
    sorted_ff = sorted(ff_returns.items(), key=lambda x: x[1], reverse=True)
    for ticker, er in sorted_ff[:10]:
        print(f"{ticker}: {er:.4f} ({er*100:.2f}%)")
    
    # Close database connection
    conn.close()
    
    logging.info("Expected returns generation completed successfully")
    print("\nExpected returns generation completed successfully")

if __name__ == "__main__":
    main()



================================================
File: scripts/integrated_strategy.py
================================================
#!/usr/bin/env python3
"""
Integrated Portfolio Strategy

This script combines technical signals with Monte Carlo portfolio optimization
to create an enhanced investment strategy that leverages both technical and
fundamental analysis.

The approach:
1. Calculate technical indicators for all stocks
2. Filter stocks based on technical signals
3. Run Monte Carlo simulation on the filtered universe
4. Adjust portfolio weights based on both technical and fundamental factors
"""

import os
import sqlite3
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import logging
from typing import Dict, List, Tuple, Optional
import json
import yfinance as yf
import time

# Set up logging
log_dir = 'logs'
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f'integrated_strategy_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)

# Import functions from technical_signals.py
from technical_signals import (
    compute_all_indicators,
    trading_strategy
)

# Import functions from monte_carlo.py
from monte_carlo import (
    calculate_daily_returns,
    get_expected_returns,
    run_monte_carlo_simulation,
    plot_efficient_frontier,
    export_optimal_portfolios
)

# Import functions from generate_expected_returns.py
from generate_expected_returns import get_nasdaq100_tickers

def get_stock_data_yf(tickers: List[str], start_date: str, end_date: str) -> pd.DataFrame:
    """
    Get historical price data for the given tickers using yfinance.
    
    Args:
        tickers: List of stock tickers
        start_date: Start date for data retrieval
        end_date: End date for data retrieval
        
    Returns:
        DataFrame with stock price data
    """
    all_data = []
    batch_size = 20  # Process in batches to avoid rate limiting
    
    for i in range(0, len(tickers), batch_size):
        batch_tickers = tickers[i:i+batch_size]
        logging.info(f"Fetching data for tickers {i+1}-{i+len(batch_tickers)} of {len(tickers)}")
        
        # Join tickers with space for yfinance
        ticker_str = " ".join(batch_tickers)
        
        try:
            # Download data for the batch
            data = yf.download(
                ticker_str,
                start=start_date,
                end=end_date,
                group_by='ticker',
                auto_adjust=True
            )
            
            # If only one ticker, yfinance returns a different format
            if len(batch_tickers) == 1:
                ticker = batch_tickers[0]
                data_reset = data.reset_index()
                data_reset['ticker'] = ticker
                all_data.append(data_reset)
            else:
                # Process each ticker in the batch
                for ticker in batch_tickers:
                    if ticker in data.columns.levels[0]:
                        ticker_data = data[ticker].reset_index()
                        ticker_data['ticker'] = ticker
                        all_data.append(ticker_data)
            
            # Sleep to avoid hitting rate limits
            time.sleep(1)
            
        except Exception as e:
            logging.error(f"Error fetching data for batch {i//batch_size + 1}: {e}")
    
    if not all_data:
        logging.error("No data retrieved from yfinance")
        return pd.DataFrame()
    
    # Combine all data
    combined_data = pd.concat(all_data, ignore_index=True)
    
    # Rename columns to match our expected format
    combined_data = combined_data.rename(columns={
        'Date': 'date',
        'Close': 'close',
        'Volume': 'volume',
        'Open': 'open',
        'High': 'high',
        'Low': 'low'
    })
    
    logging.info(f"Retrieved data for {len(combined_data['ticker'].unique())} stocks from {start_date} to {end_date}")
    return combined_data

def get_technical_signals(tickers: List[str], start_date: str, end_date: str) -> pd.DataFrame:
    """
    Retrieve stock price data using yfinance, calculate technical indicators, and generate signals.
    
    Args:
        tickers: List of stock tickers
        start_date: Start date for analysis
        end_date: End date for analysis
        
    Returns:
        DataFrame with technical signals for each stock
    """
    # Get stock price data using yfinance
    price_df = get_stock_data_yf(tickers, start_date, end_date)
    
    if price_df.empty:
        logging.error("Failed to retrieve price data from yfinance")
        return pd.DataFrame()
    
    # Process each ticker to calculate technical indicators and signals
    signals_data = []
    
    for ticker, group in price_df.groupby('ticker'):
        # Sort by date and calculate indicators
        stock_df = group.sort_values(by='date').reset_index(drop=True)
        stock_df = compute_all_indicators(stock_df)
        
        # Drop rows with insufficient indicator data
        stock_df = stock_df.dropna(subset=[
            'SMA_Ratio', 'SMA_Volume_Ratio', 'ATR_Ratio', 
            '20Day_%K', '20Day_%D', 'RSI_20', 
            'MACD_Value', 'MACD_Signal', 'upperband', 'lowerband'
        ])
        
        if stock_df.empty:
            continue
            
        # Generate trading signals
        buy_price, sell_price, trading_signal = trading_strategy(
            prices=stock_df['close'].values,
            SMA_Ratio=stock_df['SMA_Ratio'].values,
            SMA_Volume_Ratio=stock_df['SMA_Volume_Ratio'].values,
            ATR_Ratio=stock_df['ATR_Ratio'].values,
            Day20_K=stock_df['20Day_%K'].values,
            Day20_D=stock_df['20Day_%D'].values,
            RSI_20=stock_df['RSI_20'].values,
            MACD_Value=stock_df['MACD_Value'].values,
            MACD_Signal=stock_df['MACD_Signal'].values,
            upperband=stock_df['upperband'].values,
            lowerband=stock_df['lowerband'].values
        )
        
        # Add signals to the dataframe
        stock_df['buy_signal'] = [1 if not np.isnan(x) else 0 for x in buy_price]
        stock_df['sell_signal'] = [1 if not np.isnan(x) else 0 for x in sell_price]
        stock_df['trading_signal'] = trading_signal
        
        # Get the most recent signal (last 30 days)
        recent_df = stock_df.tail(30).copy()
        
        # Calculate a technical score based on recent signals
        buy_count = recent_df['buy_signal'].sum()
        sell_count = recent_df['sell_signal'].sum()
        
        # Technical score: +1 for each buy signal, -1 for each sell signal
        technical_score = buy_count - sell_count
        
        # Current position (from most recent trading signal)
        current_position = recent_df['trading_signal'].iloc[-1] if len(recent_df) > 0 else 0
        
        signals_data.append({
            'ticker': ticker,
            'technical_score': technical_score,
            'current_position': current_position,
            'last_close': stock_df['close'].iloc[-1] if len(stock_df) > 0 else None,
            'rsi': stock_df['RSI_20'].iloc[-1] if len(stock_df) > 0 else None,
            'macd': stock_df['MACD_Value'].iloc[-1] if len(stock_df) > 0 else None
        })
    
    signals_df = pd.DataFrame(signals_data)
    logging.info(f"Generated technical signals for {len(signals_df)} stocks")
    
    return signals_df

def get_price_data_for_monte_carlo(tickers: List[str], start_date: str, end_date: str) -> pd.DataFrame:
    """
    Get price data for Monte Carlo simulation using yfinance.
    
    Args:
        tickers: List of stock tickers
        start_date: Start date for data retrieval
        end_date: End date for data retrieval
        
    Returns:
        DataFrame with price data in the format expected by Monte Carlo simulation
    """
    # Get stock data using yfinance
    stock_data = get_stock_data_yf(tickers, start_date, end_date)
    
    if stock_data.empty:
        logging.error("Failed to retrieve price data for Monte Carlo simulation")
        return pd.DataFrame()
    
    # Pivot the data to get a DataFrame with dates as index and tickers as columns
    pivot_df = stock_data.pivot(index='date', columns='ticker', values='close')
    
    logging.info(f"Prepared price data for Monte Carlo simulation with {len(pivot_df.columns)} stocks")
    
    return pivot_df

def adjust_expected_returns(
    expected_returns: pd.Series, 
    technical_signals: pd.DataFrame,
    adjustment_weight: float = 0.2
) -> pd.Series:
    """
    Adjust expected returns based on technical signals.
    
    Args:
        expected_returns: Series of expected returns from fundamental analysis
        technical_signals: DataFrame with technical signals
        adjustment_weight: Weight to apply to technical adjustment (0-1)
        
    Returns:
        Adjusted expected returns
    """
    # Create a copy to avoid modifying the original
    adjusted_returns = expected_returns.copy()
    
    # Normalize technical scores to a range of -0.1 to 0.1
    max_score = technical_signals['technical_score'].abs().max()
    if max_score > 0:
        normalized_scores = technical_signals['technical_score'] / max_score * 0.1
    else:
        normalized_scores = technical_signals['technical_score'] * 0
    
    # Create a mapping from ticker to normalized score
    score_map = dict(zip(technical_signals['ticker'], normalized_scores))
    
    # Apply adjustment to expected returns
    for ticker in adjusted_returns.index:
        if ticker in score_map:
            # Apply the technical adjustment with the specified weight
            technical_adjustment = score_map[ticker] * adjustment_weight
            adjusted_returns[ticker] = adjusted_returns[ticker] + technical_adjustment
    
    logging.info(f"Adjusted expected returns for {len(score_map)} stocks based on technical signals")
    
    return adjusted_returns

def filter_investment_universe(
    tickers: List[str],
    technical_signals: pd.DataFrame,
    min_technical_score: int = -5
) -> List[str]:
    """
    Filter the investment universe based on technical signals.
    
    Args:
        tickers: List of all available tickers
        technical_signals: DataFrame with technical signals
        min_technical_score: Minimum technical score to include a stock
        
    Returns:
        Filtered list of tickers
    """
    # Create a set of tickers that meet the technical criteria
    qualified_tickers = set(
        technical_signals[technical_signals['technical_score'] >= min_technical_score]['ticker']
    )
    
    # Filter the original ticker list
    filtered_tickers = [ticker for ticker in tickers if ticker in qualified_tickers]
    
    logging.info(f"Filtered investment universe from {len(tickers)} to {len(filtered_tickers)} stocks")
    
    return filtered_tickers

def store_integrated_portfolio(
    conn: sqlite3.Connection,
    optimization_date: str,
    portfolio_weights: Dict[str, float],
    expected_return: float,
    volatility: float,
    sharpe_ratio: float
) -> None:
    """
    Store the integrated portfolio in the database.
    
    Args:
        conn: Database connection
        optimization_date: Date of optimization
        portfolio_weights: Dictionary mapping tickers to weights
        expected_return: Expected portfolio return
        volatility: Portfolio volatility
        sharpe_ratio: Portfolio Sharpe ratio
    """
    try:
        # Convert weights dictionary to JSON string
        weights_json = json.dumps(portfolio_weights)
        
        # Insert into portfolio_optimization table
        cursor = conn.cursor()
        insert_query = """
        INSERT INTO portfolio_optimization 
        (optimization_date, portfolio_weights, expected_return, volatility, sharpe_ratio)
        VALUES (?, ?, ?, ?, ?)
        """
        cursor.execute(
            insert_query, 
            (optimization_date, weights_json, expected_return, volatility, sharpe_ratio)
        )
        conn.commit()
        logging.info("Stored integrated portfolio in database")
    except Exception as e:
        logging.error(f"Error storing portfolio: {e}")

def get_tickers_from_database(db_path: str) -> List[str]:
    """
    Retrieve Nasdaq-100 tickers from the database.
    
    Args:
        db_path: Path to the database file
        
    Returns:
        List of Nasdaq-100 tickers
    """
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    query = "SELECT DISTINCT ticker FROM nasdaq_100_tickers"
    cursor.execute(query)
    tickers = [row[0] for row in cursor.fetchall()]
    conn.close()
    return tickers

def main():
    """Main function to run the integrated strategy."""
    # Connect to the database
    db_path = os.path.join('database', 'data.db')
    conn = sqlite3.connect(db_path)
    
    # Set date range for historical data
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = '2020-01-01'  # Use a fixed start date for consistent analysis
    
    # Step 1: Get Nasdaq-100 tickers from database
    tickers = get_tickers_from_database(db_path)
    logging.info(f"Retrieved {len(tickers)} Nasdaq-100 tickers from database")
    
    # Step 2: Get technical signals using yfinance data
    technical_signals = get_technical_signals(tickers, start_date, end_date)
    
    if technical_signals.empty:
        logging.error("Failed to generate technical signals. Exiting.")
        return
    
    # Step 3: Filter stocks based on technical signals
    filtered_tickers = filter_investment_universe(tickers, technical_signals)
    
    if not filtered_tickers:
        logging.error("No stocks passed the technical filter. Exiting.")
        return
    
    # Step 4: Get price data for Monte Carlo simulation using yfinance
    prices_df = get_price_data_for_monte_carlo(filtered_tickers, start_date, end_date)
    
    if prices_df.empty:
        logging.error("Failed to retrieve price data for Monte Carlo simulation. Exiting.")
        return
    
    # Step 5: Calculate daily returns
    returns_df = calculate_daily_returns(prices_df)
    
    # Step 6: Get expected returns from fundamental analysis
    model = 'fama_french'  # 'capm' or 'fama_french'
    expected_returns = get_expected_returns(conn, model)
    
    # Step 7: Filter expected returns to the filtered universe
    common_tickers = list(set(returns_df.columns) & set(expected_returns.index))
    logging.info(f"Using {len(common_tickers)} stocks with both price data and expected returns")
    
    if not common_tickers:
        logging.error("No stocks have both price data and expected returns. Exiting.")
        return
    
    returns_df = returns_df[common_tickers]
    filtered_expected_returns = expected_returns[common_tickers]
    
    # Step 8: Adjust expected returns based on technical signals
    adjusted_expected_returns = adjust_expected_returns(
        filtered_expected_returns, 
        technical_signals[technical_signals['ticker'].isin(common_tickers)]
    )
    
    # Step 9: Calculate covariance matrix (annualized)
    cov_matrix = returns_df.cov() * 252
    
    # Step 10: Run Monte Carlo simulation with adjusted expected returns
    num_portfolios = 10000
    risk_free_rate = 0.02  # 2% annual risk-free rate
    
    results_df, optimal_portfolios = run_monte_carlo_simulation(
        adjusted_expected_returns,
        cov_matrix,
        num_portfolios,
        risk_free_rate
    )
    
    # Step 11: Plot efficient frontier
    results_dir = 'results'
    os.makedirs(results_dir, exist_ok=True)
    
    plot_path = os.path.join(
        results_dir, 
        f'integrated_efficient_frontier_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png'
    )
    plot_efficient_frontier(results_df, optimal_portfolios, plot_path)
    
    # Step 12: Export optimal portfolios
    export_path = os.path.join(
        results_dir, 
        f'integrated_optimal_portfolios_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
    )
    export_optimal_portfolios(
        optimal_portfolios,
        export_path
    )
    
    # Step 13: Store optimal portfolios in database
    optimization_date = datetime.now().strftime('%Y-%m-%d')
    
    # Store max Sharpe ratio portfolio
    max_sharpe_weights = dict(zip(
        adjusted_expected_returns.index,
        optimal_portfolios['max_sharpe'].iloc[3:]
    ))
    store_integrated_portfolio(
        conn,
        optimization_date,
        max_sharpe_weights,
        optimal_portfolios['max_sharpe']['return'],
        optimal_portfolios['max_sharpe']['volatility'],
        optimal_portfolios['max_sharpe']['sharpe_ratio']
    )
    
    # Store min volatility portfolio
    min_vol_weights = dict(zip(
        adjusted_expected_returns.index,
        optimal_portfolios['min_volatility'].iloc[3:]
    ))
    store_integrated_portfolio(
        conn,
        optimization_date,
        min_vol_weights,
        optimal_portfolios['min_volatility']['return'],
        optimal_portfolios['min_volatility']['volatility'],
        optimal_portfolios['min_volatility']['sharpe_ratio']
    )
    
    # Print results
    print("\nIntegrated Portfolio Optimization Results:")
    print("==================================================")
    
    print("\nMax Sharpe Portfolio:")
    print(f"Expected Return: {optimal_portfolios['max_sharpe']['return']:.4f}")
    print(f"Volatility: {optimal_portfolios['max_sharpe']['volatility']:.4f}")
    print(f"Sharpe Ratio: {optimal_portfolios['max_sharpe']['sharpe_ratio']:.4f}")
    
    print("\nTop 10 Holdings:")
    max_sharpe_weights = dict(zip(
        adjusted_expected_returns.index,
        optimal_portfolios['max_sharpe'].iloc[3:]
    ))
    sorted_weights = sorted(max_sharpe_weights.items(), key=lambda x: x[1], reverse=True)
    for ticker, weight in sorted_weights[:10]:
        print(f"{ticker}: {weight:.4f} ({weight*100:.2f}%)")
    
    print("\nMin Volatility Portfolio:")
    print(f"Expected Return: {optimal_portfolios['min_volatility']['return']:.4f}")
    print(f"Volatility: {optimal_portfolios['min_volatility']['volatility']:.4f}")
    print(f"Sharpe Ratio: {optimal_portfolios['min_volatility']['sharpe_ratio']:.4f}")
    
    print("\nTop 10 Holdings:")
    min_vol_weights = dict(zip(
        adjusted_expected_returns.index,
        optimal_portfolios['min_volatility'].iloc[3:]
    ))
    sorted_weights = sorted(min_vol_weights.items(), key=lambda x: x[1], reverse=True)
    for ticker, weight in sorted_weights[:10]:
        print(f"{ticker}: {weight:.4f} ({weight*100:.2f}%)")
    
    # Close database connection
    conn.close()
    
    logging.info("Integrated strategy completed successfully")
    print("\nIntegrated strategy completed successfully")

if __name__ == "__main__":
    main()



================================================
File: scripts/monte_carlo.py
================================================
#!/usr/bin/env python
"""
Monte Carlo simulation for portfolio optimization.

This script performs Monte Carlo simulation to find the optimal portfolio weights
that maximize the Sharpe ratio while considering the risk-return tradeoff.
"""

import os
import sqlite3
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import logging
from typing import Dict, List, Tuple, Optional
import time

# Configure logging
log_dir = 'logs'
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f'monte_carlo_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)

def get_stock_data(conn, start_date: str, end_date: str) -> pd.DataFrame:
    """
    Retrieve stock price data from the database.
    
    Args:
        conn: SQLite connection
        start_date: Start date for data retrieval (YYYY-MM-DD)
        end_date: End date for data retrieval (YYYY-MM-DD)
        
    Returns:
        DataFrame with stock prices
    """
    print(f"Retrieving stock data from {start_date} to {end_date}...")
    query = f"""
    SELECT date, ticker, close
    FROM nasdaq_100_daily_prices
    WHERE date BETWEEN '{start_date}' AND '{end_date}'
    ORDER BY date, ticker
    """
    
    df = pd.read_sql_query(query, conn)
    print(f"Retrieved {len(df)} price records")
    
    # Check for duplicate entries
    duplicates = df.duplicated(subset=['date', 'ticker'])
    if duplicates.any():
        print(f"Found {duplicates.sum()} duplicate entries. Removing duplicates...")
        df = df.drop_duplicates(subset=['date', 'ticker'], keep='first')
    
    # Pivot the data to have tickers as columns and dates as index
    pivot_df = df.pivot(index='date', columns='ticker', values='close')
    
    # Forward fill missing values (if any)
    pivot_df = pivot_df.ffill().bfill()
    
    logging.info(f"Retrieved price data for {pivot_df.shape[1]} stocks from {start_date} to {end_date}")
    print(f"Processed price data for {pivot_df.shape[1]} stocks across {pivot_df.shape[0]} days")
    
    return pivot_df

def get_expected_returns(conn, model: str = 'fama_french') -> pd.Series:
    """
    Retrieve expected returns from fundamental analysis.
    
    Args:
        conn: SQLite connection
        model: 'capm' or 'fama_french'
        
    Returns:
        Series with expected returns for each ticker
    """
    if model.lower() == 'capm':
        query = """
        SELECT ticker, expected_return
        FROM fundamental_analysis_capm
        ORDER BY ticker
        """
        df = pd.read_sql_query(query, conn)
        return_col = 'expected_return'
    else:  # Fama-French
        query = """
        SELECT ticker, expected_return_ff
        FROM fundamental_analysis_ff
        ORDER BY ticker
        """
        df = pd.read_sql_query(query, conn)
        return_col = 'expected_return_ff'
    
    # Convert to annualized decimal returns if needed
    if df[return_col].mean() > 1:  # If returns are in percentage
        df[return_col] = df[return_col] / 100
    
    logging.info(f"Retrieved expected returns for {len(df)} stocks using {model} model")
    
    return pd.Series(df[return_col].values, index=df['ticker'])

def calculate_daily_returns(prices: pd.DataFrame) -> pd.DataFrame:
    """
    Calculate daily returns from price data.
    
    Args:
        prices: DataFrame with stock prices
        
    Returns:
        DataFrame with daily returns
    """
    return prices.pct_change().dropna()

def generate_random_weights(n_assets: int) -> np.ndarray:
    """
    Generate random weights that sum to 1.
    
    Args:
        n_assets: Number of assets
        
    Returns:
        Array of random weights
    """
    weights = np.random.random(n_assets)
    return weights / np.sum(weights)

def calculate_portfolio_metrics(
    weights: np.ndarray, 
    expected_returns: np.ndarray, 
    cov_matrix: np.ndarray,
    risk_free_rate: float = 0.02
) -> Tuple[float, float, float]:
    """
    Calculate portfolio return, volatility, and Sharpe ratio.
    
    Args:
        weights: Portfolio weights
        expected_returns: Expected returns for each asset
        cov_matrix: Covariance matrix
        risk_free_rate: Risk-free rate (annual)
        
    Returns:
        Tuple of (return, volatility, Sharpe ratio)
    """
    # Portfolio return
    portfolio_return = np.sum(weights * expected_returns)
    
    # Portfolio volatility (annualized)
    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
    
    # Sharpe ratio
    sharpe_ratio = (portfolio_return - risk_free_rate) / portfolio_volatility
    
    return portfolio_return, portfolio_volatility, sharpe_ratio

def run_monte_carlo_simulation(
    expected_returns: np.ndarray,
    cov_matrix: np.ndarray,
    num_portfolios: int = 10000,
    risk_free_rate: float = 0.02
) -> Tuple[pd.DataFrame, Dict]:
    """
    Run Monte Carlo simulation to generate random portfolios.
    
    Args:
        expected_returns: Expected returns for each asset
        cov_matrix: Covariance matrix
        num_portfolios: Number of portfolios to simulate
        risk_free_rate: Risk-free rate (annual)
        
    Returns:
        DataFrame with portfolio metrics and weights, and dictionary with optimal portfolios
    """
    n_assets = len(expected_returns)
    results = np.zeros((num_portfolios, 3 + n_assets))
    
    start_time = time.time()
    logging.info(f"Starting Monte Carlo simulation with {num_portfolios} portfolios")
    
    for i in range(num_portfolios):
        weights = generate_random_weights(n_assets)
        portfolio_return, portfolio_volatility, sharpe_ratio = calculate_portfolio_metrics(
            weights, expected_returns, cov_matrix, risk_free_rate
        )
        
        results[i, 0] = portfolio_return
        results[i, 1] = portfolio_volatility
        results[i, 2] = sharpe_ratio
        results[i, 3:] = weights
        
        if i % 1000 == 0 and i > 0:
            elapsed = time.time() - start_time
            logging.info(f"Completed {i} portfolios in {elapsed:.2f} seconds")
    
    elapsed = time.time() - start_time
    logging.info(f"Monte Carlo simulation completed in {elapsed:.2f} seconds")
    
    # Convert results to DataFrame
    columns = ['return', 'volatility', 'sharpe_ratio'] + list(expected_returns.index)
    results_df = pd.DataFrame(results, columns=columns)
    
    # Find optimal portfolios
    optimal_portfolios = {
        'max_sharpe': results_df.iloc[results_df['sharpe_ratio'].idxmax()],
        'min_volatility': results_df.iloc[results_df['volatility'].idxmin()],
        'max_return': results_df.iloc[results_df['return'].idxmax()]
    }
    
    return results_df, optimal_portfolios

def plot_efficient_frontier(
    results_df: pd.DataFrame,
    optimal_portfolios: Dict,
    save_path: Optional[str] = None
) -> None:
    """
    Plot the efficient frontier and optimal portfolios.
    
    Args:
        results_df: DataFrame with portfolio metrics
        optimal_portfolios: Dictionary with optimal portfolios
        save_path: Path to save the plot (optional)
    """
    plt.figure(figsize=(12, 8))
    
    # Plot all portfolios
    plt.scatter(
        results_df['volatility'], 
        results_df['return'], 
        c=results_df['sharpe_ratio'], 
        cmap='viridis', 
        alpha=0.3,
        s=10
    )
    
    # Plot optimal portfolios
    plt.scatter(
        optimal_portfolios['max_sharpe']['volatility'],
        optimal_portfolios['max_sharpe']['return'],
        c='red',
        marker='*',
        s=300,
        label='Maximum Sharpe Ratio'
    )
    
    plt.scatter(
        optimal_portfolios['min_volatility']['volatility'],
        optimal_portfolios['min_volatility']['return'],
        c='green',
        marker='o',
        s=200,
        label='Minimum Volatility'
    )
    
    plt.scatter(
        optimal_portfolios['max_return']['volatility'],
        optimal_portfolios['max_return']['return'],
        c='blue',
        marker='^',
        s=200,
        label='Maximum Return'
    )
    
    plt.colorbar(label='Sharpe Ratio')
    plt.xlabel('Volatility (Annualized)')
    plt.ylabel('Expected Return (Annualized)')
    plt.title('Efficient Frontier - Monte Carlo Simulation')
    plt.legend()
    
    if save_path:
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        logging.info(f"Saved efficient frontier plot to {save_path}")
    
    plt.show()

def store_optimal_portfolio(conn, portfolio_data: pd.Series, portfolio_type: str) -> bool:
    """
    Store optimal portfolio weights in the database.
    
    Args:
        conn: SQLite connection
        portfolio_data: Series with portfolio metrics and weights
        portfolio_type: Type of portfolio ('max_sharpe', 'min_volatility', 'max_return')
        
    Returns:
        True if successful, False otherwise
    """
    try:
        cursor = conn.cursor()
        
        # Create table if it doesn't exist
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS portfolio_optimization (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            portfolio_type TEXT,
            date TEXT,
            expected_return REAL,
            volatility REAL,
            sharpe_ratio REAL,
            weights TEXT
        )
        """)
        
        # Extract portfolio metrics
        expected_return = portfolio_data['return']
        volatility = portfolio_data['volatility']
        sharpe_ratio = portfolio_data['sharpe_ratio']
        
        # Extract weights and convert to JSON
        weights = portfolio_data.iloc[3:].to_dict()
        weights_json = pd.Series(weights).to_json()
        
        # Get current date
        current_date = datetime.now().strftime('%Y-%m-%d')
        
        # Check if portfolio type already exists for today
        cursor.execute("""
        SELECT id FROM portfolio_optimization
        WHERE portfolio_type = ? AND date = ?
        """, (portfolio_type, current_date))
        
        existing_entry = cursor.fetchone()
        
        if existing_entry:
            # Update existing entry
            cursor.execute("""
            UPDATE portfolio_optimization
            SET expected_return = ?, volatility = ?, sharpe_ratio = ?, weights = ?
            WHERE portfolio_type = ? AND date = ?
            """, (expected_return, volatility, sharpe_ratio, weights_json, portfolio_type, current_date))
        else:
            # Insert new entry
            cursor.execute("""
            INSERT INTO portfolio_optimization (
                portfolio_type, date, expected_return, volatility, sharpe_ratio, weights
            ) VALUES (?, ?, ?, ?, ?, ?)
            """, (portfolio_type, current_date, expected_return, volatility, sharpe_ratio, weights_json))
        
        conn.commit()
        logging.info(f"Stored {portfolio_type} portfolio in database")
        return True
    
    except Exception as e:
        logging.error(f"Error storing portfolio: {e}")
        return False

def export_optimal_portfolios(optimal_portfolios: Dict, save_path: str) -> None:
    """
    Export optimal portfolios to CSV.
    
    Args:
        optimal_portfolios: Dictionary with optimal portfolios
        save_path: Path to save the CSV file
    """
    # Create a DataFrame to store the results
    results = []
    
    for portfolio_type, portfolio_data in optimal_portfolios.items():
        # Extract portfolio metrics
        portfolio_return = portfolio_data['return']
        portfolio_volatility = portfolio_data['volatility']
        portfolio_sharpe = portfolio_data['sharpe_ratio']
        
        # Extract weights
        weights = portfolio_data.iloc[3:].to_dict()
        
        # Add to results
        row = {
            'portfolio_type': portfolio_type,
            'expected_return': portfolio_return,
            'volatility': portfolio_volatility,
            'sharpe_ratio': portfolio_sharpe,
            **{f'weight_{ticker}': weight for ticker, weight in weights.items()}
        }
        
        results.append(row)
    
    # Convert to DataFrame
    results_df = pd.DataFrame(results)
    
    # Save to CSV
    results_df.to_csv(save_path, index=False)
    logging.info(f"Exported optimal portfolios to {save_path}")

def main():
    """Main function to run the Monte Carlo simulation."""
    # Connect to the database
    db_path = os.path.join('database', 'data.db')
    conn = sqlite3.connect(db_path)
    
    # Set date range for historical data
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = '2020-01-01'  # Use a fixed start date for consistent analysis
    
    # Get stock price data
    prices_df = get_stock_data(conn, start_date, end_date)
    
    # Calculate daily returns
    returns_df = calculate_daily_returns(prices_df)
    
    # Get expected returns from fundamental analysis
    model = 'fama_french'  # 'capm' or 'fama_french'
    expected_returns = get_expected_returns(conn, model)
    
    # Filter stocks to include only those with expected returns
    common_tickers = list(set(returns_df.columns) & set(expected_returns.index))
    logging.info(f"Using {len(common_tickers)} stocks with both price data and expected returns")
    
    returns_df = returns_df[common_tickers]
    expected_returns = expected_returns[common_tickers]
    
    # Calculate covariance matrix (annualized)
    cov_matrix = returns_df.cov() * 252
    
    # Run Monte Carlo simulation
    num_portfolios = 10000
    risk_free_rate = 0.02  # 2% annual risk-free rate
    
    results_df, optimal_portfolios = run_monte_carlo_simulation(
        expected_returns,
        cov_matrix,
        num_portfolios,
        risk_free_rate
    )
    
    # Create results directory if it doesn't exist
    results_dir = 'results'
    os.makedirs(results_dir, exist_ok=True)
    
    # Plot efficient frontier
    plot_path = os.path.join(results_dir, f'efficient_frontier_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png')
    plot_efficient_frontier(results_df, optimal_portfolios, plot_path)
    
    # Store optimal portfolios in database
    for portfolio_type, portfolio_data in optimal_portfolios.items():
        store_optimal_portfolio(conn, portfolio_data, portfolio_type)
    
    # Export optimal portfolios to CSV
    csv_path = os.path.join(results_dir, f'optimal_portfolios_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
    export_optimal_portfolios(optimal_portfolios, csv_path)
    
    # Print summary
    print("\nPortfolio Optimization Results:")
    print("=" * 50)
    
    for portfolio_type, portfolio_data in optimal_portfolios.items():
        print(f"\n{portfolio_type.replace('_', ' ').title()} Portfolio:")
        print(f"Expected Return: {portfolio_data['return']:.4f}")
        print(f"Volatility: {portfolio_data['volatility']:.4f}")
        print(f"Sharpe Ratio: {portfolio_data['sharpe_ratio']:.4f}")
        
        # Print top 10 weights
        weights = portfolio_data.iloc[3:].sort_values(ascending=False)
        print("\nTop 10 Holdings:")
        for ticker, weight in weights.head(10).items():
            print(f"{ticker}: {weight:.4f} ({weight*100:.2f}%)")
    
    # Close connection
    conn.close()
    
    logging.info("Monte Carlo simulation completed successfully")

if __name__ == "__main__":
    main()


================================================
File: scripts/optimization.py
================================================



================================================
File: scripts/run_analysis_fundamental.py
================================================
#!/usr/bin/env python3
"""
Script to run fundamental analysis on a set of tickers.
"""

import os
import sys
import sqlite3
import logging
import pandas as pd
from datetime import datetime
from fundamentals import run_fundamental_analysis, store_fundamental_results

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/run_analysis.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

def run_analysis_for_tickers(tickers, start_date, end_date, model='capm'):
    """Run fundamental analysis for a list of tickers."""
    # Connect to the database
    db_path = os.path.join('database', 'data.db')
    conn = sqlite3.connect(db_path)
    
    results = []
    success_count = 0
    error_count = 0
    
    for i, ticker in enumerate(tickers):
        logging.info(f"Processing {ticker} ({i+1}/{len(tickers)})")
        try:
            # Run fundamental analysis
            result = run_fundamental_analysis(conn, ticker, start_date, end_date, model)
            
            if result:
                # Store results
                store_fundamental_results(conn, result)
                results.append(result)
                success_count += 1
                logging.info(f"Successfully analyzed {ticker}")
            else:
                error_count += 1
                logging.warning(f"No results for {ticker}")
        except Exception as e:
            error_count += 1
            logging.error(f"Error analyzing {ticker}: {e}")
    
    # Close connection
    conn.close()
    
    logging.info(f"Analysis completed. Success: {success_count}, Errors: {error_count}")
    return results

def main():
    """Main function to run the analysis."""
    # Connect to the database
    db_path = os.path.join('database', 'data.db')
    conn = sqlite3.connect(db_path)
    
    # Get tickers from database
    use_all_tickers = True  # Set to True to process all tickers
    
    if use_all_tickers:
        tickers_df = pd.read_sql_query("SELECT DISTINCT ticker FROM nasdaq_100_daily_prices ORDER BY ticker", conn)
        tickers = tickers_df['ticker'].tolist()
        logging.info(f"Found {len(tickers)} tickers to analyze")
    else:
        # Use a subset of tickers for testing
        tickers = ['NVDA', 'TSLA', 'AVGO']  # Test with different tickers
    
    conn.close()
    
    # Set date range
    end_date = datetime.now().strftime('%Y-%m-%d')
    start_date = '2020-01-01'  # Use a fixed start date for consistent analysis
    
    # Choose model
    model = 'fama_french'  # 'capm' or 'fama_french'
    
    # Run analysis
    results = run_analysis_for_tickers(tickers, start_date, end_date, model)
    
    # Print summary
    if results:
        print("\nAnalysis Results Summary:")
        print(f"Total tickers analyzed: {len(results)}")
        
        # Calculate average metrics
        avg_beta = sum(r['beta'] for r in results) / len(results)
        avg_alpha = sum(r['alpha'] for r in results) / len(results)
        avg_expected_return_capm = sum(r['expected_return_capm'] for r in results) / len(results)
        avg_sharpe = sum(r['sharpe_ratio'] for r in results) / len(results)
        
        print(f"Average Beta: {avg_beta:.4f}")
        print(f"Average Alpha (annualized): {avg_alpha:.4f}")
        print(f"Average Expected Return (CAPM, annualized): {avg_expected_return_capm:.4f}")
        print(f"Average Sharpe Ratio: {avg_sharpe:.4f}")
        
        if model.lower() == 'fama_french':
            # Calculate Fama-French averages
            avg_smb_beta = sum(r.get('smb_beta', 0) for r in results) / len(results)
            avg_hml_beta = sum(r.get('hml_beta', 0) for r in results) / len(results)
            avg_expected_return_ff = sum(r.get('expected_return_ff', 0) for r in results) / len(results)
            
            print(f"Average SMB Beta: {avg_smb_beta:.4f}")
            print(f"Average HML Beta: {avg_hml_beta:.4f}")
            print(f"Average Expected Return (FF, annualized): {avg_expected_return_ff:.4f}")
        
        # Find top performers
        results_sorted_by_sharpe = sorted(results, key=lambda x: x['sharpe_ratio'], reverse=True)
        results_sorted_by_return = sorted(results, key=lambda x: x['expected_return_capm'], reverse=True)
        
        print("\nTop 5 tickers by Sharpe Ratio:")
        for i, r in enumerate(results_sorted_by_sharpe[:5]):
            print(f"{i+1}. {r['ticker']}: {r['sharpe_ratio']:.4f}")
        
        print("\nTop 5 tickers by Expected Return (CAPM):")
        for i, r in enumerate(results_sorted_by_return[:5]):
            print(f"{i+1}. {r['ticker']}: {r['expected_return_capm']:.4f}")
        
        # Save results to CSV
        results_df = pd.DataFrame(results)
        output_dir = 'results'
        os.makedirs(output_dir, exist_ok=True)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_file = os.path.join(output_dir, f'fundamental_analysis_{model}_{timestamp}.csv')
        results_df.to_csv(output_file, index=False)
        print(f"\nDetailed results saved to: {output_file}")
    else:
        print("No analysis results to display.")

if __name__ == "__main__":
    main()



================================================
File: scripts/technical_signals.py
================================================
# technical_signals.py

'''
This script contains the original technical indicator functions and a function to store the computed signals in a database.

The apply_trading_strategy function applies the technical indicator functions to compute trading signals for a given DataFrame of price data.
The update_technical_signals function loads raw price data from the database, applies the trading strategy, and stores the computed technical signals in the 'technical_signals' table.

The technical indicator functions include:
- Simple Moving Average (SMA) signals
- Relative Strength Index (RSI)
- Bollinger Bands signals
- Moving Average Convergence Divergence (MACD)
- On-Balance Volume (OBV) 
- Stochastic Oscillator
- Average Directional Index (ADX)

The apply_trading_strategy function combines the signals from these indicators to generate an overall trading signal.
'''

import os
import sqlite3
import pandas as pd
import numpy as np
import logging
from math import floor, sqrt
from datetime import datetime

# Set up logging
logging.basicConfig(filename='logs/project.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

#########################
# TECHNICAL INDICATOR FUNCTIONS (Original Methods)
#########################

def compute_sma_signals(df, short_window=5, long_window=20):
    df['SMA_short'] = df['close'].rolling(window=short_window).mean()
    df['SMA_long'] = df['close'].rolling(window=long_window).mean()
    df['SMA_Ratio'] = df['SMA_long'] / df['SMA_short']
    df['SMA_signal'] = np.where(df['SMA_Ratio'] < 1, 1, 0)
    df['SMA_position'] = df['SMA_signal'].diff()
    return df

def compute_rsi(df, window=14):
    delta = df['close'].diff()
    gain = delta.clip(lower=0).rolling(window=window).mean()
    loss = (-delta).clip(lower=0).rolling(window=window).mean()
    rs = gain / loss
    df['RSI'] = 100 - (100 / (1 + rs))
    df['RSI_signal'] = np.where(df['RSI'] < 30, 1,
                                np.where(df['RSI'] > 70, -1, 0))
    return df

def compute_bollinger_bands(df, window=20):
    df['BB_MA'] = df['close'].rolling(window=window).mean()
    df['BB_std'] = df['close'].rolling(window=window).std()
    df['BB_upper'] = df['BB_MA'] + 2 * df['BB_std']
    df['BB_lower'] = df['BB_MA'] - 2 * df['BB_std']
    df['BB_signal'] = np.where(df['close'] < df['BB_lower'], 1,
                               np.where(df['close'] > df['BB_upper'], -1, 0))
    return df

def compute_macd(df, span_short=12, span_long=26, span_signal=9):
    df['EMA_short'] = df['close'].ewm(span=span_short, adjust=False).mean()
    df['EMA_long'] = df['close'].ewm(span=span_long, adjust=False).mean()
    df['MACD'] = df['EMA_short'] - df['EMA_long']
    df['MACD_signal_line'] = df['MACD'].ewm(span=span_signal, adjust=False).mean()
    df['MACD_signal'] = np.where(df['MACD'] > df['MACD_signal_line'], 1, -1)
    return df

def compute_obv(df):
    df['price_change'] = df['close'].diff()
    df['direction'] = np.where(df['price_change'] > 0, 1,
                               np.where(df['price_change'] < 0, -1, 0))
    df['OBV'] = (df['volume'] * df['direction']).fillna(0).cumsum()
    df['OBV_MA'] = df['OBV'].rolling(window=20).mean()
    df['OBV_signal'] = np.where(df['OBV'] > df['OBV_MA'], 1, -1)
    return df

def compute_stochastic(df, window=14, smooth_window=3):
    df['lowest_low'] = df['close'].rolling(window=window).min()
    df['highest_high'] = df['close'].rolling(window=window).max()
    df['%K'] = 100 * ((df['close'] - df['lowest_low']) / (df['highest_high'] - df['lowest_low']))
    df['%D'] = df['%K'].rolling(window=smooth_window).mean()
    df['stoch_signal'] = np.where(df['%K'] < 20, 1,
                                  np.where(df['%K'] > 80, -1, 0))
    return df

def compute_adx(df, window=14):
    df['TR'] = df['close'].diff().abs()
    df['+DM'] = np.where(df['close'].diff() > 0, df['close'].diff(), 0)
    df['-DM'] = np.where(df['close'].diff() < 0, -df['close'].diff(), 0)
    df['TR_smooth'] = df['TR'].rolling(window=window).sum()
    df['+DM_smooth'] = df['+DM'].rolling(window=window).sum()
    df['-DM_smooth'] = df['-DM'].rolling(window=window).sum()
    df['+DI'] = 100 * (df['+DM_smooth'] / df['TR_smooth'])
    df['-DI'] = 100 * (df['-DM_smooth'] / df['TR_smooth'])
    df['DX'] = 100 * (np.abs(df['+DI'] - df['-DI']) / (df['+DI'] + df['-DI']))
    df['ADX'] = df['DX'].rolling(window=window).mean()
    df['ADX_signal'] = np.where((df['ADX'] > 25) & (df['+DI'] > df['-DI']), 1,
                                np.where((df['ADX'] > 25) & (df['+DI'] < df['-DI']), -1, 0))
    return df

def apply_trading_strategy(df):
    """
    Applies all technical indicator functions and combines their signals.
    This version uses your original indicator calculations.
    """
    df = df.sort_values(by='date').reset_index(drop=True)
    df = compute_sma_signals(df)
    df = compute_rsi(df)
    df = compute_bollinger_bands(df)
    df = compute_macd(df)
    df = compute_obv(df)
    df = compute_stochastic(df)
    df = compute_adx(df)
    # Combine signals from 7 indicators:
    signal_cols = ['SMA_signal', 'RSI_signal', 'BB_signal', 
                   'MACD_signal', 'OBV_signal', 'stoch_signal', 'ADX_signal']
    for col in signal_cols:
        if col not in df.columns:
            df[col] = 0
    df['combined_signal_score'] = df[signal_cols].sum(axis=1)
    threshold = 3
    df['overall_signal'] = np.where(df['combined_signal_score'] >= threshold, 1,
                                    np.where(df['combined_signal_score'] <= -threshold, -1, 0))
    # ATR as a volatility proxy (optional)
    df['atr'] = df['close'].diff().abs().rolling(window=14).mean()
    return df

#########################
# SQL INTEGRATION & TECHNICAL SIGNAL STORAGE
#########################

def update_technical_signals(db_path):
    """
    Loads raw price data from the database, applies the trading strategy, and
    stores the computed technical signals in the 'technical_signals' table.
    """
    try:
        conn = sqlite3.connect(db_path)
        logging.info("Connected to database for technical signals update.")
    except Exception as e:
        logging.error(f"Database connection error: {e}")
        return
    
    price_query = "SELECT ticker, date, close, volume FROM nasdaq_100_daily_prices"
    price_df = pd.read_sql_query(price_query, conn, parse_dates=['date'])
    logging.info("Loaded daily price data from nasdaq_100_daily_prices.")
    
    technical_records = []
    
    for ticker, group in price_df.groupby('ticker'):
        group = group.sort_values(by='date').reset_index(drop=True)
        group = apply_trading_strategy(group)
        group = group.dropna(subset=['SMA_long', 'RSI', 'MACD', 'atr'])
        for _, row in group.iterrows():
            record = (
                ticker,
                row['date'].strftime('%Y-%m-%d'),
                row['SMA_long'],  # 20-day SMA
                row['RSI'],
                row['MACD'],
                row['atr'],
                int(row['overall_signal'])
            )
            technical_records.append(record)
    
    insert_query = """
        INSERT OR IGNORE INTO technical_signals 
        (ticker, signal_date, sma, rsi, macd, atr, signal)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """
    try:
        cursor = conn.cursor()
        cursor.executemany(insert_query, technical_records)
        conn.commit()
        logging.info(f"Inserted {len(technical_records)} records into technical_signals.")
        print(f"Inserted {len(technical_records)} records into technical_signals.")
    except Exception as e:
        logging.error(f"Error inserting technical signals: {e}")
    finally:
        conn.close()

# Allow module testing
if __name__ == "__main__":
    db_path = os.path.join("database", "data.db")
    update_technical_signals(db_path)



